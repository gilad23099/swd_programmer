
swm_programmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086cc  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  0800887c  0800887c  0000987c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a0c  08008a0c  0000a068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008a0c  08008a0c  00009a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a14  08008a14  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a14  08008a14  00009a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a18  08008a18  00009a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008a1c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a068  2**0
                  CONTENTS
 10 .bss          000007fc  20000068  20000068  0000a068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000864  20000864  0000a068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d1e7  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f1d  00000000  00000000  0002727f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b20  00000000  00000000  0002b1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001514  00000000  00000000  0002ccc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028e8f  00000000  00000000  0002e1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021d16  00000000  00000000  00057063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb4ec  00000000  00000000  00078d79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00164265  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007b4c  00000000  00000000  001642a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0016bdf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008864 	.word	0x08008864

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08008864 	.word	0x08008864

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b998 	b.w	80005d8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f816 	bl	80002e0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__paritysi2>:
 80002c0:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 80002c4:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 80002c8:	ea80 1010 	eor.w	r0, r0, r0, lsr #4
 80002cc:	f646 1396 	movw	r3, #27030	@ 0x6996
 80002d0:	f000 000f 	and.w	r0, r0, #15
 80002d4:	fa43 f000 	asr.w	r0, r3, r0
 80002d8:	f000 0001 	and.w	r0, r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 fdca 	bl	8002178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f830 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 faca 	bl	8000b80 <MX_GPIO_Init>
  MX_CRC_Init();
 80005ec:	f000 f896 	bl	800071c <MX_CRC_Init>
  MX_DMA2D_Init();
 80005f0:	f000 f8a8 	bl	8000744 <MX_DMA2D_Init>
  MX_FMC_Init();
 80005f4:	f000 fa74 	bl	8000ae0 <MX_FMC_Init>
  MX_I2C3_Init();
 80005f8:	f000 f8d6 	bl	80007a8 <MX_I2C3_Init>
  MX_LTDC_Init();
 80005fc:	f000 f914 	bl	8000828 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000600:	f000 f992 	bl	8000928 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000604:	f000 f9c6 	bl	8000994 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000608:	f000 fa14 	bl	8000a34 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 800060c:	f000 fa3c 	bl	8000a88 <MX_USB_OTG_HS_HCD_Init>
  /* USER CODE BEGIN 2 */

  //-----------------------------MY CODE ----------------------------------------
  SWD_Init();
 8000610:	f001 f94c 	bl	80018ac <SWD_Init>
  SWD_Halt_Target();
 8000614:	f001 f92a 	bl	800186c <SWD_Halt_Target>
  SWD_Unlock_Flash();
 8000618:	f001 fad4 	bl	8001bc4 <SWD_Unlock_Flash>
  SWD_Erase_Page(0x08000000);
 800061c:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8000620:	f001 fadc 	bl	8001bdc <SWD_Erase_Page>
  SWD_Write_Firmware();
 8000624:	f001 fb46 	bl	8001cb4 <SWD_Write_Firmware>
  if (SWD_Verify_Firmware()) SWD_Lock_Flash();
 8000628:	f001 fb66 	bl	8001cf8 <SWD_Verify_Firmware>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d002      	beq.n	8000638 <main+0x5c>
 8000632:	f001 fba7 	bl	8001d84 <SWD_Lock_Flash>
 8000636:	e003      	b.n	8000640 <main+0x64>
  else printf("Firmware verification failed. Lock skipped.\n");
 8000638:	4802      	ldr	r0, [pc, #8]	@ (8000644 <main+0x68>)
 800063a:	f007 fab1 	bl	8007ba0 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <main+0x64>
 8000644:	0800887c 	.word	0x0800887c

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	@ 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f007 fb82 	bl	8007d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b28      	ldr	r3, [pc, #160]	@ (8000714 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	4a27      	ldr	r2, [pc, #156]	@ (8000714 <SystemClock_Config+0xcc>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	@ 0x40
 800067c:	4b25      	ldr	r3, [pc, #148]	@ (8000714 <SystemClock_Config+0xcc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b22      	ldr	r3, [pc, #136]	@ (8000718 <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000694:	4a20      	ldr	r2, [pc, #128]	@ (8000718 <SystemClock_Config+0xd0>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b1e      	ldr	r3, [pc, #120]	@ (8000718 <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a8:	2301      	movs	r3, #1
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006c0:	2348      	movs	r3, #72	@ 0x48
 80006c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006c8:	2303      	movs	r3, #3
 80006ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f004 fdd7 	bl	8005284 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006dc:	f000 fb72 	bl	8000dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2302      	movs	r3, #2
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2102      	movs	r1, #2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f005 f839 	bl	8005774 <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000708:	f000 fb5c 	bl	8000dc4 <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	3750      	adds	r7, #80	@ 0x50
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_CRC_Init+0x20>)
 8000722:	4a07      	ldr	r2, [pc, #28]	@ (8000740 <MX_CRC_Init+0x24>)
 8000724:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_CRC_Init+0x20>)
 8000728:	f001 fe6e 	bl	8002408 <HAL_CRC_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000732:	f000 fb47 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000084 	.word	0x20000084
 8000740:	40023000 	.word	0x40023000

08000744 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_DMA2D_Init+0x5c>)
 800074a:	4a16      	ldr	r2, [pc, #88]	@ (80007a4 <MX_DMA2D_Init+0x60>)
 800074c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_DMA2D_Init+0x5c>)
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_DMA2D_Init+0x5c>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_DMA2D_Init+0x5c>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_DMA2D_Init+0x5c>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_DMA2D_Init+0x5c>)
 8000768:	2200      	movs	r2, #0
 800076a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_DMA2D_Init+0x5c>)
 800076e:	2200      	movs	r2, #0
 8000770:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <MX_DMA2D_Init+0x5c>)
 8000774:	2200      	movs	r2, #0
 8000776:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000778:	4809      	ldr	r0, [pc, #36]	@ (80007a0 <MX_DMA2D_Init+0x5c>)
 800077a:	f001 fe61 	bl	8002440 <HAL_DMA2D_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000784:	f000 fb1e 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000788:	2101      	movs	r1, #1
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_DMA2D_Init+0x5c>)
 800078c:	f001 ffb2 	bl	80026f4 <HAL_DMA2D_ConfigLayer>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000796:	f000 fb15 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000008c 	.word	0x2000008c
 80007a4:	4002b000 	.word	0x4002b000

080007a8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <MX_I2C3_Init+0x74>)
 80007ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000820 <MX_I2C3_Init+0x78>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <MX_I2C3_Init+0x74>)
 80007b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000824 <MX_I2C3_Init+0x7c>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b8:	4b18      	ldr	r3, [pc, #96]	@ (800081c <MX_I2C3_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80007be:	4b17      	ldr	r3, [pc, #92]	@ (800081c <MX_I2C3_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c4:	4b15      	ldr	r3, [pc, #84]	@ (800081c <MX_I2C3_Init+0x74>)
 80007c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ca:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	4b13      	ldr	r3, [pc, #76]	@ (800081c <MX_I2C3_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80007d2:	4b12      	ldr	r3, [pc, #72]	@ (800081c <MX_I2C3_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d8:	4b10      	ldr	r3, [pc, #64]	@ (800081c <MX_I2C3_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007de:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <MX_I2C3_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007e4:	480d      	ldr	r0, [pc, #52]	@ (800081c <MX_I2C3_Init+0x74>)
 80007e6:	f004 f825 	bl	8004834 <HAL_I2C_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007f0:	f000 fae8 	bl	8000dc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f4:	2100      	movs	r1, #0
 80007f6:	4809      	ldr	r0, [pc, #36]	@ (800081c <MX_I2C3_Init+0x74>)
 80007f8:	f004 f960 	bl	8004abc <HAL_I2CEx_ConfigAnalogFilter>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000802:	f000 fadf 	bl	8000dc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000806:	2100      	movs	r1, #0
 8000808:	4804      	ldr	r0, [pc, #16]	@ (800081c <MX_I2C3_Init+0x74>)
 800080a:	f004 f993 	bl	8004b34 <HAL_I2CEx_ConfigDigitalFilter>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000814:	f000 fad6 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200000cc 	.word	0x200000cc
 8000820:	40005c00 	.word	0x40005c00
 8000824:	000186a0 	.word	0x000186a0

08000828 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08e      	sub	sp, #56	@ 0x38
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2234      	movs	r2, #52	@ 0x34
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f007 fa93 	bl	8007d60 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800083a:	4b39      	ldr	r3, [pc, #228]	@ (8000920 <MX_LTDC_Init+0xf8>)
 800083c:	4a39      	ldr	r2, [pc, #228]	@ (8000924 <MX_LTDC_Init+0xfc>)
 800083e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000840:	4b37      	ldr	r3, [pc, #220]	@ (8000920 <MX_LTDC_Init+0xf8>)
 8000842:	2200      	movs	r2, #0
 8000844:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000846:	4b36      	ldr	r3, [pc, #216]	@ (8000920 <MX_LTDC_Init+0xf8>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800084c:	4b34      	ldr	r3, [pc, #208]	@ (8000920 <MX_LTDC_Init+0xf8>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000852:	4b33      	ldr	r3, [pc, #204]	@ (8000920 <MX_LTDC_Init+0xf8>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000858:	4b31      	ldr	r3, [pc, #196]	@ (8000920 <MX_LTDC_Init+0xf8>)
 800085a:	2209      	movs	r2, #9
 800085c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800085e:	4b30      	ldr	r3, [pc, #192]	@ (8000920 <MX_LTDC_Init+0xf8>)
 8000860:	2201      	movs	r2, #1
 8000862:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000864:	4b2e      	ldr	r3, [pc, #184]	@ (8000920 <MX_LTDC_Init+0xf8>)
 8000866:	221d      	movs	r2, #29
 8000868:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800086a:	4b2d      	ldr	r3, [pc, #180]	@ (8000920 <MX_LTDC_Init+0xf8>)
 800086c:	2203      	movs	r2, #3
 800086e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000870:	4b2b      	ldr	r3, [pc, #172]	@ (8000920 <MX_LTDC_Init+0xf8>)
 8000872:	f240 120d 	movw	r2, #269	@ 0x10d
 8000876:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000878:	4b29      	ldr	r3, [pc, #164]	@ (8000920 <MX_LTDC_Init+0xf8>)
 800087a:	f240 1243 	movw	r2, #323	@ 0x143
 800087e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8000880:	4b27      	ldr	r3, [pc, #156]	@ (8000920 <MX_LTDC_Init+0xf8>)
 8000882:	f240 1217 	movw	r2, #279	@ 0x117
 8000886:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000888:	4b25      	ldr	r3, [pc, #148]	@ (8000920 <MX_LTDC_Init+0xf8>)
 800088a:	f240 1247 	movw	r2, #327	@ 0x147
 800088e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000890:	4b23      	ldr	r3, [pc, #140]	@ (8000920 <MX_LTDC_Init+0xf8>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000898:	4b21      	ldr	r3, [pc, #132]	@ (8000920 <MX_LTDC_Init+0xf8>)
 800089a:	2200      	movs	r2, #0
 800089c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <MX_LTDC_Init+0xf8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008a8:	481d      	ldr	r0, [pc, #116]	@ (8000920 <MX_LTDC_Init+0xf8>)
 80008aa:	f004 f983 	bl	8004bb4 <HAL_LTDC_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80008b4:	f000 fa86 	bl	8000dc4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80008bc:	23f0      	movs	r3, #240	@ 0xf0
 80008be:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80008c4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80008c8:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80008ca:	2302      	movs	r3, #2
 80008cc:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80008ce:	23ff      	movs	r3, #255	@ 0xff
 80008d0:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80008d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008da:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80008dc:	2307      	movs	r3, #7
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80008e0:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 80008e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 80008e6:	23f0      	movs	r3, #240	@ 0xf0
 80008e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 80008ea:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80008ee:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2200      	movs	r2, #0
 8000906:	4619      	mov	r1, r3
 8000908:	4805      	ldr	r0, [pc, #20]	@ (8000920 <MX_LTDC_Init+0xf8>)
 800090a:	f004 fae5 	bl	8004ed8 <HAL_LTDC_ConfigLayer>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000914:	f000 fa56 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	3738      	adds	r7, #56	@ 0x38
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000120 	.word	0x20000120
 8000924:	40016800 	.word	0x40016800

08000928 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800092c:	4b17      	ldr	r3, [pc, #92]	@ (800098c <MX_SPI5_Init+0x64>)
 800092e:	4a18      	ldr	r2, [pc, #96]	@ (8000990 <MX_SPI5_Init+0x68>)
 8000930:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000932:	4b16      	ldr	r3, [pc, #88]	@ (800098c <MX_SPI5_Init+0x64>)
 8000934:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000938:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800093a:	4b14      	ldr	r3, [pc, #80]	@ (800098c <MX_SPI5_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000940:	4b12      	ldr	r3, [pc, #72]	@ (800098c <MX_SPI5_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000946:	4b11      	ldr	r3, [pc, #68]	@ (800098c <MX_SPI5_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800094c:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <MX_SPI5_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000952:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <MX_SPI5_Init+0x64>)
 8000954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000958:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800095a:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <MX_SPI5_Init+0x64>)
 800095c:	2218      	movs	r2, #24
 800095e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000960:	4b0a      	ldr	r3, [pc, #40]	@ (800098c <MX_SPI5_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <MX_SPI5_Init+0x64>)
 8000968:	2200      	movs	r2, #0
 800096a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800096c:	4b07      	ldr	r3, [pc, #28]	@ (800098c <MX_SPI5_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <MX_SPI5_Init+0x64>)
 8000974:	220a      	movs	r2, #10
 8000976:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000978:	4804      	ldr	r0, [pc, #16]	@ (800098c <MX_SPI5_Init+0x64>)
 800097a:	f005 fb41 	bl	8006000 <HAL_SPI_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000984:	f000 fa1e 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	200001c8 	.word	0x200001c8
 8000990:	40015000 	.word	0x40015000

08000994 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a8:	463b      	mov	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <MX_TIM1_Init+0x98>)
 80009b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a30 <MX_TIM1_Init+0x9c>)
 80009b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a2c <MX_TIM1_Init+0x98>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <MX_TIM1_Init+0x98>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <MX_TIM1_Init+0x98>)
 80009c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ca:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <MX_TIM1_Init+0x98>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009d0:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <MX_TIM1_Init+0x98>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <MX_TIM1_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009dc:	4813      	ldr	r0, [pc, #76]	@ (8000a2c <MX_TIM1_Init+0x98>)
 80009de:	f005 fb98 	bl	8006112 <HAL_TIM_Base_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009e8:	f000 f9ec 	bl	8000dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	4619      	mov	r1, r3
 80009f8:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <MX_TIM1_Init+0x98>)
 80009fa:	f005 fd39 	bl	8006470 <HAL_TIM_ConfigClockSource>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a04:	f000 f9de 	bl	8000dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a10:	463b      	mov	r3, r7
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_TIM1_Init+0x98>)
 8000a16:	f005 ff61 	bl	80068dc <HAL_TIMEx_MasterConfigSynchronization>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a20:	f000 f9d0 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000220 	.word	0x20000220
 8000a30:	40010000 	.word	0x40010000

08000a34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a38:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	@ (8000a84 <MX_USART1_UART_Init+0x50>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	@ (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a6c:	f005 ffc6 	bl	80069fc <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a76:	f000 f9a5 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000268 	.word	0x20000268
 8000a84:	40011000 	.word	0x40011000

08000a88 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000a8e:	4a13      	ldr	r2, [pc, #76]	@ (8000adc <MX_USB_OTG_HS_HCD_Init+0x54>)
 8000a90:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000a94:	220c      	movs	r2, #12
 8000a96:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000abc:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ac4:	f002 f885 	bl	8002bd2 <HAL_HCD_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8000ace:	f000 f979 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200002b0 	.word	0x200002b0
 8000adc:	40040000 	.word	0x40040000

08000ae0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
 8000af4:	615a      	str	r2, [r3, #20]
 8000af6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000af8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b78 <MX_FMC_Init+0x98>)
 8000afa:	4a20      	ldr	r2, [pc, #128]	@ (8000b7c <MX_FMC_Init+0x9c>)
 8000afc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000afe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b78 <MX_FMC_Init+0x98>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b04:	4b1c      	ldr	r3, [pc, #112]	@ (8000b78 <MX_FMC_Init+0x98>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b78 <MX_FMC_Init+0x98>)
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b10:	4b19      	ldr	r3, [pc, #100]	@ (8000b78 <MX_FMC_Init+0x98>)
 8000b12:	2210      	movs	r2, #16
 8000b14:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b16:	4b18      	ldr	r3, [pc, #96]	@ (8000b78 <MX_FMC_Init+0x98>)
 8000b18:	2240      	movs	r2, #64	@ 0x40
 8000b1a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b1c:	4b16      	ldr	r3, [pc, #88]	@ (8000b78 <MX_FMC_Init+0x98>)
 8000b1e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000b22:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b24:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <MX_FMC_Init+0x98>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	@ (8000b78 <MX_FMC_Init+0x98>)
 8000b2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b30:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000b32:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <MX_FMC_Init+0x98>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <MX_FMC_Init+0x98>)
 8000b3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b3e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b44:	2307      	movs	r3, #7
 8000b46:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b4c:	2307      	movs	r3, #7
 8000b4e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b50:	2303      	movs	r3, #3
 8000b52:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_FMC_Init+0x98>)
 8000b62:	f005 fa19 	bl	8005f98 <HAL_SDRAM_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b6c:	f000 f92a 	bl	8000dc4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b70:	bf00      	nop
 8000b72:	3720      	adds	r7, #32
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000690 	.word	0x20000690
 8000b7c:	a0000140 	.word	0xa0000140

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08e      	sub	sp, #56	@ 0x38
 8000b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
 8000b9a:	4b7b      	ldr	r3, [pc, #492]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a7a      	ldr	r2, [pc, #488]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b78      	ldr	r3, [pc, #480]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	623b      	str	r3, [r7, #32]
 8000bb0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
 8000bb6:	4b74      	ldr	r3, [pc, #464]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a73      	ldr	r2, [pc, #460]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000bbc:	f043 0320 	orr.w	r3, r3, #32
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b71      	ldr	r3, [pc, #452]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0320 	and.w	r3, r3, #32
 8000bca:	61fb      	str	r3, [r7, #28]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	4b6d      	ldr	r3, [pc, #436]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a6c      	ldr	r2, [pc, #432]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b6a      	ldr	r3, [pc, #424]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000be6:	61bb      	str	r3, [r7, #24]
 8000be8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	4b66      	ldr	r3, [pc, #408]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a65      	ldr	r2, [pc, #404]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b63      	ldr	r3, [pc, #396]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a5e      	ldr	r2, [pc, #376]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b5c      	ldr	r3, [pc, #368]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b58      	ldr	r3, [pc, #352]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a57      	ldr	r2, [pc, #348]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000c2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b55      	ldr	r3, [pc, #340]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	4b51      	ldr	r3, [pc, #324]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	4a50      	ldr	r2, [pc, #320]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000c48:	f043 0310 	orr.w	r3, r3, #16
 8000c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4e:	4b4e      	ldr	r3, [pc, #312]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	f003 0310 	and.w	r3, r3, #16
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b4a      	ldr	r3, [pc, #296]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a49      	ldr	r2, [pc, #292]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000c64:	f043 0308 	orr.w	r3, r3, #8
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b47      	ldr	r3, [pc, #284]	@ (8000d88 <MX_GPIO_Init+0x208>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f003 0308 	and.w	r3, r3, #8
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2116      	movs	r1, #22
 8000c7a:	4844      	ldr	r0, [pc, #272]	@ (8000d8c <MX_GPIO_Init+0x20c>)
 8000c7c:	f001 ff90 	bl	8002ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2180      	movs	r1, #128	@ 0x80
 8000c84:	4842      	ldr	r0, [pc, #264]	@ (8000d90 <MX_GPIO_Init+0x210>)
 8000c86:	f001 ff8b 	bl	8002ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000c90:	4840      	ldr	r0, [pc, #256]	@ (8000d94 <MX_GPIO_Init+0x214>)
 8000c92:	f001 ff85 	bl	8002ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000c9c:	483e      	ldr	r0, [pc, #248]	@ (8000d98 <MX_GPIO_Init+0x218>)
 8000c9e:	f001 ff7f 	bl	8002ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000ca2:	2316      	movs	r3, #22
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4834      	ldr	r0, [pc, #208]	@ (8000d8c <MX_GPIO_Init+0x20c>)
 8000cba:	f001 fdad 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000cbe:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cc4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	482e      	ldr	r0, [pc, #184]	@ (8000d90 <MX_GPIO_Init+0x210>)
 8000cd6:	f001 fd9f 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000cda:	2380      	movs	r3, #128	@ 0x80
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4827      	ldr	r0, [pc, #156]	@ (8000d90 <MX_GPIO_Init+0x210>)
 8000cf2:	f001 fd91 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000cf6:	2320      	movs	r3, #32
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cfa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4820      	ldr	r0, [pc, #128]	@ (8000d8c <MX_GPIO_Init+0x20c>)
 8000d0c:	f001 fd84 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d10:	2304      	movs	r3, #4
 8000d12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d20:	4619      	mov	r1, r3
 8000d22:	481e      	ldr	r0, [pc, #120]	@ (8000d9c <MX_GPIO_Init+0x21c>)
 8000d24:	f001 fd78 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000d28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4815      	ldr	r0, [pc, #84]	@ (8000d94 <MX_GPIO_Init+0x214>)
 8000d3e:	f001 fd6b 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000d42:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000d46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480e      	ldr	r0, [pc, #56]	@ (8000d94 <MX_GPIO_Init+0x214>)
 8000d5c:	f001 fd5c 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d60:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d76:	4619      	mov	r1, r3
 8000d78:	4807      	ldr	r0, [pc, #28]	@ (8000d98 <MX_GPIO_Init+0x218>)
 8000d7a:	f001 fd4d 	bl	8002818 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d7e:	bf00      	nop
 8000d80:	3738      	adds	r7, #56	@ 0x38
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020800 	.word	0x40020800
 8000d90:	40020000 	.word	0x40020000
 8000d94:	40020c00 	.word	0x40020c00
 8000d98:	40021800 	.word	0x40021800
 8000d9c:	40020400 	.word	0x40020400

08000da0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d101      	bne.n	8000db6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000db2:	f001 fa03 	bl	80021bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40001000 	.word	0x40001000

08000dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc8:	b672      	cpsid	i
}
 8000dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <Error_Handler+0x8>

08000dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <HAL_MspInit+0x4c>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dde:	4a0f      	ldr	r2, [pc, #60]	@ (8000e1c <HAL_MspInit+0x4c>)
 8000de0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000de6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e1c <HAL_MspInit+0x4c>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	603b      	str	r3, [r7, #0]
 8000df6:	4b09      	ldr	r3, [pc, #36]	@ (8000e1c <HAL_MspInit+0x4c>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfa:	4a08      	ldr	r2, [pc, #32]	@ (8000e1c <HAL_MspInit+0x4c>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e02:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <HAL_MspInit+0x4c>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800

08000e20 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e5c <HAL_CRC_MspInit+0x3c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d10d      	bne.n	8000e4e <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <HAL_CRC_MspInit+0x40>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a09      	ldr	r2, [pc, #36]	@ (8000e60 <HAL_CRC_MspInit+0x40>)
 8000e3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <HAL_CRC_MspInit+0x40>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000e4e:	bf00      	nop
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40023000 	.word	0x40023000
 8000e60:	40023800 	.word	0x40023800

08000e64 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0e      	ldr	r2, [pc, #56]	@ (8000eac <HAL_DMA2D_MspInit+0x48>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d115      	bne.n	8000ea2 <HAL_DMA2D_MspInit+0x3e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb0 <HAL_DMA2D_MspInit+0x4c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb0 <HAL_DMA2D_MspInit+0x4c>)
 8000e80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb0 <HAL_DMA2D_MspInit+0x4c>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2105      	movs	r1, #5
 8000e96:	205a      	movs	r0, #90	@ 0x5a
 8000e98:	f001 fa8c 	bl	80023b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e9c:	205a      	movs	r0, #90	@ 0x5a
 8000e9e:	f001 faa5 	bl	80023ec <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	4002b000 	.word	0x4002b000
 8000eb0:	40023800 	.word	0x40023800

08000eb4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	@ 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a29      	ldr	r2, [pc, #164]	@ (8000f78 <HAL_I2C_MspInit+0xc4>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d14b      	bne.n	8000f6e <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	4b28      	ldr	r3, [pc, #160]	@ (8000f7c <HAL_I2C_MspInit+0xc8>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a27      	ldr	r2, [pc, #156]	@ (8000f7c <HAL_I2C_MspInit+0xc8>)
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b25      	ldr	r3, [pc, #148]	@ (8000f7c <HAL_I2C_MspInit+0xc8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0304 	and.w	r3, r3, #4
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b21      	ldr	r3, [pc, #132]	@ (8000f7c <HAL_I2C_MspInit+0xc8>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	4a20      	ldr	r2, [pc, #128]	@ (8000f7c <HAL_I2C_MspInit+0xc8>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f02:	4b1e      	ldr	r3, [pc, #120]	@ (8000f7c <HAL_I2C_MspInit+0xc8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f14:	2312      	movs	r3, #18
 8000f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f20:	2304      	movs	r3, #4
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4815      	ldr	r0, [pc, #84]	@ (8000f80 <HAL_I2C_MspInit+0xcc>)
 8000f2c:	f001 fc74 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f36:	2312      	movs	r3, #18
 8000f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f42:	2304      	movs	r3, #4
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480d      	ldr	r0, [pc, #52]	@ (8000f84 <HAL_I2C_MspInit+0xd0>)
 8000f4e:	f001 fc63 	bl	8002818 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <HAL_I2C_MspInit+0xc8>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	4a08      	ldr	r2, [pc, #32]	@ (8000f7c <HAL_I2C_MspInit+0xc8>)
 8000f5c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f62:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <HAL_I2C_MspInit+0xc8>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	@ 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40005c00 	.word	0x40005c00
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020800 	.word	0x40020800
 8000f84:	40020000 	.word	0x40020000

08000f88 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b09a      	sub	sp, #104	@ 0x68
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa4:	2230      	movs	r2, #48	@ 0x30
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f006 fed9 	bl	8007d60 <memset>
  if(hltdc->Instance==LTDC)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a85      	ldr	r2, [pc, #532]	@ (80011c8 <HAL_LTDC_MspInit+0x240>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	f040 8102 	bne.w	80011be <HAL_LTDC_MspInit+0x236>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000fba:	2308      	movs	r3, #8
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000fbe:	2332      	movs	r3, #50	@ 0x32
 8000fc0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f004 fe22 	bl	8005c18 <HAL_RCCEx_PeriphCLKConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000fda:	f7ff fef3 	bl	8000dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	623b      	str	r3, [r7, #32]
 8000fe2:	4b7a      	ldr	r3, [pc, #488]	@ (80011cc <HAL_LTDC_MspInit+0x244>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe6:	4a79      	ldr	r2, [pc, #484]	@ (80011cc <HAL_LTDC_MspInit+0x244>)
 8000fe8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fee:	4b77      	ldr	r3, [pc, #476]	@ (80011cc <HAL_LTDC_MspInit+0x244>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ff6:	623b      	str	r3, [r7, #32]
 8000ff8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
 8000ffe:	4b73      	ldr	r3, [pc, #460]	@ (80011cc <HAL_LTDC_MspInit+0x244>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4a72      	ldr	r2, [pc, #456]	@ (80011cc <HAL_LTDC_MspInit+0x244>)
 8001004:	f043 0320 	orr.w	r3, r3, #32
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
 800100a:	4b70      	ldr	r3, [pc, #448]	@ (80011cc <HAL_LTDC_MspInit+0x244>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	f003 0320 	and.w	r3, r3, #32
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
 800101a:	4b6c      	ldr	r3, [pc, #432]	@ (80011cc <HAL_LTDC_MspInit+0x244>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	4a6b      	ldr	r2, [pc, #428]	@ (80011cc <HAL_LTDC_MspInit+0x244>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6313      	str	r3, [r2, #48]	@ 0x30
 8001026:	4b69      	ldr	r3, [pc, #420]	@ (80011cc <HAL_LTDC_MspInit+0x244>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	61bb      	str	r3, [r7, #24]
 8001030:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	4b65      	ldr	r3, [pc, #404]	@ (80011cc <HAL_LTDC_MspInit+0x244>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	4a64      	ldr	r2, [pc, #400]	@ (80011cc <HAL_LTDC_MspInit+0x244>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	6313      	str	r3, [r2, #48]	@ 0x30
 8001042:	4b62      	ldr	r3, [pc, #392]	@ (80011cc <HAL_LTDC_MspInit+0x244>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b5e      	ldr	r3, [pc, #376]	@ (80011cc <HAL_LTDC_MspInit+0x244>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a5d      	ldr	r2, [pc, #372]	@ (80011cc <HAL_LTDC_MspInit+0x244>)
 8001058:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b5b      	ldr	r3, [pc, #364]	@ (80011cc <HAL_LTDC_MspInit+0x244>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b57      	ldr	r3, [pc, #348]	@ (80011cc <HAL_LTDC_MspInit+0x244>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a56      	ldr	r2, [pc, #344]	@ (80011cc <HAL_LTDC_MspInit+0x244>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b54      	ldr	r3, [pc, #336]	@ (80011cc <HAL_LTDC_MspInit+0x244>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	4b50      	ldr	r3, [pc, #320]	@ (80011cc <HAL_LTDC_MspInit+0x244>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a4f      	ldr	r2, [pc, #316]	@ (80011cc <HAL_LTDC_MspInit+0x244>)
 8001090:	f043 0308 	orr.w	r3, r3, #8
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b4d      	ldr	r3, [pc, #308]	@ (80011cc <HAL_LTDC_MspInit+0x244>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80010a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010b4:	230e      	movs	r3, #14
 80010b6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010bc:	4619      	mov	r1, r3
 80010be:	4844      	ldr	r0, [pc, #272]	@ (80011d0 <HAL_LTDC_MspInit+0x248>)
 80010c0:	f001 fbaa 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80010c4:	f641 0358 	movw	r3, #6232	@ 0x1858
 80010c8:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010d6:	230e      	movs	r3, #14
 80010d8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010de:	4619      	mov	r1, r3
 80010e0:	483c      	ldr	r0, [pc, #240]	@ (80011d4 <HAL_LTDC_MspInit+0x24c>)
 80010e2:	f001 fb99 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80010e6:	2303      	movs	r3, #3
 80010e8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010f6:	2309      	movs	r3, #9
 80010f8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010fe:	4619      	mov	r1, r3
 8001100:	4835      	ldr	r0, [pc, #212]	@ (80011d8 <HAL_LTDC_MspInit+0x250>)
 8001102:	f001 fb89 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001106:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800110a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001118:	230e      	movs	r3, #14
 800111a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001120:	4619      	mov	r1, r3
 8001122:	482d      	ldr	r0, [pc, #180]	@ (80011d8 <HAL_LTDC_MspInit+0x250>)
 8001124:	f001 fb78 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001128:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800112c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800113a:	230e      	movs	r3, #14
 800113c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800113e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001142:	4619      	mov	r1, r3
 8001144:	4825      	ldr	r0, [pc, #148]	@ (80011dc <HAL_LTDC_MspInit+0x254>)
 8001146:	f001 fb67 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800114a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800114e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800115c:	230e      	movs	r3, #14
 800115e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001160:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001164:	4619      	mov	r1, r3
 8001166:	481e      	ldr	r0, [pc, #120]	@ (80011e0 <HAL_LTDC_MspInit+0x258>)
 8001168:	f001 fb56 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800116c:	2348      	movs	r3, #72	@ 0x48
 800116e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800117c:	230e      	movs	r3, #14
 800117e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001180:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001184:	4619      	mov	r1, r3
 8001186:	4817      	ldr	r0, [pc, #92]	@ (80011e4 <HAL_LTDC_MspInit+0x25c>)
 8001188:	f001 fb46 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800118c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001190:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800119e:	2309      	movs	r3, #9
 80011a0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011a2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011a6:	4619      	mov	r1, r3
 80011a8:	480c      	ldr	r0, [pc, #48]	@ (80011dc <HAL_LTDC_MspInit+0x254>)
 80011aa:	f001 fb35 	bl	8002818 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2105      	movs	r1, #5
 80011b2:	2058      	movs	r0, #88	@ 0x58
 80011b4:	f001 f8fe 	bl	80023b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011b8:	2058      	movs	r0, #88	@ 0x58
 80011ba:	f001 f917 	bl	80023ec <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 80011be:	bf00      	nop
 80011c0:	3768      	adds	r7, #104	@ 0x68
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40016800 	.word	0x40016800
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40021400 	.word	0x40021400
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40021800 	.word	0x40021800
 80011e0:	40020800 	.word	0x40020800
 80011e4:	40020c00 	.word	0x40020c00

080011e8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	@ 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a19      	ldr	r2, [pc, #100]	@ (800126c <HAL_SPI_MspInit+0x84>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d12c      	bne.n	8001264 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	4b18      	ldr	r3, [pc, #96]	@ (8001270 <HAL_SPI_MspInit+0x88>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	4a17      	ldr	r2, [pc, #92]	@ (8001270 <HAL_SPI_MspInit+0x88>)
 8001214:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001218:	6453      	str	r3, [r2, #68]	@ 0x44
 800121a:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <HAL_SPI_MspInit+0x88>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <HAL_SPI_MspInit+0x88>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a10      	ldr	r2, [pc, #64]	@ (8001270 <HAL_SPI_MspInit+0x88>)
 8001230:	f043 0320 	orr.w	r3, r3, #32
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <HAL_SPI_MspInit+0x88>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0320 	and.w	r3, r3, #32
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001242:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001254:	2305      	movs	r3, #5
 8001256:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	4805      	ldr	r0, [pc, #20]	@ (8001274 <HAL_SPI_MspInit+0x8c>)
 8001260:	f001 fada 	bl	8002818 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001264:	bf00      	nop
 8001266:	3728      	adds	r7, #40	@ 0x28
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40015000 	.word	0x40015000
 8001270:	40023800 	.word	0x40023800
 8001274:	40021400 	.word	0x40021400

08001278 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <HAL_TIM_Base_MspInit+0x3c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d10d      	bne.n	80012a6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <HAL_TIM_Base_MspInit+0x40>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001292:	4a09      	ldr	r2, [pc, #36]	@ (80012b8 <HAL_TIM_Base_MspInit+0x40>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6453      	str	r3, [r2, #68]	@ 0x44
 800129a:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <HAL_TIM_Base_MspInit+0x40>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80012a6:	bf00      	nop
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40010000 	.word	0x40010000
 80012b8:	40023800 	.word	0x40023800

080012bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	@ 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a19      	ldr	r2, [pc, #100]	@ (8001340 <HAL_UART_MspInit+0x84>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d12c      	bne.n	8001338 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <HAL_UART_MspInit+0x88>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e6:	4a17      	ldr	r2, [pc, #92]	@ (8001344 <HAL_UART_MspInit+0x88>)
 80012e8:	f043 0310 	orr.w	r3, r3, #16
 80012ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <HAL_UART_MspInit+0x88>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <HAL_UART_MspInit+0x88>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a10      	ldr	r2, [pc, #64]	@ (8001344 <HAL_UART_MspInit+0x88>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <HAL_UART_MspInit+0x88>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001316:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001328:	2307      	movs	r3, #7
 800132a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <HAL_UART_MspInit+0x8c>)
 8001334:	f001 fa70 	bl	8002818 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001338:	bf00      	nop
 800133a:	3728      	adds	r7, #40	@ 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40011000 	.word	0x40011000
 8001344:	40023800 	.word	0x40023800
 8001348:	40020000 	.word	0x40020000

0800134c <HAL_HCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhcd: HCD handle pointer
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_HS)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a24      	ldr	r2, [pc, #144]	@ (80013fc <HAL_HCD_MspInit+0xb0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d141      	bne.n	80013f2 <HAL_HCD_MspInit+0xa6>
  {
    /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b23      	ldr	r3, [pc, #140]	@ (8001400 <HAL_HCD_MspInit+0xb4>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a22      	ldr	r2, [pc, #136]	@ (8001400 <HAL_HCD_MspInit+0xb4>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b20      	ldr	r3, [pc, #128]	@ (8001400 <HAL_HCD_MspInit+0xb4>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800138a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800138e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800139c:	230c      	movs	r3, #12
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	4817      	ldr	r0, [pc, #92]	@ (8001404 <HAL_HCD_MspInit+0xb8>)
 80013a8:	f001 fa36 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80013ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4810      	ldr	r0, [pc, #64]	@ (8001404 <HAL_HCD_MspInit+0xb8>)
 80013c2:	f001 fa29 	bl	8002818 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <HAL_HCD_MspInit+0xb4>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001400 <HAL_HCD_MspInit+0xb4>)
 80013d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001400 <HAL_HCD_MspInit+0xb4>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	204d      	movs	r0, #77	@ 0x4d
 80013e8:	f000 ffe4 	bl	80023b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80013ec:	204d      	movs	r0, #77	@ 0x4d
 80013ee:	f000 fffd 	bl	80023ec <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	@ 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40040000 	.word	0x40040000
 8001400:	40023800 	.word	0x40023800
 8001404:	40020400 	.word	0x40020400

08001408 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800141c:	4b3b      	ldr	r3, [pc, #236]	@ (800150c <HAL_FMC_MspInit+0x104>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d16f      	bne.n	8001504 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001424:	4b39      	ldr	r3, [pc, #228]	@ (800150c <HAL_FMC_MspInit+0x104>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	4b38      	ldr	r3, [pc, #224]	@ (8001510 <HAL_FMC_MspInit+0x108>)
 8001430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001432:	4a37      	ldr	r2, [pc, #220]	@ (8001510 <HAL_FMC_MspInit+0x108>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6393      	str	r3, [r2, #56]	@ 0x38
 800143a:	4b35      	ldr	r3, [pc, #212]	@ (8001510 <HAL_FMC_MspInit+0x108>)
 800143c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001446:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800144a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001458:	230c      	movs	r3, #12
 800145a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	4619      	mov	r1, r3
 8001460:	482c      	ldr	r0, [pc, #176]	@ (8001514 <HAL_FMC_MspInit+0x10c>)
 8001462:	f001 f9d9 	bl	8002818 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001466:	2301      	movs	r3, #1
 8001468:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001472:	2303      	movs	r3, #3
 8001474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001476:	230c      	movs	r3, #12
 8001478:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	4619      	mov	r1, r3
 800147e:	4826      	ldr	r0, [pc, #152]	@ (8001518 <HAL_FMC_MspInit+0x110>)
 8001480:	f001 f9ca 	bl	8002818 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001484:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001488:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001496:	230c      	movs	r3, #12
 8001498:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4619      	mov	r1, r3
 800149e:	481f      	ldr	r0, [pc, #124]	@ (800151c <HAL_FMC_MspInit+0x114>)
 80014a0:	f001 f9ba 	bl	8002818 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80014a4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80014a8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014b6:	230c      	movs	r3, #12
 80014b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	4619      	mov	r1, r3
 80014be:	4818      	ldr	r0, [pc, #96]	@ (8001520 <HAL_FMC_MspInit+0x118>)
 80014c0:	f001 f9aa 	bl	8002818 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80014c4:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80014c8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014d6:	230c      	movs	r3, #12
 80014d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4811      	ldr	r0, [pc, #68]	@ (8001524 <HAL_FMC_MspInit+0x11c>)
 80014e0:	f001 f99a 	bl	8002818 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80014e4:	2360      	movs	r3, #96	@ 0x60
 80014e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014f4:	230c      	movs	r3, #12
 80014f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	480a      	ldr	r0, [pc, #40]	@ (8001528 <HAL_FMC_MspInit+0x120>)
 80014fe:	f001 f98b 	bl	8002818 <HAL_GPIO_Init>
 8001502:	e000      	b.n	8001506 <HAL_FMC_MspInit+0xfe>
    return;
 8001504:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200006c4 	.word	0x200006c4
 8001510:	40023800 	.word	0x40023800
 8001514:	40021400 	.word	0x40021400
 8001518:	40020800 	.word	0x40020800
 800151c:	40021800 	.word	0x40021800
 8001520:	40021000 	.word	0x40021000
 8001524:	40020c00 	.word	0x40020c00
 8001528:	40020400 	.word	0x40020400

0800152c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001534:	f7ff ff68 	bl	8001408 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08e      	sub	sp, #56	@ 0x38
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	4b33      	ldr	r3, [pc, #204]	@ (8001624 <HAL_InitTick+0xe4>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001558:	4a32      	ldr	r2, [pc, #200]	@ (8001624 <HAL_InitTick+0xe4>)
 800155a:	f043 0310 	orr.w	r3, r3, #16
 800155e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001560:	4b30      	ldr	r3, [pc, #192]	@ (8001624 <HAL_InitTick+0xe4>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001564:	f003 0310 	and.w	r3, r3, #16
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800156c:	f107 0210 	add.w	r2, r7, #16
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f004 fb1c 	bl	8005bb4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001582:	2b00      	cmp	r3, #0
 8001584:	d103      	bne.n	800158e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001586:	f004 faed 	bl	8005b64 <HAL_RCC_GetPCLK1Freq>
 800158a:	6378      	str	r0, [r7, #52]	@ 0x34
 800158c:	e004      	b.n	8001598 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800158e:	f004 fae9 	bl	8005b64 <HAL_RCC_GetPCLK1Freq>
 8001592:	4603      	mov	r3, r0
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800159a:	4a23      	ldr	r2, [pc, #140]	@ (8001628 <HAL_InitTick+0xe8>)
 800159c:	fba2 2303 	umull	r2, r3, r2, r3
 80015a0:	0c9b      	lsrs	r3, r3, #18
 80015a2:	3b01      	subs	r3, #1
 80015a4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015a6:	4b21      	ldr	r3, [pc, #132]	@ (800162c <HAL_InitTick+0xec>)
 80015a8:	4a21      	ldr	r2, [pc, #132]	@ (8001630 <HAL_InitTick+0xf0>)
 80015aa:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <HAL_InitTick+0xec>)
 80015ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015b4:	4a1d      	ldr	r2, [pc, #116]	@ (800162c <HAL_InitTick+0xec>)
 80015b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015ba:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <HAL_InitTick+0xec>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c0:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <HAL_InitTick+0xec>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c6:	4b19      	ldr	r3, [pc, #100]	@ (800162c <HAL_InitTick+0xec>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80015cc:	4817      	ldr	r0, [pc, #92]	@ (800162c <HAL_InitTick+0xec>)
 80015ce:	f004 fda0 	bl	8006112 <HAL_TIM_Base_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80015d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d11b      	bne.n	8001618 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015e0:	4812      	ldr	r0, [pc, #72]	@ (800162c <HAL_InitTick+0xec>)
 80015e2:	f004 fde5 	bl	80061b0 <HAL_TIM_Base_Start_IT>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80015ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d111      	bne.n	8001618 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015f4:	2036      	movs	r0, #54	@ 0x36
 80015f6:	f000 fef9 	bl	80023ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d808      	bhi.n	8001612 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001600:	2200      	movs	r2, #0
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	2036      	movs	r0, #54	@ 0x36
 8001606:	f000 fed5 	bl	80023b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800160a:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <HAL_InitTick+0xf4>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	e002      	b.n	8001618 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001618:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800161c:	4618      	mov	r0, r3
 800161e:	3738      	adds	r7, #56	@ 0x38
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40023800 	.word	0x40023800
 8001628:	431bde83 	.word	0x431bde83
 800162c:	200006c8 	.word	0x200006c8
 8001630:	40001000 	.word	0x40001000
 8001634:	20000004 	.word	0x20000004

08001638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <NMI_Handler+0x4>

08001640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <MemManage_Handler+0x4>

08001650 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <UsageFault_Handler+0x4>

08001660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <TIM6_DAC_IRQHandler+0x10>)
 800169e:	f004 fdf7 	bl	8006290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200006c8 	.word	0x200006c8

080016ac <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80016b0:	4802      	ldr	r0, [pc, #8]	@ (80016bc <OTG_HS_IRQHandler+0x10>)
 80016b2:	f001 faf5 	bl	8002ca0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200002b0 	.word	0x200002b0

080016c0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80016c4:	4802      	ldr	r0, [pc, #8]	@ (80016d0 <LTDC_IRQHandler+0x10>)
 80016c6:	f003 fb45 	bl	8004d54 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000120 	.word	0x20000120

080016d4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80016d8:	4802      	ldr	r0, [pc, #8]	@ (80016e4 <DMA2D_IRQHandler+0x10>)
 80016da:	f000 fefa 	bl	80024d2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000008c 	.word	0x2000008c

080016e8 <SWD_Write_Bit>:
 * SWD_Write_Bit
 * Writes a single bit to the SWDIO line and toggles SWCLK.
 * Parameters:
 *   bit – the bit value (0 or 1) to send.
 */
void SWD_Write_Bit(uint8_t bit) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(PORT_SWD, PIN_SWDIO, bit ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	bf14      	ite	ne
 80016f8:	2301      	movne	r3, #1
 80016fa:	2300      	moveq	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	461a      	mov	r2, r3
 8001700:	2101      	movs	r1, #1
 8001702:	4804      	ldr	r0, [pc, #16]	@ (8001714 <SWD_Write_Bit+0x2c>)
 8001704:	f001 fa4c 	bl	8002ba0 <HAL_GPIO_WritePin>
    SWCLK_Cycle();
 8001708:	f000 fbc6 	bl	8001e98 <SWCLK_Cycle>
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40020400 	.word	0x40020400

08001718 <SWD_Read_Bit>:
 * SWD_Read_Bit
 * Reads a single bit from the SWDIO line and toggles SWCLK.
 * Returns:
 *   The bit value read from the target.
 */
uint8_t SWD_Read_Bit(void) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PORT_SWD, PIN_SWCLK, GPIO_PIN_SET);
 800171e:	2201      	movs	r2, #1
 8001720:	2102      	movs	r1, #2
 8001722:	480b      	ldr	r0, [pc, #44]	@ (8001750 <SWD_Read_Bit+0x38>)
 8001724:	f001 fa3c 	bl	8002ba0 <HAL_GPIO_WritePin>
    delay_short();
 8001728:	f000 fb38 	bl	8001d9c <delay_short>
    uint8_t bit = HAL_GPIO_ReadPin(PORT_SWD, PIN_SWDIO);
 800172c:	2101      	movs	r1, #1
 800172e:	4808      	ldr	r0, [pc, #32]	@ (8001750 <SWD_Read_Bit+0x38>)
 8001730:	f001 fa1e 	bl	8002b70 <HAL_GPIO_ReadPin>
 8001734:	4603      	mov	r3, r0
 8001736:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(PORT_SWD, PIN_SWCLK, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	2102      	movs	r1, #2
 800173c:	4804      	ldr	r0, [pc, #16]	@ (8001750 <SWD_Read_Bit+0x38>)
 800173e:	f001 fa2f 	bl	8002ba0 <HAL_GPIO_WritePin>
    delay_short();
 8001742:	f000 fb2b 	bl	8001d9c <delay_short>
    return bit;
 8001746:	79fb      	ldrb	r3, [r7, #7]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40020400 	.word	0x40020400

08001754 <SWD_Write_Byte>:
 * Sends a byte (8 bits) to the target via SWDIO.
 * Sent LSB-first.
 * Parameters:
 *   byte – the byte value to transmit.
 */
void SWD_Write_Byte(uint8_t byte) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	e00d      	b.n	8001780 <SWD_Write_Byte+0x2c>
        SWD_Write_Bit((byte >> i) & 1);
 8001764:	79fa      	ldrb	r2, [r7, #7]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	fa42 f303 	asr.w	r3, r2, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ffb7 	bl	80016e8 <SWD_Write_Bit>
    for (int i = 0; i < 8; i++) {
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3301      	adds	r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b07      	cmp	r3, #7
 8001784:	ddee      	ble.n	8001764 <SWD_Write_Byte+0x10>
    }
}
 8001786:	bf00      	nop
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <SWD_Read_Byte>:
/*
 * SWD_Read_Byte
 * Reads a byte (8 bits) from the target via SWDIO.
 * Reads LSB-first and returns the received value.
 */
uint8_t SWD_Read_Byte(void) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
    uint8_t value = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 800179a:	2300      	movs	r3, #0
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	e00f      	b.n	80017c0 <SWD_Read_Byte+0x30>
        value |= (SWD_Read_Bit() << i);
 80017a0:	f7ff ffba 	bl	8001718 <SWD_Read_Bit>
 80017a4:	4603      	mov	r3, r0
 80017a6:	461a      	mov	r2, r3
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	b25a      	sxtb	r2, r3
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	3301      	adds	r3, #1
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	2b07      	cmp	r3, #7
 80017c4:	ddec      	ble.n	80017a0 <SWD_Read_Byte+0x10>
    }
    return value;
 80017c6:	79fb      	ldrb	r3, [r7, #7]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <SWD_Send_SwitchSequence>:
/*
 * SWD_Send_SwitchSequence
 * Sends a 16-bit SWJ switch sequence.
 * Used to switch the target from JTAG mode to SWD mode.
 */
void SWD_Send_SwitchSequence(void) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
    uint16_t swj = 0xE79E;
 80017d6:	f24e 739e 	movw	r3, #59294	@ 0xe79e
 80017da:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < 16; i++) {
 80017dc:	2300      	movs	r3, #0
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	e00d      	b.n	80017fe <SWD_Send_SwitchSequence+0x2e>
        SWD_Write_Bit((swj >> i) & 1);
 80017e2:	887a      	ldrh	r2, [r7, #2]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	fa42 f303 	asr.w	r3, r2, r3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ff78 	bl	80016e8 <SWD_Write_Bit>
    for (int i = 0; i < 16; i++) {
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3301      	adds	r3, #1
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b0f      	cmp	r3, #15
 8001802:	ddee      	ble.n	80017e2 <SWD_Send_SwitchSequence+0x12>
    }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <SWD_Read_IDCODE>:
/*
 * SWD_Read_IDCODE
 * Reads the 32-bit IDCODE from the Debug Port (DP register 0x00).
 * Verifies if SWD communication with target is alive.
 */
uint32_t SWD_Read_IDCODE(void) {
 800180e:	b580      	push	{r7, lr}
 8001810:	b084      	sub	sp, #16
 8001812:	af00      	add	r7, sp, #0
    uint8_t request = 0b10100101;  // [Start=1][AP/DP=0][RnW=1][A2=0][A3=0][Parity=1][Stop=0][Park=1]
 8001814:	23a5      	movs	r3, #165	@ 0xa5
 8001816:	71fb      	strb	r3, [r7, #7]

    if (!SWD_Send_Request_WithRetry(request)) return 0xFFFFFFFF;
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	4618      	mov	r0, r3
 800181c:	f000 fb6c 	bl	8001ef8 <SWD_Send_Request_WithRetry>
 8001820:	4603      	mov	r3, r0
 8001822:	f083 0301 	eor.w	r3, r3, #1
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d002      	beq.n	8001832 <SWD_Read_IDCODE+0x24>
 800182c:	f04f 33ff 	mov.w	r3, #4294967295
 8001830:	e018      	b.n	8001864 <SWD_Read_IDCODE+0x56>

    uint32_t idcode = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 32; i++) {
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	e00d      	b.n	8001858 <SWD_Read_IDCODE+0x4a>
        idcode |= (SWD_Read_Bit() << i);
 800183c:	f7ff ff6c 	bl	8001718 <SWD_Read_Bit>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	461a      	mov	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4313      	orrs	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 32; i++) {
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	3301      	adds	r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2b1f      	cmp	r3, #31
 800185c:	ddee      	ble.n	800183c <SWD_Read_IDCODE+0x2e>
    }
    SWD_Read_Bit(); // Read and discard parity bit
 800185e:	f7ff ff5b 	bl	8001718 <SWD_Read_Bit>
    return idcode;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <SWD_Halt_Target>:
/*
 * SWD_Halt_Target
 * Halts the target CPU by writing to the DHCSR register.
 * Required for safe flash access.
 */
void SWD_Halt_Target(void) {
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
    SWD_Write_TAR(0xE000EDF0);  // write the address of DHCSR to the TAR
 8001870:	4803      	ldr	r0, [pc, #12]	@ (8001880 <SWD_Halt_Target+0x14>)
 8001872:	f000 f8f1 	bl	8001a58 <SWD_Write_TAR>
    SWD_Write_DRW(0xA05F0003);  // write HALT + DEBUGKEY to DRW
 8001876:	4803      	ldr	r0, [pc, #12]	@ (8001884 <SWD_Halt_Target+0x18>)
 8001878:	f000 f91c 	bl	8001ab4 <SWD_Write_DRW>
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	e000edf0 	.word	0xe000edf0
 8001884:	a05f0003 	.word	0xa05f0003

08001888 <SWD_PowerUpDebugInterface>:


// Power-up debug interface via CTRL/STAT
void SWD_PowerUpDebugInterface(void) {
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
    // CDBGPWRUPREQ (bit 28), CSYSPWRUPREQ (bit 30)
    SWD_Write_DP(DP_CTRL_STAT, (1 << 28) | (1 << 30));
 800188c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8001890:	2008      	movs	r0, #8
 8001892:	f000 f83d 	bl	8001910 <SWD_Write_DP>
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}

0800189a <SWD_Select_AHB_AP>:


// Select AHB-AP (APSEL=0, APBANKSEL=0)
void SWD_Select_AHB_AP(void) {
 800189a:	b580      	push	{r7, lr}
 800189c:	af00      	add	r7, sp, #0
    SWD_Write_DP(DP_SELECT, 0x00000000); // SELECT register
 800189e:	2100      	movs	r1, #0
 80018a0:	2010      	movs	r0, #16
 80018a2:	f000 f835 	bl	8001910 <SWD_Write_DP>
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <SWD_Init>:

// Unified init sequence including everything
void SWD_Init(void) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
    SWD_GPIO_Init();
 80018b2:	f000 fac1 	bl	8001e38 <SWD_GPIO_Init>
    HAL_Delay(10);
 80018b6:	200a      	movs	r0, #10
 80018b8:	f000 fca0 	bl	80021fc <HAL_Delay>

    SWD_LineReset();
 80018bc:	f000 fb00 	bl	8001ec0 <SWD_LineReset>
    SWD_Send_SwitchSequence();
 80018c0:	f7ff ff86 	bl	80017d0 <SWD_Send_SwitchSequence>
    SWD_LineReset();
 80018c4:	f000 fafc 	bl	8001ec0 <SWD_LineReset>

    uint32_t id = SWD_Read_IDCODE();
 80018c8:	f7ff ffa1 	bl	800180e <SWD_Read_IDCODE>
 80018cc:	6078      	str	r0, [r7, #4]
    printf("[SWD] IDCODE = 0x%08lX\n", id);
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	480d      	ldr	r0, [pc, #52]	@ (8001908 <SWD_Init+0x5c>)
 80018d2:	f006 f8fd 	bl	8007ad0 <iprintf>

    SWD_PowerUpDebugInterface();
 80018d6:	f7ff ffd7 	bl	8001888 <SWD_PowerUpDebugInterface>

    // Poll the CTRL/STAT register until both power-up ACK bits are set
    if (!SWD_PollPowerUp(1000)) {
 80018da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018de:	f000 f895 	bl	8001a0c <SWD_PollPowerUp>
 80018e2:	4603      	mov	r3, r0
 80018e4:	f083 0301 	eor.w	r3, r3, #1
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <SWD_Init+0x4a>
        printf("SWD_Init: Power-up timeout!\n");
 80018ee:	4807      	ldr	r0, [pc, #28]	@ (800190c <SWD_Init+0x60>)
 80018f0:	f006 f956 	bl	8007ba0 <puts>
        return;
 80018f4:	e004      	b.n	8001900 <SWD_Init+0x54>
    }

    SWD_Select_AHB_AP();
 80018f6:	f7ff ffd0 	bl	800189a <SWD_Select_AHB_AP>

    HAL_Delay(10);
 80018fa:	200a      	movs	r0, #10
 80018fc:	f000 fc7e 	bl	80021fc <HAL_Delay>
}
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	080088a8 	.word	0x080088a8
 800190c:	080088c0 	.word	0x080088c0

08001910 <SWD_Write_DP>:

//---------------------------DP-------------------------------//


// Write to a Debug Port register (DP)
void SWD_Write_DP(uint8_t reg_address_name, uint32_t data) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	71fb      	strb	r3, [r7, #7]
	uint8_t header=0;
 800191c:	2300      	movs	r3, #0
 800191e:	72fb      	strb	r3, [r7, #11]
	header=SWD_Build_Header(DP,WRITE,reg_address_name);
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	461a      	mov	r2, r3
 8001924:	2100      	movs	r1, #0
 8001926:	2002      	movs	r0, #2
 8001928:	f000 fb14 	bl	8001f54 <SWD_Build_Header>
 800192c:	4603      	mov	r3, r0
 800192e:	72fb      	strb	r3, [r7, #11]
    if (!SWD_Send_Request_WithRetry(header)) return;
 8001930:	7afb      	ldrb	r3, [r7, #11]
 8001932:	4618      	mov	r0, r3
 8001934:	f000 fae0 	bl	8001ef8 <SWD_Send_Request_WithRetry>
 8001938:	4603      	mov	r3, r0
 800193a:	f083 0301 	eor.w	r3, r3, #1
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d119      	bne.n	8001978 <SWD_Write_DP+0x68>

    SWD_Set_IO_Mode_Output();
 8001944:	f000 fa3e 	bl	8001dc4 <SWD_Set_IO_Mode_Output>
    for (int i = 0; i < 32; i++) SWD_Write_Bit((data >> i) & 1);
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	e00d      	b.n	800196a <SWD_Write_DP+0x5a>
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	fa22 f303 	lsr.w	r3, r2, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fec2 	bl	80016e8 <SWD_Write_Bit>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	3301      	adds	r3, #1
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b1f      	cmp	r3, #31
 800196e:	ddee      	ble.n	800194e <SWD_Write_DP+0x3e>
    SWD_Write_Parity(data);
 8001970:	6838      	ldr	r0, [r7, #0]
 8001972:	f000 f95b 	bl	8001c2c <SWD_Write_Parity>
 8001976:	e000      	b.n	800197a <SWD_Write_DP+0x6a>
    if (!SWD_Send_Request_WithRetry(header)) return;
 8001978:	bf00      	nop
}
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <SWD_Read_DP>:

/**
 * SWD_Read_DP
 * Reads a 32-bit Debug Port register via SWD using the generic header builder.
 */
bool SWD_Read_DP(uint8_t reg_address_name, uint32_t *data_out) {
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
    // Build SWD header for DP read
    uint8_t header = SWD_Build_Header(DP, READ, reg_address_name);
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	461a      	mov	r2, r3
 8001990:	2104      	movs	r1, #4
 8001992:	2002      	movs	r0, #2
 8001994:	f000 fade 	bl	8001f54 <SWD_Build_Header>
 8001998:	4603      	mov	r3, r0
 800199a:	73fb      	strb	r3, [r7, #15]
    if (!SWD_Send_Request_WithRetry(header)) return false;
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 faaa 	bl	8001ef8 <SWD_Send_Request_WithRetry>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f083 0301 	eor.w	r3, r3, #1
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <SWD_Read_DP+0x34>
 80019b0:	2300      	movs	r3, #0
 80019b2:	e027      	b.n	8001a04 <SWD_Read_DP+0x84>

    // Read 32 data bits LSB-first
    uint32_t val = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 32; ++i) {
 80019b8:	2300      	movs	r3, #0
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	e00d      	b.n	80019da <SWD_Read_DP+0x5a>
        val |= (SWD_Read_Bit() << i);
 80019be:	f7ff feab 	bl	8001718 <SWD_Read_Bit>
 80019c2:	4603      	mov	r3, r0
 80019c4:	461a      	mov	r2, r3
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 32; ++i) {
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	3301      	adds	r3, #1
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	2b1f      	cmp	r3, #31
 80019de:	ddee      	ble.n	80019be <SWD_Read_DP+0x3e>
    }
    // Read and verify parity
    if (SWD_Read_Bit() != (__builtin_parity(val) & 1)) return false;
 80019e0:	f7ff fe9a 	bl	8001718 <SWD_Read_Bit>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461c      	mov	r4, r3
 80019e8:	6978      	ldr	r0, [r7, #20]
 80019ea:	f7fe fc69 	bl	80002c0 <__paritysi2>
 80019ee:	4603      	mov	r3, r0
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	429c      	cmp	r4, r3
 80019f6:	d001      	beq.n	80019fc <SWD_Read_DP+0x7c>
 80019f8:	2300      	movs	r3, #0
 80019fa:	e003      	b.n	8001a04 <SWD_Read_DP+0x84>
    *data_out = val;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	601a      	str	r2, [r3, #0]
    return true;
 8001a02:	2301      	movs	r3, #1

}
 8001a04:	4618      	mov	r0, r3
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd90      	pop	{r4, r7, pc}

08001a0c <SWD_PollPowerUp>:

/**
 * SWD_PollPowerUp
 * Polls CTRL/STAT (DP 0x04->DP_CTRL_STAT) until power-up ACK bits set or timeout.
 */
bool SWD_PollPowerUp(int timeout) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
    uint32_t stat;
    while (timeout-- > 0) {
 8001a14:	e016      	b.n	8001a44 <SWD_PollPowerUp+0x38>
        if (!SWD_Read_DP(DP_CTRL_STAT, &stat)) continue;
 8001a16:	f107 030c 	add.w	r3, r7, #12
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	2008      	movs	r0, #8
 8001a1e:	f7ff ffaf 	bl	8001980 <SWD_Read_DP>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f083 0301 	eor.w	r3, r3, #1
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d109      	bne.n	8001a42 <SWD_PollPowerUp+0x36>

        // Check CDBGPWRUPACK (bit 29) and CSYSPWRUPACK (bit 31)
        if ((stat & (1u << 29)) && (stat & (1u << 31))) {
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <SWD_PollPowerUp+0x38>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	da02      	bge.n	8001a44 <SWD_PollPowerUp+0x38>
            return true;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e006      	b.n	8001a50 <SWD_PollPowerUp+0x44>
        if (!SWD_Read_DP(DP_CTRL_STAT, &stat)) continue;
 8001a42:	bf00      	nop
    while (timeout-- > 0) {
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	1e5a      	subs	r2, r3, #1
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	dce3      	bgt.n	8001a16 <SWD_PollPowerUp+0xa>
        }
    }
    return false;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <SWD_Write_TAR>:
 * SWD_Write_TAR
 * Writes an address to the Target Address Register (TAR) in the AP.
 * Parameters:
 *   addr – 32-bit memory address to be targeted.
 */
void SWD_Write_TAR(uint32_t addr) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
    uint8_t request = 0b10010011;  // [Start=1][AP/DP=1][RnW=0][A2=0][A3=1][Parity=0][Stop=0][Park=1]
 8001a60:	2393      	movs	r3, #147	@ 0x93
 8001a62:	72fb      	strb	r3, [r7, #11]
    if (!SWD_Send_Request_WithRetry(request)) return;
 8001a64:	7afb      	ldrb	r3, [r7, #11]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 fa46 	bl	8001ef8 <SWD_Send_Request_WithRetry>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f083 0301 	eor.w	r3, r3, #1
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d119      	bne.n	8001aac <SWD_Write_TAR+0x54>
    SWD_Set_IO_Mode_Output();
 8001a78:	f000 f9a4 	bl	8001dc4 <SWD_Set_IO_Mode_Output>
    for (int i = 0; i < 32; i++) SWD_Write_Bit((addr >> i) & 1);
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	e00d      	b.n	8001a9e <SWD_Write_TAR+0x46>
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fe28 	bl	80016e8 <SWD_Write_Bit>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2b1f      	cmp	r3, #31
 8001aa2:	ddee      	ble.n	8001a82 <SWD_Write_TAR+0x2a>
    SWD_Write_Parity(addr);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f8c1 	bl	8001c2c <SWD_Write_Parity>
 8001aaa:	e000      	b.n	8001aae <SWD_Write_TAR+0x56>
    if (!SWD_Send_Request_WithRetry(request)) return;
 8001aac:	bf00      	nop
}
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <SWD_Write_DRW>:
 * Writes data to the Data Read/Write register (DRW) in the AP.
 * Requires TAR to be set beforehand.
 * Parameters:
 *   data – 32-bit value to write.
 */
void SWD_Write_DRW(uint32_t data) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	uint8_t request = 0b10111011;  // [Start=1][AP/DP=1][RnW=0][A2=1][A3=1][Parity=1][Stop=0][Park=1]
 8001abc:	23bb      	movs	r3, #187	@ 0xbb
 8001abe:	72fb      	strb	r3, [r7, #11]
    if (!SWD_Send_Request_WithRetry(request)) return;
 8001ac0:	7afb      	ldrb	r3, [r7, #11]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 fa18 	bl	8001ef8 <SWD_Send_Request_WithRetry>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f083 0301 	eor.w	r3, r3, #1
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d119      	bne.n	8001b08 <SWD_Write_DRW+0x54>
    SWD_Set_IO_Mode_Output();
 8001ad4:	f000 f976 	bl	8001dc4 <SWD_Set_IO_Mode_Output>
    for (int i = 0; i < 32; i++) SWD_Write_Bit((data >> i) & 1);
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	e00d      	b.n	8001afa <SWD_Write_DRW+0x46>
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fdfa 	bl	80016e8 <SWD_Write_Bit>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	3301      	adds	r3, #1
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b1f      	cmp	r3, #31
 8001afe:	ddee      	ble.n	8001ade <SWD_Write_DRW+0x2a>
    SWD_Write_Parity(data);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f893 	bl	8001c2c <SWD_Write_Parity>
 8001b06:	e000      	b.n	8001b0a <SWD_Write_DRW+0x56>
    if (!SWD_Send_Request_WithRetry(request)) return;
 8001b08:	bf00      	nop
}
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <SWD_Read_DRW>:



uint8_t SWD_Read_DRW(uint32_t *data_out) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	// ignore first call
    if (!SWD_Send_Request_WithRetry(0b10111011)) return 0;
 8001b18:	20bb      	movs	r0, #187	@ 0xbb
 8001b1a:	f000 f9ed 	bl	8001ef8 <SWD_Send_Request_WithRetry>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f083 0301 	eor.w	r3, r3, #1
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <SWD_Read_DRW+0x1e>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e043      	b.n	8001bb6 <SWD_Read_DRW+0xa6>
    for (int i = 0; i < 32; i++) SWD_Read_Bit();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	e004      	b.n	8001b3e <SWD_Read_DRW+0x2e>
 8001b34:	f7ff fdf0 	bl	8001718 <SWD_Read_Bit>
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2b1f      	cmp	r3, #31
 8001b42:	ddf7      	ble.n	8001b34 <SWD_Read_DRW+0x24>
    SWD_Read_Bit(); // discard parity
 8001b44:	f7ff fde8 	bl	8001718 <SWD_Read_Bit>

    // second call - real value
    if (!SWD_Send_Request_WithRetry(0b10111011)) return 0;
 8001b48:	20bb      	movs	r0, #187	@ 0xbb
 8001b4a:	f000 f9d5 	bl	8001ef8 <SWD_Send_Request_WithRetry>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f083 0301 	eor.w	r3, r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <SWD_Read_DRW+0x4e>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e02b      	b.n	8001bb6 <SWD_Read_DRW+0xa6>
    uint32_t data = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 32; i++) data |= (SWD_Read_Bit() << i);
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	e00d      	b.n	8001b84 <SWD_Read_DRW+0x74>
 8001b68:	f7ff fdd6 	bl	8001718 <SWD_Read_Bit>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	3301      	adds	r3, #1
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b1f      	cmp	r3, #31
 8001b88:	ddee      	ble.n	8001b68 <SWD_Read_DRW+0x58>

    uint8_t parity_bit = SWD_Read_Bit();
 8001b8a:	f7ff fdc5 	bl	8001718 <SWD_Read_Bit>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	72fb      	strb	r3, [r7, #11]
    if (__builtin_parity(data) != parity_bit) {
 8001b92:	6938      	ldr	r0, [r7, #16]
 8001b94:	f7fe fb94 	bl	80002c0 <__paritysi2>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	7afb      	ldrb	r3, [r7, #11]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d005      	beq.n	8001bae <SWD_Read_DRW+0x9e>
            printf("Parity error on DRW read: 0x%08lX\n", data);
 8001ba2:	6939      	ldr	r1, [r7, #16]
 8001ba4:	4806      	ldr	r0, [pc, #24]	@ (8001bc0 <SWD_Read_DRW+0xb0>)
 8001ba6:	f005 ff93 	bl	8007ad0 <iprintf>
            return 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e003      	b.n	8001bb6 <SWD_Read_DRW+0xa6>
    }
    *data_out = data;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	601a      	str	r2, [r3, #0]
    return 1;
 8001bb4:	2301      	movs	r3, #1
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	080088dc 	.word	0x080088dc

08001bc4 <SWD_Unlock_Flash>:
/**
 * @brief  Enable write operations on the EFM32 flash MSC.
 *         Sets the WREN bit in the MSC_WRITECTRL register.
 * @note   This must be called before any Erase or Write commands.
 */
void SWD_Unlock_Flash(void) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0

    SWD_Write_TAR(MSC_WRITECTRL);         // 1) Select the MSC_WRITECTRL register in the target's MSC block
 8001bc8:	4803      	ldr	r0, [pc, #12]	@ (8001bd8 <SWD_Unlock_Flash+0x14>)
 8001bca:	f7ff ff45 	bl	8001a58 <SWD_Write_TAR>

    SWD_Write_DRW(MSC_WRITECTRL_WREN);    // 2) Write the WREN bit to enable flash programming
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f7ff ff70 	bl	8001ab4 <SWD_Write_DRW>

    // No need to poll: write-enable takes effect immediately
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	400e0000 	.word	0x400e0000

08001bdc <SWD_Erase_Page>:
/**
 * @brief  Erase a flash page on the EFM32 via its MSC peripheral.
 * @param  page_address  Start address of the flash page to erase.
 * @note   Uses MSC_ADDRB, MSC_WRITECMD_ERASEPAGE and polls MSC_STATUS_BUSY.
 */
void SWD_Erase_Page(uint32_t page_address) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
    uint32_t status;

    // 1) Write page address to MSC_ADDRB
    SWD_Write_TAR(MSC_ADDRB);
 8001be4:	480e      	ldr	r0, [pc, #56]	@ (8001c20 <SWD_Erase_Page+0x44>)
 8001be6:	f7ff ff37 	bl	8001a58 <SWD_Write_TAR>
    SWD_Write_DRW(page_address);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ff62 	bl	8001ab4 <SWD_Write_DRW>

    // 2) Issue ERASEPAGE command
    SWD_Write_TAR(MSC_WRITECMD);
 8001bf0:	480c      	ldr	r0, [pc, #48]	@ (8001c24 <SWD_Erase_Page+0x48>)
 8001bf2:	f7ff ff31 	bl	8001a58 <SWD_Write_TAR>
    SWD_Write_DRW(MSC_WRITECMD_ERASEPAGE);
 8001bf6:	2002      	movs	r0, #2
 8001bf8:	f7ff ff5c 	bl	8001ab4 <SWD_Write_DRW>

    // 3) Poll MSC_STATUS until BUSY flag clears
    do {
        SWD_Write_TAR(MSC_STATUS);
 8001bfc:	480a      	ldr	r0, [pc, #40]	@ (8001c28 <SWD_Erase_Page+0x4c>)
 8001bfe:	f7ff ff2b 	bl	8001a58 <SWD_Write_TAR>
        SWD_Read_DRW(&status);
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff82 	bl	8001b10 <SWD_Read_DRW>
    } while (status & MSC_STATUS_BUSY);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f2      	bne.n	8001bfc <SWD_Erase_Page+0x20>
}
 8001c16:	bf00      	nop
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	400e0004 	.word	0x400e0004
 8001c24:	400e0008 	.word	0x400e0008
 8001c28:	400e000c 	.word	0x400e000c

08001c2c <SWD_Write_Parity>:


// Send parity bit (even parity)
void SWD_Write_Parity(uint32_t data) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
    uint8_t parity = __builtin_parity(data);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7fe fb43 	bl	80002c0 <__paritysi2>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	73fb      	strb	r3, [r7, #15]
    SWD_Write_Bit(parity);
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fd51 	bl	80016e8 <SWD_Write_Bit>
}
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <SWD_Write_Word>:
 * @brief  Write a 32-bit word into EFM32 flash via its MSC peripheral.
 * @param  addr  Absolute flash address where the word will be written.
 * @param  data  32-bit word to program.
 * @note   Assumes MSC write enable has already been set (via SWD_Unlock_Flash).
 */
void SWD_Write_Word(uint32_t addr, uint32_t data) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
    uint32_t status;

    // 1) Set target address (MSC_ADDRB)
    SWD_Write_TAR(MSC_ADDRB);
 8001c5a:	4812      	ldr	r0, [pc, #72]	@ (8001ca4 <SWD_Write_Word+0x54>)
 8001c5c:	f7ff fefc 	bl	8001a58 <SWD_Write_TAR>
    SWD_Write_DRW(addr);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff27 	bl	8001ab4 <SWD_Write_DRW>

    // 2) Load the data word into MSC_WDATA
    SWD_Write_TAR(MSC_WDATA);
 8001c66:	4810      	ldr	r0, [pc, #64]	@ (8001ca8 <SWD_Write_Word+0x58>)
 8001c68:	f7ff fef6 	bl	8001a58 <SWD_Write_TAR>
    SWD_Write_DRW(data);
 8001c6c:	6838      	ldr	r0, [r7, #0]
 8001c6e:	f7ff ff21 	bl	8001ab4 <SWD_Write_DRW>

    // 3) Issue WRITEWORD command
    SWD_Write_TAR(MSC_WRITECMD);
 8001c72:	480e      	ldr	r0, [pc, #56]	@ (8001cac <SWD_Write_Word+0x5c>)
 8001c74:	f7ff fef0 	bl	8001a58 <SWD_Write_TAR>
    SWD_Write_DRW(MSC_WRITECMD_WRITEWORD);
 8001c78:	2004      	movs	r0, #4
 8001c7a:	f7ff ff1b 	bl	8001ab4 <SWD_Write_DRW>

    // 4) Poll MSC_STATUS until BUSY flag clears
    do {
        SWD_Write_TAR(MSC_STATUS);
 8001c7e:	480c      	ldr	r0, [pc, #48]	@ (8001cb0 <SWD_Write_Word+0x60>)
 8001c80:	f7ff feea 	bl	8001a58 <SWD_Write_TAR>
        SWD_Read_DRW(&status);
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff41 	bl	8001b10 <SWD_Read_DRW>
    } while (status & MSC_STATUS_BUSY);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f2      	bne.n	8001c7e <SWD_Write_Word+0x2e>
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	400e0004 	.word	0x400e0004
 8001ca8:	400e0010 	.word	0x400e0010
 8001cac:	400e0008 	.word	0x400e0008
 8001cb0:	400e000c 	.word	0x400e000c

08001cb4 <SWD_Write_Firmware>:

/**
 * @brief  Program the firmware_bin array into the target’s flash memory.
 * @note   Assumes SWD_Unlock_Flash() has been called beforehand.
 */
void SWD_Write_Firmware(void) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
    for (uint32_t i = 0; i < firmware_size; ++i) {
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	e010      	b.n	8001ce2 <SWD_Write_Firmware+0x2e>
        // Calculate the absolute flash address for this word
        uint32_t addr = FLASH_BASE + (i * sizeof(uint32_t));
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	60bb      	str	r3, [r7, #8]
        uint32_t data = firmware_bin[i];
 8001cca:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf4 <SWD_Write_Firmware+0x40>)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd2:	607b      	str	r3, [r7, #4]

        // Write one 32-bit word
        SWD_Write_Word(addr, data);
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	68b8      	ldr	r0, [r7, #8]
 8001cd8:	f7ff ffba 	bl	8001c50 <SWD_Write_Word>
    for (uint32_t i = 0; i < firmware_size; ++i) {
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d3ea      	bcc.n	8001cc0 <SWD_Write_Firmware+0xc>
    }
}
 8001cea:	bf00      	nop
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	080089b0 	.word	0x080089b0

08001cf8 <SWD_Verify_Firmware>:


uint8_t SWD_Verify_Firmware(void) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
    for (uint32_t i = 0; i < firmware_size; i++) {
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	e02b      	b.n	8001d5c <SWD_Verify_Firmware+0x64>
        uint32_t addr = 0x08000000 + (i * 4);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	60bb      	str	r3, [r7, #8]
        uint32_t value = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]

        SWD_Write_TAR(addr);
 8001d12:	68b8      	ldr	r0, [r7, #8]
 8001d14:	f7ff fea0 	bl	8001a58 <SWD_Write_TAR>
        if (!SWD_Read_DRW(&value)) {
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fef8 	bl	8001b10 <SWD_Read_DRW>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d105      	bne.n	8001d32 <SWD_Verify_Firmware+0x3a>
            printf("SWD read error at 0x%08lX\n", addr);
 8001d26:	68b9      	ldr	r1, [r7, #8]
 8001d28:	4812      	ldr	r0, [pc, #72]	@ (8001d74 <SWD_Verify_Firmware+0x7c>)
 8001d2a:	f005 fed1 	bl	8007ad0 <iprintf>
            return 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e01c      	b.n	8001d6c <SWD_Verify_Firmware+0x74>
        }

        if (value != firmware_bin[i]) {
 8001d32:	4a11      	ldr	r2, [pc, #68]	@ (8001d78 <SWD_Verify_Firmware+0x80>)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d00a      	beq.n	8001d56 <SWD_Verify_Firmware+0x5e>
            printf("Mismatch at 0x%08lX: expected 0x%08lX, got 0x%08lX\n",addr, firmware_bin[i], value);
 8001d40:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <SWD_Verify_Firmware+0x80>)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68b9      	ldr	r1, [r7, #8]
 8001d4c:	480b      	ldr	r0, [pc, #44]	@ (8001d7c <SWD_Verify_Firmware+0x84>)
 8001d4e:	f005 febf 	bl	8007ad0 <iprintf>
            return 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e00a      	b.n	8001d6c <SWD_Verify_Firmware+0x74>
    for (uint32_t i = 0; i < firmware_size; i++) {
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d3cf      	bcc.n	8001d04 <SWD_Verify_Firmware+0xc>
        }
    }

    printf("[SWD] Firmware verification passed.\n");
 8001d64:	4806      	ldr	r0, [pc, #24]	@ (8001d80 <SWD_Verify_Firmware+0x88>)
 8001d66:	f005 ff1b 	bl	8007ba0 <puts>
    return 1;
 8001d6a:	2301      	movs	r3, #1
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	08008900 	.word	0x08008900
 8001d78:	080089b0 	.word	0x080089b0
 8001d7c:	0800891c 	.word	0x0800891c
 8001d80:	08008950 	.word	0x08008950

08001d84 <SWD_Lock_Flash>:

/**
 * @brief  Lock the EFM32 flash MSC to prevent further write or erase operations.
 * @note   Should be called after all programming and verification are complete.
 */
void SWD_Lock_Flash(void) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
    // 1) Select the MSC_LOCK register in the target’s MSC block
    SWD_Write_TAR(MSC_LOCK);
 8001d88:	4803      	ldr	r0, [pc, #12]	@ (8001d98 <SWD_Lock_Flash+0x14>)
 8001d8a:	f7ff fe65 	bl	8001a58 <SWD_Write_TAR>
    // 2) Write the lock key to disable further flash programming
    SWD_Write_DRW(MSC_LOCK_LOCKKEY);
 8001d8e:	2001      	movs	r0, #1
 8001d90:	f7ff fe90 	bl	8001ab4 <SWD_Write_DRW>
}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	400e0020 	.word	0x400e0020

08001d9c <delay_short>:
/*
 * delay_short
 * Generates a short delay using a no-operation loop.
 * Used to synchronize SWCLK clock edges in SWD communication.
 */
void delay_short(void) {
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
    for (volatile int i = 0; i < 50; i++) __NOP();
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	e003      	b.n	8001db0 <delay_short+0x14>
 8001da8:	bf00      	nop
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3301      	adds	r3, #1
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b31      	cmp	r3, #49	@ 0x31
 8001db4:	ddf8      	ble.n	8001da8 <delay_short+0xc>
}
 8001db6:	bf00      	nop
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <SWD_Set_IO_Mode_Output>:
/*
 * SWD_Set_IO_Mode_Output
 * Configures the SWDIO pin as output.
 * Required when the host needs to send bits to the target (write phase).
 */
void SWD_Set_IO_Mode_Output(void) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = PIN_SWDIO;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de4:	2303      	movs	r3, #3
 8001de6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(PORT_SWD, &GPIO_InitStruct);
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	4619      	mov	r1, r3
 8001dec:	4803      	ldr	r0, [pc, #12]	@ (8001dfc <SWD_Set_IO_Mode_Output+0x38>)
 8001dee:	f000 fd13 	bl	8002818 <HAL_GPIO_Init>
}
 8001df2:	bf00      	nop
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40020400 	.word	0x40020400

08001e00 <SWD_Set_IO_Mode_Input>:
/*
 * SWD_Set_IO_Mode_Input
 * Configures the SWDIO pin as input.
 * Required when the host expects to receive ACK or data from the target (read phase).
 */
void SWD_Set_IO_Mode_Input(void) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e06:	1d3b      	adds	r3, r7, #4
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = PIN_SWDIO;
 8001e14:	2301      	movs	r3, #1
 8001e16:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PORT_SWD, &GPIO_InitStruct);
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	4619      	mov	r1, r3
 8001e24:	4803      	ldr	r0, [pc, #12]	@ (8001e34 <SWD_Set_IO_Mode_Input+0x34>)
 8001e26:	f000 fcf7 	bl	8002818 <HAL_GPIO_Init>
}
 8001e2a:	bf00      	nop
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40020400 	.word	0x40020400

08001e38 <SWD_GPIO_Init>:
/*
 * SWD_GPIO_Init
 * Initializes the required GPIO pins (SWDIO and SWCLK) for SWD communication.
 * Enables the GPIO clock and sets up SWCLK as output.
 */
void SWD_GPIO_Init(void) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <SWD_GPIO_Init+0x58>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	4a12      	ldr	r2, [pc, #72]	@ (8001e90 <SWD_GPIO_Init+0x58>)
 8001e48:	f043 0302 	orr.w	r3, r3, #2
 8001e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4e:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <SWD_GPIO_Init+0x58>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = PIN_SWCLK;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e74:	2303      	movs	r3, #3
 8001e76:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(PORT_SWD, &GPIO_InitStruct);
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4805      	ldr	r0, [pc, #20]	@ (8001e94 <SWD_GPIO_Init+0x5c>)
 8001e7e:	f000 fccb 	bl	8002818 <HAL_GPIO_Init>

    SWD_Set_IO_Mode_Output();
 8001e82:	f7ff ff9f 	bl	8001dc4 <SWD_Set_IO_Mode_Output>
}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020400 	.word	0x40020400

08001e98 <SWCLK_Cycle>:
/*
 * SWCLK_Cycle
 * Performs one cycle of the SWCLK line (high → low).
 * Used to clock data in/out on SWD interface.
 */
void SWCLK_Cycle(void) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PORT_SWD, PIN_SWCLK, GPIO_PIN_SET);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	2102      	movs	r1, #2
 8001ea0:	4806      	ldr	r0, [pc, #24]	@ (8001ebc <SWCLK_Cycle+0x24>)
 8001ea2:	f000 fe7d 	bl	8002ba0 <HAL_GPIO_WritePin>
    delay_short();
 8001ea6:	f7ff ff79 	bl	8001d9c <delay_short>
    HAL_GPIO_WritePin(PORT_SWD, PIN_SWCLK, GPIO_PIN_RESET);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2102      	movs	r1, #2
 8001eae:	4803      	ldr	r0, [pc, #12]	@ (8001ebc <SWCLK_Cycle+0x24>)
 8001eb0:	f000 fe76 	bl	8002ba0 <HAL_GPIO_WritePin>
    delay_short();
 8001eb4:	f7ff ff72 	bl	8001d9c <delay_short>
}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40020400 	.word	0x40020400

08001ec0 <SWD_LineReset>:
/*
 * SWD_LineReset
 * Clocks 60 SWCLK cycles with SWDIO held high.
 * Resets SWD line to a known state before sending any SWD transactions.
 */
void SWD_LineReset(void) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
    SWD_Set_IO_Mode_Output();
 8001ec6:	f7ff ff7d 	bl	8001dc4 <SWD_Set_IO_Mode_Output>
    HAL_GPIO_WritePin(PORT_SWD, PIN_SWDIO, GPIO_PIN_SET); // Hold SWDIO high
 8001eca:	2201      	movs	r2, #1
 8001ecc:	2101      	movs	r1, #1
 8001ece:	4809      	ldr	r0, [pc, #36]	@ (8001ef4 <SWD_LineReset+0x34>)
 8001ed0:	f000 fe66 	bl	8002ba0 <HAL_GPIO_WritePin>
    for (int i = 0; i < 60; i++) {
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	607b      	str	r3, [r7, #4]
 8001ed8:	e004      	b.n	8001ee4 <SWD_LineReset+0x24>
        SWCLK_Cycle();
 8001eda:	f7ff ffdd 	bl	8001e98 <SWCLK_Cycle>
    for (int i = 0; i < 60; i++) {
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b3b      	cmp	r3, #59	@ 0x3b
 8001ee8:	ddf7      	ble.n	8001eda <SWD_LineReset+0x1a>
    }
}
 8001eea:	bf00      	nop
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40020400 	.word	0x40020400

08001ef8 <SWD_Send_Request_WithRetry>:
 * Parameters:
 *   request – the 8-bit SWD request header
 * Returns:
 *   true if ACK == 0b001 (OK), false otherwise
 */
bool SWD_Send_Request_WithRetry(uint8_t request) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
    uint8_t ack = 0xFF;
 8001f02:	23ff      	movs	r3, #255	@ 0xff
 8001f04:	73fb      	strb	r3, [r7, #15]
    for (int retry = 0; retry < 3; retry++) {
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	e013      	b.n	8001f34 <SWD_Send_Request_WithRetry+0x3c>
        SWD_Set_IO_Mode_Output();
 8001f0c:	f7ff ff5a 	bl	8001dc4 <SWD_Set_IO_Mode_Output>
        SWD_Write_Byte(request);
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fc1e 	bl	8001754 <SWD_Write_Byte>
        SWD_Set_IO_Mode_Input();
 8001f18:	f7ff ff72 	bl	8001e00 <SWD_Set_IO_Mode_Input>
        ack = SWD_Read_Byte();
 8001f1c:	f7ff fc38 	bl	8001790 <SWD_Read_Byte>
 8001f20:	4603      	mov	r3, r0
 8001f22:	73fb      	strb	r3, [r7, #15]
        if (ack == 0b001) return true;
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <SWD_Send_Request_WithRetry+0x36>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e00c      	b.n	8001f48 <SWD_Send_Request_WithRetry+0x50>
    for (int retry = 0; retry < 3; retry++) {
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	3301      	adds	r3, #1
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	dde8      	ble.n	8001f0c <SWD_Send_Request_WithRetry+0x14>
    }
    printf("SWD request 0x%02X failed: ACK = 0x%02X after 3 attempts\n", request, ack);
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	7bfa      	ldrb	r2, [r7, #15]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4803      	ldr	r0, [pc, #12]	@ (8001f50 <SWD_Send_Request_WithRetry+0x58>)
 8001f42:	f005 fdc5 	bl	8007ad0 <iprintf>
    return false;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	08008974 	.word	0x08008974

08001f54 <SWD_Build_Header>:
/*
 * SWD_Build_Header
 * Builds an 8-bit SWD request header for DP/AP read/write transactions.
 * Combines START, AP/DP, RnW, register address bits, parity, and PARK.
 */
uint8_t SWD_Build_Header(uint8_t apndp, uint8_t rnw, uint8_t reg) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	71bb      	strb	r3, [r7, #6]
 8001f62:	4613      	mov	r3, r2
 8001f64:	717b      	strb	r3, [r7, #5]
    uint8_t header = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	73fb      	strb	r3, [r7, #15]
    // Start bit
    header |= START;
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	73fb      	strb	r3, [r7, #15]
    // APnDP and RnW bits
    header |= apndp;
 8001f72:	7bfa      	ldrb	r2, [r7, #15]
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	73fb      	strb	r3, [r7, #15]
    header |= rnw;
 8001f7a:	7bfa      	ldrb	r2, [r7, #15]
 8001f7c:	79bb      	ldrb	r3, [r7, #6]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	73fb      	strb	r3, [r7, #15]
    header |= reg;
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	797b      	ldrb	r3, [r7, #5]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	73fb      	strb	r3, [r7, #15]
    // Parity over bits APnDP, RnW, A2, A3
    header |= __builtin_parity(header>>1)<<5;
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	085b      	lsrs	r3, r3, #1
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe f995 	bl	80002c0 <__paritysi2>
 8001f96:	4603      	mov	r3, r0
 8001f98:	b25b      	sxtb	r3, r3
 8001f9a:	015b      	lsls	r3, r3, #5
 8001f9c:	b25a      	sxtb	r2, r3
 8001f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	b25b      	sxtb	r3, r3
 8001fa6:	73fb      	strb	r3, [r7, #15]
    // Stop bit always 0, Park bit set
    header |= PARK;
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001fae:	73fb      	strb	r3, [r7, #15]
    return header;
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	e00a      	b.n	8001fe2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fcc:	f3af 8000 	nop.w
 8001fd0:	4601      	mov	r1, r0
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	60ba      	str	r2, [r7, #8]
 8001fd8:	b2ca      	uxtb	r2, r1
 8001fda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	dbf0      	blt.n	8001fcc <_read+0x12>
  }

  return len;
 8001fea:	687b      	ldr	r3, [r7, #4]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	e009      	b.n	800201a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	60ba      	str	r2, [r7, #8]
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	3301      	adds	r3, #1
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	429a      	cmp	r2, r3
 8002020:	dbf1      	blt.n	8002006 <_write+0x12>
  }
  return len;
 8002022:	687b      	ldr	r3, [r7, #4]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <_close>:

int _close(int file)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002034:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002054:	605a      	str	r2, [r3, #4]
  return 0;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <_isatty>:

int _isatty(int file)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800206c:	2301      	movs	r3, #1
}
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800207a:	b480      	push	{r7}
 800207c:	b085      	sub	sp, #20
 800207e:	af00      	add	r7, sp, #0
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800209c:	4a14      	ldr	r2, [pc, #80]	@ (80020f0 <_sbrk+0x5c>)
 800209e:	4b15      	ldr	r3, [pc, #84]	@ (80020f4 <_sbrk+0x60>)
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a8:	4b13      	ldr	r3, [pc, #76]	@ (80020f8 <_sbrk+0x64>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b0:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <_sbrk+0x64>)
 80020b2:	4a12      	ldr	r2, [pc, #72]	@ (80020fc <_sbrk+0x68>)
 80020b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020b6:	4b10      	ldr	r3, [pc, #64]	@ (80020f8 <_sbrk+0x64>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d207      	bcs.n	80020d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c4:	f005 fe9a 	bl	8007dfc <__errno>
 80020c8:	4603      	mov	r3, r0
 80020ca:	220c      	movs	r2, #12
 80020cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295
 80020d2:	e009      	b.n	80020e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d4:	4b08      	ldr	r3, [pc, #32]	@ (80020f8 <_sbrk+0x64>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020da:	4b07      	ldr	r3, [pc, #28]	@ (80020f8 <_sbrk+0x64>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	4a05      	ldr	r2, [pc, #20]	@ (80020f8 <_sbrk+0x64>)
 80020e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020e6:	68fb      	ldr	r3, [r7, #12]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20030000 	.word	0x20030000
 80020f4:	00000400 	.word	0x00000400
 80020f8:	20000710 	.word	0x20000710
 80020fc:	20000868 	.word	0x20000868

08002100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002104:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <SystemInit+0x20>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210a:	4a05      	ldr	r2, [pc, #20]	@ (8002120 <SystemInit+0x20>)
 800210c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002110:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002124:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800215c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002128:	f7ff ffea 	bl	8002100 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800212c:	480c      	ldr	r0, [pc, #48]	@ (8002160 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800212e:	490d      	ldr	r1, [pc, #52]	@ (8002164 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002130:	4a0d      	ldr	r2, [pc, #52]	@ (8002168 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002134:	e002      	b.n	800213c <LoopCopyDataInit>

08002136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800213a:	3304      	adds	r3, #4

0800213c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800213c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800213e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002140:	d3f9      	bcc.n	8002136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002142:	4a0a      	ldr	r2, [pc, #40]	@ (800216c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002144:	4c0a      	ldr	r4, [pc, #40]	@ (8002170 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002148:	e001      	b.n	800214e <LoopFillZerobss>

0800214a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800214a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800214c:	3204      	adds	r2, #4

0800214e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800214e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002150:	d3fb      	bcc.n	800214a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002152:	f005 fe59 	bl	8007e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002156:	f7fe fa41 	bl	80005dc <main>
  bx  lr    
 800215a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800215c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002164:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002168:	08008a1c 	.word	0x08008a1c
  ldr r2, =_sbss
 800216c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002170:	20000864 	.word	0x20000864

08002174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002174:	e7fe      	b.n	8002174 <ADC_IRQHandler>
	...

08002178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800217c:	4b0e      	ldr	r3, [pc, #56]	@ (80021b8 <HAL_Init+0x40>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0d      	ldr	r2, [pc, #52]	@ (80021b8 <HAL_Init+0x40>)
 8002182:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002188:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <HAL_Init+0x40>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <HAL_Init+0x40>)
 800218e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002194:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <HAL_Init+0x40>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a07      	ldr	r2, [pc, #28]	@ (80021b8 <HAL_Init+0x40>)
 800219a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800219e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a0:	2003      	movs	r0, #3
 80021a2:	f000 f8fc 	bl	800239e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a6:	200f      	movs	r0, #15
 80021a8:	f7ff f9ca 	bl	8001540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ac:	f7fe fe10 	bl	8000dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023c00 	.word	0x40023c00

080021bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <HAL_IncTick+0x20>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <HAL_IncTick+0x24>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	4a04      	ldr	r2, [pc, #16]	@ (80021e0 <HAL_IncTick+0x24>)
 80021ce:	6013      	str	r3, [r2, #0]
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000008 	.word	0x20000008
 80021e0:	20000714 	.word	0x20000714

080021e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return uwTick;
 80021e8:	4b03      	ldr	r3, [pc, #12]	@ (80021f8 <HAL_GetTick+0x14>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000714 	.word	0x20000714

080021fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002204:	f7ff ffee 	bl	80021e4 <HAL_GetTick>
 8002208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002214:	d005      	beq.n	8002222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002216:	4b0a      	ldr	r3, [pc, #40]	@ (8002240 <HAL_Delay+0x44>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002222:	bf00      	nop
 8002224:	f7ff ffde 	bl	80021e4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	429a      	cmp	r2, r3
 8002232:	d8f7      	bhi.n	8002224 <HAL_Delay+0x28>
  {
  }
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000008 	.word	0x20000008

08002244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002254:	4b0c      	ldr	r3, [pc, #48]	@ (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002260:	4013      	ands	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800226c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002276:	4a04      	ldr	r2, [pc, #16]	@ (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	60d3      	str	r3, [r2, #12]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002290:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	f003 0307 	and.w	r3, r3, #7
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	db0b      	blt.n	80022d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	f003 021f 	and.w	r2, r3, #31
 80022c0:	4907      	ldr	r1, [pc, #28]	@ (80022e0 <__NVIC_EnableIRQ+0x38>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	2001      	movs	r0, #1
 80022ca:	fa00 f202 	lsl.w	r2, r0, r2
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000e100 	.word	0xe000e100

080022e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	db0a      	blt.n	800230e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	490c      	ldr	r1, [pc, #48]	@ (8002330 <__NVIC_SetPriority+0x4c>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	0112      	lsls	r2, r2, #4
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	440b      	add	r3, r1
 8002308:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800230c:	e00a      	b.n	8002324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4908      	ldr	r1, [pc, #32]	@ (8002334 <__NVIC_SetPriority+0x50>)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	3b04      	subs	r3, #4
 800231c:	0112      	lsls	r2, r2, #4
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	440b      	add	r3, r1
 8002322:	761a      	strb	r2, [r3, #24]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000e100 	.word	0xe000e100
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	@ 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f1c3 0307 	rsb	r3, r3, #7
 8002352:	2b04      	cmp	r3, #4
 8002354:	bf28      	it	cs
 8002356:	2304      	movcs	r3, #4
 8002358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3304      	adds	r3, #4
 800235e:	2b06      	cmp	r3, #6
 8002360:	d902      	bls.n	8002368 <NVIC_EncodePriority+0x30>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3b03      	subs	r3, #3
 8002366:	e000      	b.n	800236a <NVIC_EncodePriority+0x32>
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	f04f 32ff 	mov.w	r2, #4294967295
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	401a      	ands	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002380:	f04f 31ff 	mov.w	r1, #4294967295
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	43d9      	mvns	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	4313      	orrs	r3, r2
         );
}
 8002392:	4618      	mov	r0, r3
 8002394:	3724      	adds	r7, #36	@ 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ff4c 	bl	8002244 <__NVIC_SetPriorityGrouping>
}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c6:	f7ff ff61 	bl	800228c <__NVIC_GetPriorityGrouping>
 80023ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	68b9      	ldr	r1, [r7, #8]
 80023d0:	6978      	ldr	r0, [r7, #20]
 80023d2:	f7ff ffb1 	bl	8002338 <NVIC_EncodePriority>
 80023d6:	4602      	mov	r2, r0
 80023d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023dc:	4611      	mov	r1, r2
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ff80 	bl	80022e4 <__NVIC_SetPriority>
}
 80023e4:	bf00      	nop
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff54 	bl	80022a8 <__NVIC_EnableIRQ>
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e00e      	b.n	8002438 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	795b      	ldrb	r3, [r3, #5]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d105      	bne.n	8002430 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7fe fcf8 	bl	8000e20 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e03b      	b.n	80024ca <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe fcfc 	bl	8000e64 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002490:	f023 0107 	bic.w	r1, r3, #7
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80024aa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68d1      	ldr	r1, [r2, #12]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6812      	ldr	r2, [r2, #0]
 80024b6:	430b      	orrs	r3, r1
 80024b8:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d026      	beq.n	8002542 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d021      	beq.n	8002542 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800250c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002512:	f043 0201 	orr.w	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2201      	movs	r2, #1
 8002520:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2204      	movs	r2, #4
 8002526:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	2b00      	cmp	r3, #0
 800254a:	d026      	beq.n	800259a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d021      	beq.n	800259a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002564:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2220      	movs	r2, #32
 800256c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002572:	f043 0202 	orr.w	r2, r3, #2
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2204      	movs	r2, #4
 800257e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d026      	beq.n	80025f2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d021      	beq.n	80025f2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025bc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2208      	movs	r2, #8
 80025c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ca:	f043 0204 	orr.w	r2, r3, #4
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2204      	movs	r2, #4
 80025d6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d013      	beq.n	8002624 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00e      	beq.n	8002624 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002614:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2204      	movs	r2, #4
 800261c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f853 	bl	80026ca <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d024      	beq.n	8002678 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01f      	beq.n	8002678 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002646:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2202      	movs	r2, #2
 800264e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b00      	cmp	r3, #0
 8002680:	d01f      	beq.n	80026c2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d01a      	beq.n	80026c2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800269a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2210      	movs	r2, #16
 80026a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f80e 	bl	80026de <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_DMA2D_ConfigLayer+0x20>
 8002710:	2302      	movs	r3, #2
 8002712:	e079      	b.n	8002808 <HAL_DMA2D_ConfigLayer+0x114>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	3318      	adds	r3, #24
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	041b      	lsls	r3, r3, #16
 800273a:	4313      	orrs	r3, r2
 800273c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800273e:	4b35      	ldr	r3, [pc, #212]	@ (8002814 <HAL_DMA2D_ConfigLayer+0x120>)
 8002740:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b0a      	cmp	r3, #10
 8002748:	d003      	beq.n	8002752 <HAL_DMA2D_ConfigLayer+0x5e>
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b09      	cmp	r3, #9
 8002750:	d107      	bne.n	8002762 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	4313      	orrs	r3, r2
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	e005      	b.n	800276e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	061b      	lsls	r3, r3, #24
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	4313      	orrs	r3, r2
 800276c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d120      	bne.n	80027b6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	43db      	mvns	r3, r3
 800277e:	ea02 0103 	and.w	r1, r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	430a      	orrs	r2, r1
 800278a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b0a      	cmp	r3, #10
 800279c:	d003      	beq.n	80027a6 <HAL_DMA2D_ConfigLayer+0xb2>
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b09      	cmp	r3, #9
 80027a4:	d127      	bne.n	80027f6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80027b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80027b4:	e01f      	b.n	80027f6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	69da      	ldr	r2, [r3, #28]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	43db      	mvns	r3, r3
 80027c0:	ea02 0103 	and.w	r1, r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b0a      	cmp	r3, #10
 80027de:	d003      	beq.n	80027e8 <HAL_DMA2D_ConfigLayer+0xf4>
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b09      	cmp	r3, #9
 80027e6:	d106      	bne.n	80027f6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80027f4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	371c      	adds	r7, #28
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	ff03000f 	.word	0xff03000f

08002818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	@ 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
 8002832:	e177      	b.n	8002b24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002834:	2201      	movs	r2, #1
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	429a      	cmp	r2, r3
 800284e:	f040 8166 	bne.w	8002b1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	2b01      	cmp	r3, #1
 800285c:	d005      	beq.n	800286a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002866:	2b02      	cmp	r3, #2
 8002868:	d130      	bne.n	80028cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	2203      	movs	r2, #3
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a0:	2201      	movs	r2, #1
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	091b      	lsrs	r3, r3, #4
 80028b6:	f003 0201 	and.w	r2, r3, #1
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d017      	beq.n	8002908 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	2203      	movs	r2, #3
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d123      	bne.n	800295c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	08da      	lsrs	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3208      	adds	r2, #8
 800291c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	220f      	movs	r2, #15
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	08da      	lsrs	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3208      	adds	r2, #8
 8002956:	69b9      	ldr	r1, [r7, #24]
 8002958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0203 	and.w	r2, r3, #3
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80c0 	beq.w	8002b1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	4b66      	ldr	r3, [pc, #408]	@ (8002b3c <HAL_GPIO_Init+0x324>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a6:	4a65      	ldr	r2, [pc, #404]	@ (8002b3c <HAL_GPIO_Init+0x324>)
 80029a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ae:	4b63      	ldr	r3, [pc, #396]	@ (8002b3c <HAL_GPIO_Init+0x324>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ba:	4a61      	ldr	r2, [pc, #388]	@ (8002b40 <HAL_GPIO_Init+0x328>)
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	089b      	lsrs	r3, r3, #2
 80029c0:	3302      	adds	r3, #2
 80029c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	220f      	movs	r2, #15
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a58      	ldr	r2, [pc, #352]	@ (8002b44 <HAL_GPIO_Init+0x32c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d037      	beq.n	8002a56 <HAL_GPIO_Init+0x23e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a57      	ldr	r2, [pc, #348]	@ (8002b48 <HAL_GPIO_Init+0x330>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d031      	beq.n	8002a52 <HAL_GPIO_Init+0x23a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a56      	ldr	r2, [pc, #344]	@ (8002b4c <HAL_GPIO_Init+0x334>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d02b      	beq.n	8002a4e <HAL_GPIO_Init+0x236>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a55      	ldr	r2, [pc, #340]	@ (8002b50 <HAL_GPIO_Init+0x338>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d025      	beq.n	8002a4a <HAL_GPIO_Init+0x232>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a54      	ldr	r2, [pc, #336]	@ (8002b54 <HAL_GPIO_Init+0x33c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d01f      	beq.n	8002a46 <HAL_GPIO_Init+0x22e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a53      	ldr	r2, [pc, #332]	@ (8002b58 <HAL_GPIO_Init+0x340>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d019      	beq.n	8002a42 <HAL_GPIO_Init+0x22a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a52      	ldr	r2, [pc, #328]	@ (8002b5c <HAL_GPIO_Init+0x344>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <HAL_GPIO_Init+0x226>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a51      	ldr	r2, [pc, #324]	@ (8002b60 <HAL_GPIO_Init+0x348>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00d      	beq.n	8002a3a <HAL_GPIO_Init+0x222>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a50      	ldr	r2, [pc, #320]	@ (8002b64 <HAL_GPIO_Init+0x34c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d007      	beq.n	8002a36 <HAL_GPIO_Init+0x21e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a4f      	ldr	r2, [pc, #316]	@ (8002b68 <HAL_GPIO_Init+0x350>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_GPIO_Init+0x21a>
 8002a2e:	2309      	movs	r3, #9
 8002a30:	e012      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a32:	230a      	movs	r3, #10
 8002a34:	e010      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a36:	2308      	movs	r3, #8
 8002a38:	e00e      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	e00c      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a3e:	2306      	movs	r3, #6
 8002a40:	e00a      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a42:	2305      	movs	r3, #5
 8002a44:	e008      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a46:	2304      	movs	r3, #4
 8002a48:	e006      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e004      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e002      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <HAL_GPIO_Init+0x240>
 8002a56:	2300      	movs	r3, #0
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	f002 0203 	and.w	r2, r2, #3
 8002a5e:	0092      	lsls	r2, r2, #2
 8002a60:	4093      	lsls	r3, r2
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a68:	4935      	ldr	r1, [pc, #212]	@ (8002b40 <HAL_GPIO_Init+0x328>)
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	089b      	lsrs	r3, r3, #2
 8002a6e:	3302      	adds	r3, #2
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a76:	4b3d      	ldr	r3, [pc, #244]	@ (8002b6c <HAL_GPIO_Init+0x354>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a9a:	4a34      	ldr	r2, [pc, #208]	@ (8002b6c <HAL_GPIO_Init+0x354>)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aa0:	4b32      	ldr	r3, [pc, #200]	@ (8002b6c <HAL_GPIO_Init+0x354>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ac4:	4a29      	ldr	r2, [pc, #164]	@ (8002b6c <HAL_GPIO_Init+0x354>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aca:	4b28      	ldr	r3, [pc, #160]	@ (8002b6c <HAL_GPIO_Init+0x354>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aee:	4a1f      	ldr	r2, [pc, #124]	@ (8002b6c <HAL_GPIO_Init+0x354>)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002af4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b6c <HAL_GPIO_Init+0x354>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b18:	4a14      	ldr	r2, [pc, #80]	@ (8002b6c <HAL_GPIO_Init+0x354>)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3301      	adds	r3, #1
 8002b22:	61fb      	str	r3, [r7, #28]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2b0f      	cmp	r3, #15
 8002b28:	f67f ae84 	bls.w	8002834 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	3724      	adds	r7, #36	@ 0x24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40013800 	.word	0x40013800
 8002b44:	40020000 	.word	0x40020000
 8002b48:	40020400 	.word	0x40020400
 8002b4c:	40020800 	.word	0x40020800
 8002b50:	40020c00 	.word	0x40020c00
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40021400 	.word	0x40021400
 8002b5c:	40021800 	.word	0x40021800
 8002b60:	40021c00 	.word	0x40021c00
 8002b64:	40022000 	.word	0x40022000
 8002b68:	40022400 	.word	0x40022400
 8002b6c:	40013c00 	.word	0x40013c00

08002b70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	887b      	ldrh	r3, [r7, #2]
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
 8002b8c:	e001      	b.n	8002b92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	807b      	strh	r3, [r7, #2]
 8002bac:	4613      	mov	r3, r2
 8002bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bb0:	787b      	ldrb	r3, [r7, #1]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bb6:	887a      	ldrh	r2, [r7, #2]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bbc:	e003      	b.n	8002bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bbe:	887b      	ldrh	r3, [r7, #2]
 8002bc0:	041a      	lsls	r2, r3, #16
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	619a      	str	r2, [r3, #24]
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b086      	sub	sp, #24
 8002bd6:	af02      	add	r7, sp, #8
 8002bd8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e059      	b.n	8002c98 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fe fba4 	bl	800134c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2203      	movs	r2, #3
 8002c08:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c12:	d102      	bne.n	8002c1a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f004 fada 	bl	80071d8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	7c1a      	ldrb	r2, [r3, #16]
 8002c2c:	f88d 2000 	strb.w	r2, [sp]
 8002c30:	3304      	adds	r3, #4
 8002c32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c34:	f004 fa6c 	bl	8007110 <USB_CoreInit>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2202      	movs	r2, #2
 8002c42:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e026      	b.n	8002c98 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2101      	movs	r1, #1
 8002c50:	4618      	mov	r0, r3
 8002c52:	f004 fad2 	bl	80071fa <USB_SetCurrentMode>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e017      	b.n	8002c98 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	7c1a      	ldrb	r2, [r3, #16]
 8002c70:	f88d 2000 	strb.w	r2, [sp]
 8002c74:	3304      	adds	r3, #4
 8002c76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c78:	f004 fc36 	bl	80074e8 <USB_HostInit>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2202      	movs	r2, #2
 8002c86:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e004      	b.n	8002c98 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f004 fbd7 	bl	800746a <USB_GetMode>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	f040 80fb 	bne.w	8002eba <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f004 fb9a 	bl	8007402 <USB_ReadInterrupts>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80f1 	beq.w	8002eb8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f004 fb91 	bl	8007402 <USB_ReadInterrupts>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ce6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cea:	d104      	bne.n	8002cf6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002cf4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f004 fb81 	bl	8007402 <USB_ReadInterrupts>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d0a:	d104      	bne.n	8002d16 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002d14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f004 fb71 	bl	8007402 <USB_ReadInterrupts>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d2a:	d104      	bne.n	8002d36 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002d34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f004 fb61 	bl	8007402 <USB_ReadInterrupts>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d103      	bne.n	8002d52 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f004 fb53 	bl	8007402 <USB_ReadInterrupts>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d66:	d120      	bne.n	8002daa <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002d70:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d113      	bne.n	8002daa <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002d82:	2110      	movs	r1, #16
 8002d84:	6938      	ldr	r0, [r7, #16]
 8002d86:	f004 fa84 	bl	8007292 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002d8a:	6938      	ldr	r0, [r7, #16]
 8002d8c:	f004 fab3 	bl	80072f6 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	7a5b      	ldrb	r3, [r3, #9]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d105      	bne.n	8002da4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f004 fc66 	bl	8007670 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f89f 	bl	8002ee8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f004 fb27 	bl	8007402 <USB_ReadInterrupts>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dbe:	d102      	bne.n	8002dc6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f001 fcc4 	bl	800474e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f004 fb19 	bl	8007402 <USB_ReadInterrupts>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d106      	bne.n	8002de8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f870 	bl	8002ec0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2208      	movs	r2, #8
 8002de6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f004 fb08 	bl	8007402 <USB_ReadInterrupts>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002dfc:	d139      	bne.n	8002e72 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f004 fc71 	bl	80076ea <USB_HC_ReadInterrupt>
 8002e08:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	e025      	b.n	8002e5c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d018      	beq.n	8002e56 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e3a:	d106      	bne.n	8002e4a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	4619      	mov	r1, r3
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f87c 	bl	8002f40 <HCD_HC_IN_IRQHandler>
 8002e48:	e005      	b.n	8002e56 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	4619      	mov	r1, r3
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fede 	bl	8003c12 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	795b      	ldrb	r3, [r3, #5]
 8002e60:	461a      	mov	r2, r3
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d3d3      	bcc.n	8002e10 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f004 fac3 	bl	8007402 <USB_ReadInterrupts>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	2b10      	cmp	r3, #16
 8002e84:	d101      	bne.n	8002e8a <HAL_HCD_IRQHandler+0x1ea>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_HCD_IRQHandler+0x1ec>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d014      	beq.n	8002eba <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0210 	bic.w	r2, r2, #16
 8002e9e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f001 fb75 	bl	8004590 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699a      	ldr	r2, [r3, #24]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0210 	orr.w	r2, r2, #16
 8002eb4:	619a      	str	r2, [r3, #24]
 8002eb6:	e000      	b.n	8002eba <HAL_HCD_IRQHandler+0x21a>
      return;
 8002eb8:	bf00      	nop
    }
  }
}
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	70fb      	strb	r3, [r7, #3]
 8002f30:	4613      	mov	r3, r2
 8002f32:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f004 fa62 	bl	8007428 <USB_ReadChInterrupts>
 8002f64:	4603      	mov	r3, r0
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d11a      	bne.n	8002fa4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	015a      	lsls	r2, r3, #5
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	334d      	adds	r3, #77	@ 0x4d
 8002f90:	2207      	movs	r2, #7
 8002f92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f004 fbb5 	bl	800770c <USB_HC_Halt>
 8002fa2:	e09e      	b.n	80030e2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	78fa      	ldrb	r2, [r7, #3]
 8002faa:	4611      	mov	r1, r2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f004 fa3b 	bl	8007428 <USB_ReadChInterrupts>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fbc:	d11b      	bne.n	8002ff6 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fd0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	334d      	adds	r3, #77	@ 0x4d
 8002fe2:	2208      	movs	r2, #8
 8002fe4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	4611      	mov	r1, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f004 fb8c 	bl	800770c <USB_HC_Halt>
 8002ff4:	e075      	b.n	80030e2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f004 fa12 	bl	8007428 <USB_ReadChInterrupts>
 8003004:	4603      	mov	r3, r0
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b08      	cmp	r3, #8
 800300c:	d11a      	bne.n	8003044 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4413      	add	r3, r2
 8003016:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800301a:	461a      	mov	r2, r3
 800301c:	2308      	movs	r3, #8
 800301e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	334d      	adds	r3, #77	@ 0x4d
 8003030:	2206      	movs	r2, #6
 8003032:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	78fa      	ldrb	r2, [r7, #3]
 800303a:	4611      	mov	r1, r2
 800303c:	4618      	mov	r0, r3
 800303e:	f004 fb65 	bl	800770c <USB_HC_Halt>
 8003042:	e04e      	b.n	80030e2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	78fa      	ldrb	r2, [r7, #3]
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f004 f9eb 	bl	8007428 <USB_ReadChInterrupts>
 8003052:	4603      	mov	r3, r0
 8003054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003058:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800305c:	d11b      	bne.n	8003096 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4413      	add	r3, r2
 8003066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800306a:	461a      	mov	r2, r3
 800306c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003070:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	334d      	adds	r3, #77	@ 0x4d
 8003082:	2209      	movs	r2, #9
 8003084:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	78fa      	ldrb	r2, [r7, #3]
 800308c:	4611      	mov	r1, r2
 800308e:	4618      	mov	r0, r3
 8003090:	f004 fb3c 	bl	800770c <USB_HC_Halt>
 8003094:	e025      	b.n	80030e2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	4611      	mov	r1, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f004 f9c2 	bl	8007428 <USB_ReadChInterrupts>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030aa:	2b80      	cmp	r3, #128	@ 0x80
 80030ac:	d119      	bne.n	80030e2 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80030ae:	78fb      	ldrb	r3, [r7, #3]
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ba:	461a      	mov	r2, r3
 80030bc:	2380      	movs	r3, #128	@ 0x80
 80030be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	334d      	adds	r3, #77	@ 0x4d
 80030d0:	2207      	movs	r2, #7
 80030d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	78fa      	ldrb	r2, [r7, #3]
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f004 fb15 	bl	800770c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	4611      	mov	r1, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f004 f99c 	bl	8007428 <USB_ReadChInterrupts>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030fa:	d112      	bne.n	8003122 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	78fa      	ldrb	r2, [r7, #3]
 8003102:	4611      	mov	r1, r2
 8003104:	4618      	mov	r0, r3
 8003106:	f004 fb01 	bl	800770c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4413      	add	r3, r2
 8003112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003116:	461a      	mov	r2, r3
 8003118:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800311c:	6093      	str	r3, [r2, #8]
 800311e:	f000 bd75 	b.w	8003c0c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	4611      	mov	r1, r2
 800312a:	4618      	mov	r0, r3
 800312c:	f004 f97c 	bl	8007428 <USB_ReadChInterrupts>
 8003130:	4603      	mov	r3, r0
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b01      	cmp	r3, #1
 8003138:	f040 8128 	bne.w	800338c <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	4413      	add	r3, r2
 8003144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003148:	461a      	mov	r2, r3
 800314a:	2320      	movs	r3, #32
 800314c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	331b      	adds	r3, #27
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d119      	bne.n	8003198 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	331b      	adds	r3, #27
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4413      	add	r3, r2
 8003180:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	0151      	lsls	r1, r2, #5
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	440a      	add	r2, r1
 800318e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003196:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	799b      	ldrb	r3, [r3, #6]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d01b      	beq.n	80031d8 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	3330      	adds	r3, #48	@ 0x30
 80031b0:	6819      	ldr	r1, [r3, #0]
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	1ac9      	subs	r1, r1, r3
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4403      	add	r3, r0
 80031d4:	3338      	adds	r3, #56	@ 0x38
 80031d6:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	334d      	adds	r3, #77	@ 0x4d
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80031ec:	78fa      	ldrb	r2, [r7, #3]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	3344      	adds	r3, #68	@ 0x44
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4413      	add	r3, r2
 8003208:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800320c:	461a      	mov	r2, r3
 800320e:	2301      	movs	r3, #1
 8003210:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	3326      	adds	r3, #38	@ 0x26
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	3326      	adds	r3, #38	@ 0x26
 8003238:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800323a:	2b02      	cmp	r3, #2
 800323c:	d110      	bne.n	8003260 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	4611      	mov	r1, r2
 8003246:	4618      	mov	r0, r3
 8003248:	f004 fa60 	bl	800770c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4413      	add	r3, r2
 8003254:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003258:	461a      	mov	r2, r3
 800325a:	2310      	movs	r3, #16
 800325c:	6093      	str	r3, [r2, #8]
 800325e:	e03d      	b.n	80032dc <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003260:	78fa      	ldrb	r2, [r7, #3]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	3326      	adds	r3, #38	@ 0x26
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b03      	cmp	r3, #3
 8003274:	d00a      	beq.n	800328c <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	3326      	adds	r3, #38	@ 0x26
 8003286:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003288:	2b01      	cmp	r3, #1
 800328a:	d127      	bne.n	80032dc <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	4413      	add	r3, r2
 8003294:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	78fa      	ldrb	r2, [r7, #3]
 800329c:	0151      	lsls	r1, r2, #5
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	440a      	add	r2, r1
 80032a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032a6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80032aa:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	334c      	adds	r3, #76	@ 0x4c
 80032bc:	2201      	movs	r2, #1
 80032be:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	334c      	adds	r3, #76	@ 0x4c
 80032d0:	781a      	ldrb	r2, [r3, #0]
 80032d2:	78fb      	ldrb	r3, [r7, #3]
 80032d4:	4619      	mov	r1, r3
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff fe24 	bl	8002f24 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	799b      	ldrb	r3, [r3, #6]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d13b      	bne.n	800335c <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	3338      	adds	r3, #56	@ 0x38
 80032f4:	6819      	ldr	r1, [r3, #0]
 80032f6:	78fa      	ldrb	r2, [r7, #3]
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4403      	add	r3, r0
 8003304:	3328      	adds	r3, #40	@ 0x28
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	440b      	add	r3, r1
 800330a:	1e59      	subs	r1, r3, #1
 800330c:	78fa      	ldrb	r2, [r7, #3]
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4403      	add	r3, r0
 800331a:	3328      	adds	r3, #40	@ 0x28
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 8470 	beq.w	8003c0c <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	333c      	adds	r3, #60	@ 0x3c
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	f083 0301 	eor.w	r3, r3, #1
 8003344:	b2d8      	uxtb	r0, r3
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	333c      	adds	r3, #60	@ 0x3c
 8003354:	4602      	mov	r2, r0
 8003356:	701a      	strb	r2, [r3, #0]
 8003358:	f000 bc58 	b.w	8003c0c <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	333c      	adds	r3, #60	@ 0x3c
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	78fa      	ldrb	r2, [r7, #3]
 8003370:	f083 0301 	eor.w	r3, r3, #1
 8003374:	b2d8      	uxtb	r0, r3
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	333c      	adds	r3, #60	@ 0x3c
 8003384:	4602      	mov	r2, r0
 8003386:	701a      	strb	r2, [r3, #0]
 8003388:	f000 bc40 	b.w	8003c0c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	4611      	mov	r1, r2
 8003394:	4618      	mov	r0, r3
 8003396:	f004 f847 	bl	8007428 <USB_ReadChInterrupts>
 800339a:	4603      	mov	r3, r0
 800339c:	f003 0320 	and.w	r3, r3, #32
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	d131      	bne.n	8003408 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033b0:	461a      	mov	r2, r3
 80033b2:	2320      	movs	r3, #32
 80033b4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	331a      	adds	r3, #26
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	f040 841f 	bne.w	8003c0c <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	331b      	adds	r3, #27
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80033e2:	78fa      	ldrb	r2, [r7, #3]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	334d      	adds	r3, #77	@ 0x4d
 80033f2:	2203      	movs	r2, #3
 80033f4:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	4611      	mov	r1, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f004 f984 	bl	800770c <USB_HC_Halt>
 8003404:	f000 bc02 	b.w	8003c0c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	4611      	mov	r1, r2
 8003410:	4618      	mov	r0, r3
 8003412:	f004 f809 	bl	8007428 <USB_ReadChInterrupts>
 8003416:	4603      	mov	r3, r0
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b02      	cmp	r3, #2
 800341e:	f040 8305 	bne.w	8003a2c <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003422:	78fb      	ldrb	r3, [r7, #3]
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4413      	add	r3, r2
 800342a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800342e:	461a      	mov	r2, r3
 8003430:	2302      	movs	r3, #2
 8003432:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003434:	78fa      	ldrb	r2, [r7, #3]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	334d      	adds	r3, #77	@ 0x4d
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d114      	bne.n	8003474 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	334d      	adds	r3, #77	@ 0x4d
 800345a:	2202      	movs	r2, #2
 800345c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	334c      	adds	r3, #76	@ 0x4c
 800346e:	2201      	movs	r2, #1
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	e2cc      	b.n	8003a0e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	334d      	adds	r3, #77	@ 0x4d
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b06      	cmp	r3, #6
 8003488:	d114      	bne.n	80034b4 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800348a:	78fa      	ldrb	r2, [r7, #3]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	334d      	adds	r3, #77	@ 0x4d
 800349a:	2202      	movs	r2, #2
 800349c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	334c      	adds	r3, #76	@ 0x4c
 80034ae:	2205      	movs	r2, #5
 80034b0:	701a      	strb	r2, [r3, #0]
 80034b2:	e2ac      	b.n	8003a0e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80034b4:	78fa      	ldrb	r2, [r7, #3]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	334d      	adds	r3, #77	@ 0x4d
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b07      	cmp	r3, #7
 80034c8:	d00b      	beq.n	80034e2 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	334d      	adds	r3, #77	@ 0x4d
 80034da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80034dc:	2b09      	cmp	r3, #9
 80034de:	f040 80a6 	bne.w	800362e <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034e2:	78fa      	ldrb	r2, [r7, #3]
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	1a9b      	subs	r3, r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	440b      	add	r3, r1
 80034f0:	334d      	adds	r3, #77	@ 0x4d
 80034f2:	2202      	movs	r2, #2
 80034f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80034f6:	78fa      	ldrb	r2, [r7, #3]
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	1a9b      	subs	r3, r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	3344      	adds	r3, #68	@ 0x44
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	1c59      	adds	r1, r3, #1
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4403      	add	r3, r0
 8003516:	3344      	adds	r3, #68	@ 0x44
 8003518:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	3344      	adds	r3, #68	@ 0x44
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d943      	bls.n	80035b8 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	3344      	adds	r3, #68	@ 0x44
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	331a      	adds	r3, #26
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d123      	bne.n	80035a2 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800355a:	78fa      	ldrb	r2, [r7, #3]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	331b      	adds	r3, #27
 800356a:	2200      	movs	r2, #0
 800356c:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800356e:	78fa      	ldrb	r2, [r7, #3]
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	331c      	adds	r3, #28
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4413      	add	r3, r2
 800358a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	0151      	lsls	r1, r2, #5
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	440a      	add	r2, r1
 8003598:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800359c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035a0:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80035a2:	78fa      	ldrb	r2, [r7, #3]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	334c      	adds	r3, #76	@ 0x4c
 80035b2:	2204      	movs	r2, #4
 80035b4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035b6:	e229      	b.n	8003a0c <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	334c      	adds	r3, #76	@ 0x4c
 80035c8:	2202      	movs	r2, #2
 80035ca:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	3326      	adds	r3, #38	@ 0x26
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00b      	beq.n	80035fa <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	3326      	adds	r3, #38	@ 0x26
 80035f2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	f040 8209 	bne.w	8003a0c <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80035fa:	78fb      	ldrb	r3, [r7, #3]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4413      	add	r3, r2
 8003602:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003610:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003618:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800361a:	78fb      	ldrb	r3, [r7, #3]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4413      	add	r3, r2
 8003622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003626:	461a      	mov	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800362c:	e1ee      	b.n	8003a0c <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	334d      	adds	r3, #77	@ 0x4d
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b05      	cmp	r3, #5
 8003642:	f040 80c8 	bne.w	80037d6 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003646:	78fa      	ldrb	r2, [r7, #3]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	334d      	adds	r3, #77	@ 0x4d
 8003656:	2202      	movs	r2, #2
 8003658:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	331b      	adds	r3, #27
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b01      	cmp	r3, #1
 800366e:	f040 81ce 	bne.w	8003a0e <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003672:	78fa      	ldrb	r2, [r7, #3]
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	1a9b      	subs	r3, r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	3326      	adds	r3, #38	@ 0x26
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b03      	cmp	r3, #3
 8003686:	d16b      	bne.n	8003760 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003688:	78fa      	ldrb	r2, [r7, #3]
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	1a9b      	subs	r3, r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	3348      	adds	r3, #72	@ 0x48
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	1c59      	adds	r1, r3, #1
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4403      	add	r3, r0
 80036a8:	3348      	adds	r3, #72	@ 0x48
 80036aa:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80036ac:	78fa      	ldrb	r2, [r7, #3]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	3348      	adds	r3, #72	@ 0x48
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d943      	bls.n	800374a <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80036c2:	78fa      	ldrb	r2, [r7, #3]
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	3348      	adds	r3, #72	@ 0x48
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80036d6:	78fa      	ldrb	r2, [r7, #3]
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	1a9b      	subs	r3, r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	331b      	adds	r3, #27
 80036e6:	2200      	movs	r2, #0
 80036e8:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	3344      	adds	r3, #68	@ 0x44
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d809      	bhi.n	8003714 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	331c      	adds	r3, #28
 8003710:	2201      	movs	r2, #1
 8003712:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003714:	78fb      	ldrb	r3, [r7, #3]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4413      	add	r3, r2
 800371c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	78fa      	ldrb	r2, [r7, #3]
 8003724:	0151      	lsls	r1, r2, #5
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	440a      	add	r2, r1
 800372a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800372e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003732:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003734:	78fa      	ldrb	r2, [r7, #3]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	334c      	adds	r3, #76	@ 0x4c
 8003744:	2204      	movs	r2, #4
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	e014      	b.n	8003774 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800374a:	78fa      	ldrb	r2, [r7, #3]
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	334c      	adds	r3, #76	@ 0x4c
 800375a:	2202      	movs	r2, #2
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	e009      	b.n	8003774 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003760:	78fa      	ldrb	r2, [r7, #3]
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	334c      	adds	r3, #76	@ 0x4c
 8003770:	2202      	movs	r2, #2
 8003772:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003774:	78fa      	ldrb	r2, [r7, #3]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	3326      	adds	r3, #38	@ 0x26
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800378a:	78fa      	ldrb	r2, [r7, #3]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	3326      	adds	r3, #38	@ 0x26
 800379a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800379c:	2b02      	cmp	r3, #2
 800379e:	f040 8136 	bne.w	8003a0e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80037b8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80037c0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037ce:	461a      	mov	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	e11b      	b.n	8003a0e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	334d      	adds	r3, #77	@ 0x4d
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	f040 8081 	bne.w	80038f0 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037ee:	78fa      	ldrb	r2, [r7, #3]
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	334d      	adds	r3, #77	@ 0x4d
 80037fe:	2202      	movs	r2, #2
 8003800:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	331b      	adds	r3, #27
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b01      	cmp	r3, #1
 8003816:	f040 80fa 	bne.w	8003a0e <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800381a:	78fa      	ldrb	r2, [r7, #3]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	334c      	adds	r3, #76	@ 0x4c
 800382a:	2202      	movs	r2, #2
 800382c:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4413      	add	r3, r2
 8003836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	78fa      	ldrb	r2, [r7, #3]
 800383e:	0151      	lsls	r1, r2, #5
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	440a      	add	r2, r1
 8003844:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800384c:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800384e:	78fb      	ldrb	r3, [r7, #3]
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4413      	add	r3, r2
 8003856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	78fa      	ldrb	r2, [r7, #3]
 800385e:	0151      	lsls	r1, r2, #5
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	440a      	add	r2, r1
 8003864:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800386c:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4413      	add	r3, r2
 8003876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	78fa      	ldrb	r2, [r7, #3]
 800387e:	0151      	lsls	r1, r2, #5
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	440a      	add	r2, r1
 8003884:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003888:	f023 0320 	bic.w	r3, r3, #32
 800388c:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800388e:	78fa      	ldrb	r2, [r7, #3]
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	3326      	adds	r3, #38	@ 0x26
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00b      	beq.n	80038bc <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038a4:	78fa      	ldrb	r2, [r7, #3]
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	1a9b      	subs	r3, r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	3326      	adds	r3, #38	@ 0x26
 80038b4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	f040 80a9 	bne.w	8003a0e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80038d2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80038da:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038e8:	461a      	mov	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	e08e      	b.n	8003a0e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80038f0:	78fa      	ldrb	r2, [r7, #3]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	334d      	adds	r3, #77	@ 0x4d
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b04      	cmp	r3, #4
 8003904:	d143      	bne.n	800398e <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003906:	78fa      	ldrb	r2, [r7, #3]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	334d      	adds	r3, #77	@ 0x4d
 8003916:	2202      	movs	r2, #2
 8003918:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	334c      	adds	r3, #76	@ 0x4c
 800392a:	2202      	movs	r2, #2
 800392c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	3326      	adds	r3, #38	@ 0x26
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	1a9b      	subs	r3, r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	3326      	adds	r3, #38	@ 0x26
 8003954:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003956:	2b02      	cmp	r3, #2
 8003958:	d159      	bne.n	8003a0e <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4413      	add	r3, r2
 8003962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003970:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003978:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4413      	add	r3, r2
 8003982:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003986:	461a      	mov	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	e03f      	b.n	8003a0e <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800398e:	78fa      	ldrb	r2, [r7, #3]
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	334d      	adds	r3, #77	@ 0x4d
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d126      	bne.n	80039f2 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	334d      	adds	r3, #77	@ 0x4d
 80039b4:	2202      	movs	r2, #2
 80039b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	3344      	adds	r3, #68	@ 0x44
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	1c59      	adds	r1, r3, #1
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4403      	add	r3, r0
 80039d8:	3344      	adds	r3, #68	@ 0x44
 80039da:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80039dc:	78fa      	ldrb	r2, [r7, #3]
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	1a9b      	subs	r3, r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	440b      	add	r3, r1
 80039ea:	334c      	adds	r3, #76	@ 0x4c
 80039ec:	2204      	movs	r2, #4
 80039ee:	701a      	strb	r2, [r3, #0]
 80039f0:	e00d      	b.n	8003a0e <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80039f2:	78fa      	ldrb	r2, [r7, #3]
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	1a9b      	subs	r3, r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	334d      	adds	r3, #77	@ 0x4d
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	f000 8100 	beq.w	8003c0a <HCD_HC_IN_IRQHandler+0xcca>
 8003a0a:	e000      	b.n	8003a0e <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a0c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003a0e:	78fa      	ldrb	r2, [r7, #3]
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	1a9b      	subs	r3, r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	334c      	adds	r3, #76	@ 0x4c
 8003a1e:	781a      	ldrb	r2, [r3, #0]
 8003a20:	78fb      	ldrb	r3, [r7, #3]
 8003a22:	4619      	mov	r1, r3
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fa7d 	bl	8002f24 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a2a:	e0ef      	b.n	8003c0c <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	4611      	mov	r1, r2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f003 fcf7 	bl	8007428 <USB_ReadChInterrupts>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a40:	2b40      	cmp	r3, #64	@ 0x40
 8003a42:	d12f      	bne.n	8003aa4 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a50:	461a      	mov	r2, r3
 8003a52:	2340      	movs	r3, #64	@ 0x40
 8003a54:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003a56:	78fa      	ldrb	r2, [r7, #3]
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	334d      	adds	r3, #77	@ 0x4d
 8003a66:	2205      	movs	r2, #5
 8003a68:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	331a      	adds	r3, #26
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d109      	bne.n	8003a94 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a80:	78fa      	ldrb	r2, [r7, #3]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	3344      	adds	r3, #68	@ 0x44
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	78fa      	ldrb	r2, [r7, #3]
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f003 fe35 	bl	800770c <USB_HC_Halt>
 8003aa2:	e0b3      	b.n	8003c0c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	78fa      	ldrb	r2, [r7, #3]
 8003aaa:	4611      	mov	r1, r2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f003 fcbb 	bl	8007428 <USB_ReadChInterrupts>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f003 0310 	and.w	r3, r3, #16
 8003ab8:	2b10      	cmp	r3, #16
 8003aba:	f040 80a7 	bne.w	8003c0c <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003abe:	78fa      	ldrb	r2, [r7, #3]
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	1a9b      	subs	r3, r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	3326      	adds	r3, #38	@ 0x26
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d11b      	bne.n	8003b0c <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	3344      	adds	r3, #68	@ 0x44
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003ae8:	78fa      	ldrb	r2, [r7, #3]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	334d      	adds	r3, #77	@ 0x4d
 8003af8:	2204      	movs	r2, #4
 8003afa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	78fa      	ldrb	r2, [r7, #3]
 8003b02:	4611      	mov	r1, r2
 8003b04:	4618      	mov	r0, r3
 8003b06:	f003 fe01 	bl	800770c <USB_HC_Halt>
 8003b0a:	e03f      	b.n	8003b8c <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b0c:	78fa      	ldrb	r2, [r7, #3]
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	3326      	adds	r3, #38	@ 0x26
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003b22:	78fa      	ldrb	r2, [r7, #3]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	3326      	adds	r3, #38	@ 0x26
 8003b32:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d129      	bne.n	8003b8c <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	3344      	adds	r3, #68	@ 0x44
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	799b      	ldrb	r3, [r3, #6]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <HCD_HC_IN_IRQHandler+0xc2a>
 8003b54:	78fa      	ldrb	r2, [r7, #3]
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	1a9b      	subs	r3, r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	331b      	adds	r3, #27
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d110      	bne.n	8003b8c <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	1a9b      	subs	r3, r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	334d      	adds	r3, #77	@ 0x4d
 8003b7a:	2204      	movs	r2, #4
 8003b7c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	78fa      	ldrb	r2, [r7, #3]
 8003b84:	4611      	mov	r1, r2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f003 fdc0 	bl	800770c <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003b8c:	78fa      	ldrb	r2, [r7, #3]
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	1a9b      	subs	r3, r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	331b      	adds	r3, #27
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d129      	bne.n	8003bf6 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	331b      	adds	r3, #27
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003bb6:	78fb      	ldrb	r3, [r7, #3]
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	78fa      	ldrb	r2, [r7, #3]
 8003bc6:	0151      	lsls	r1, r2, #5
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	440a      	add	r2, r1
 8003bcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003bd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bd4:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	0151      	lsls	r1, r2, #5
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	440a      	add	r2, r1
 8003bec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003bf0:	f043 0320 	orr.w	r3, r3, #32
 8003bf4:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c02:	461a      	mov	r2, r3
 8003c04:	2310      	movs	r3, #16
 8003c06:	6093      	str	r3, [r2, #8]
 8003c08:	e000      	b.n	8003c0c <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003c0a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b086      	sub	sp, #24
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	4611      	mov	r1, r2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f003 fbf9 	bl	8007428 <USB_ReadChInterrupts>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d11b      	bne.n	8003c78 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003c40:	78fb      	ldrb	r3, [r7, #3]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	2304      	movs	r3, #4
 8003c50:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003c52:	78fa      	ldrb	r2, [r7, #3]
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	1a9b      	subs	r3, r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	334d      	adds	r3, #77	@ 0x4d
 8003c62:	2207      	movs	r2, #7
 8003c64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	78fa      	ldrb	r2, [r7, #3]
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f003 fd4c 	bl	800770c <USB_HC_Halt>
 8003c74:	f000 bc89 	b.w	800458a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	78fa      	ldrb	r2, [r7, #3]
 8003c7e:	4611      	mov	r1, r2
 8003c80:	4618      	mov	r0, r3
 8003c82:	f003 fbd1 	bl	8007428 <USB_ReadChInterrupts>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	f040 8082 	bne.w	8003d96 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	2320      	movs	r3, #32
 8003ca2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003ca4:	78fa      	ldrb	r2, [r7, #3]
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	3319      	adds	r3, #25
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d124      	bne.n	8003d04 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	1a9b      	subs	r3, r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	3319      	adds	r3, #25
 8003cca:	2200      	movs	r2, #0
 8003ccc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003cce:	78fa      	ldrb	r2, [r7, #3]
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	334c      	adds	r3, #76	@ 0x4c
 8003cde:	2202      	movs	r2, #2
 8003ce0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	334d      	adds	r3, #77	@ 0x4d
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f003 fd04 	bl	800770c <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	331a      	adds	r3, #26
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	f040 8437 	bne.w	800458a <HCD_HC_OUT_IRQHandler+0x978>
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	331b      	adds	r3, #27
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f040 842b 	bne.w	800458a <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003d34:	78fa      	ldrb	r2, [r7, #3]
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	1a9b      	subs	r3, r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	3326      	adds	r3, #38	@ 0x26
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d009      	beq.n	8003d5e <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003d4a:	78fa      	ldrb	r2, [r7, #3]
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	331b      	adds	r3, #27
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003d5e:	78fa      	ldrb	r2, [r7, #3]
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	4613      	mov	r3, r2
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	1a9b      	subs	r3, r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	334d      	adds	r3, #77	@ 0x4d
 8003d6e:	2203      	movs	r2, #3
 8003d70:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	78fa      	ldrb	r2, [r7, #3]
 8003d78:	4611      	mov	r1, r2
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f003 fcc6 	bl	800770c <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d80:	78fa      	ldrb	r2, [r7, #3]
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	4613      	mov	r3, r2
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	3344      	adds	r3, #68	@ 0x44
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	e3f9      	b.n	800458a <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	78fa      	ldrb	r2, [r7, #3]
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f003 fb42 	bl	8007428 <USB_ReadChInterrupts>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003daa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dae:	d111      	bne.n	8003dd4 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dc2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	4611      	mov	r1, r2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f003 fc9d 	bl	800770c <USB_HC_Halt>
 8003dd2:	e3da      	b.n	800458a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	78fa      	ldrb	r2, [r7, #3]
 8003dda:	4611      	mov	r1, r2
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f003 fb23 	bl	8007428 <USB_ReadChInterrupts>
 8003de2:	4603      	mov	r3, r0
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d168      	bne.n	8003ebe <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003dec:	78fa      	ldrb	r2, [r7, #3]
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	4613      	mov	r3, r2
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	1a9b      	subs	r3, r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	3344      	adds	r3, #68	@ 0x44
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	78fa      	ldrb	r2, [r7, #3]
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f003 fb0d 	bl	8007428 <USB_ReadChInterrupts>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e14:	2b40      	cmp	r3, #64	@ 0x40
 8003e16:	d112      	bne.n	8003e3e <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003e18:	78fa      	ldrb	r2, [r7, #3]
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	3319      	adds	r3, #25
 8003e28:	2201      	movs	r2, #1
 8003e2a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e38:	461a      	mov	r2, r3
 8003e3a:	2340      	movs	r3, #64	@ 0x40
 8003e3c:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003e3e:	78fa      	ldrb	r2, [r7, #3]
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	1a9b      	subs	r3, r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	331b      	adds	r3, #27
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d019      	beq.n	8003e88 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003e54:	78fa      	ldrb	r2, [r7, #3]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	331b      	adds	r3, #27
 8003e64:	2200      	movs	r2, #0
 8003e66:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	78fa      	ldrb	r2, [r7, #3]
 8003e78:	0151      	lsls	r1, r2, #5
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	440a      	add	r2, r1
 8003e7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e86:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e94:	461a      	mov	r2, r3
 8003e96:	2301      	movs	r3, #1
 8003e98:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003e9a:	78fa      	ldrb	r2, [r7, #3]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	334d      	adds	r3, #77	@ 0x4d
 8003eaa:	2201      	movs	r2, #1
 8003eac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	78fa      	ldrb	r2, [r7, #3]
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f003 fc28 	bl	800770c <USB_HC_Halt>
 8003ebc:	e365      	b.n	800458a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f003 faae 	bl	8007428 <USB_ReadChInterrupts>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed2:	2b40      	cmp	r3, #64	@ 0x40
 8003ed4:	d139      	bne.n	8003f4a <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003ed6:	78fa      	ldrb	r2, [r7, #3]
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	4613      	mov	r3, r2
 8003edc:	011b      	lsls	r3, r3, #4
 8003ede:	1a9b      	subs	r3, r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	334d      	adds	r3, #77	@ 0x4d
 8003ee6:	2205      	movs	r2, #5
 8003ee8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003eea:	78fa      	ldrb	r2, [r7, #3]
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	331a      	adds	r3, #26
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d109      	bne.n	8003f14 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003f00:	78fa      	ldrb	r2, [r7, #3]
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	1a9b      	subs	r3, r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	3319      	adds	r3, #25
 8003f10:	2201      	movs	r2, #1
 8003f12:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003f14:	78fa      	ldrb	r2, [r7, #3]
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	3344      	adds	r3, #68	@ 0x44
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	78fa      	ldrb	r2, [r7, #3]
 8003f2e:	4611      	mov	r1, r2
 8003f30:	4618      	mov	r0, r3
 8003f32:	f003 fbeb 	bl	800770c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003f36:	78fb      	ldrb	r3, [r7, #3]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f42:	461a      	mov	r2, r3
 8003f44:	2340      	movs	r3, #64	@ 0x40
 8003f46:	6093      	str	r3, [r2, #8]
 8003f48:	e31f      	b.n	800458a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	78fa      	ldrb	r2, [r7, #3]
 8003f50:	4611      	mov	r1, r2
 8003f52:	4618      	mov	r0, r3
 8003f54:	f003 fa68 	bl	8007428 <USB_ReadChInterrupts>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d11a      	bne.n	8003f98 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003f62:	78fb      	ldrb	r3, [r7, #3]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f6e:	461a      	mov	r2, r3
 8003f70:	2308      	movs	r3, #8
 8003f72:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003f74:	78fa      	ldrb	r2, [r7, #3]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	334d      	adds	r3, #77	@ 0x4d
 8003f84:	2206      	movs	r2, #6
 8003f86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	78fa      	ldrb	r2, [r7, #3]
 8003f8e:	4611      	mov	r1, r2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f003 fbbb 	bl	800770c <USB_HC_Halt>
 8003f96:	e2f8      	b.n	800458a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	78fa      	ldrb	r2, [r7, #3]
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f003 fa41 	bl	8007428 <USB_ReadChInterrupts>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f003 0310 	and.w	r3, r3, #16
 8003fac:	2b10      	cmp	r3, #16
 8003fae:	d144      	bne.n	800403a <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	3344      	adds	r3, #68	@ 0x44
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003fc4:	78fa      	ldrb	r2, [r7, #3]
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	334d      	adds	r3, #77	@ 0x4d
 8003fd4:	2204      	movs	r2, #4
 8003fd6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003fd8:	78fa      	ldrb	r2, [r7, #3]
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	3319      	adds	r3, #25
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d114      	bne.n	8004018 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003fee:	78fa      	ldrb	r2, [r7, #3]
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	3318      	adds	r3, #24
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d109      	bne.n	8004018 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004004:	78fa      	ldrb	r2, [r7, #3]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	3319      	adds	r3, #25
 8004014:	2201      	movs	r2, #1
 8004016:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	78fa      	ldrb	r2, [r7, #3]
 800401e:	4611      	mov	r1, r2
 8004020:	4618      	mov	r0, r3
 8004022:	f003 fb73 	bl	800770c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004026:	78fb      	ldrb	r3, [r7, #3]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4413      	add	r3, r2
 800402e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004032:	461a      	mov	r2, r3
 8004034:	2310      	movs	r3, #16
 8004036:	6093      	str	r3, [r2, #8]
 8004038:	e2a7      	b.n	800458a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	78fa      	ldrb	r2, [r7, #3]
 8004040:	4611      	mov	r1, r2
 8004042:	4618      	mov	r0, r3
 8004044:	f003 f9f0 	bl	8007428 <USB_ReadChInterrupts>
 8004048:	4603      	mov	r3, r0
 800404a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800404e:	2b80      	cmp	r3, #128	@ 0x80
 8004050:	f040 8083 	bne.w	800415a <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	799b      	ldrb	r3, [r3, #6]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d111      	bne.n	8004080 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800405c:	78fa      	ldrb	r2, [r7, #3]
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	334d      	adds	r3, #77	@ 0x4d
 800406c:	2207      	movs	r2, #7
 800406e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	4611      	mov	r1, r2
 8004078:	4618      	mov	r0, r3
 800407a:	f003 fb47 	bl	800770c <USB_HC_Halt>
 800407e:	e062      	b.n	8004146 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004080:	78fa      	ldrb	r2, [r7, #3]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	3344      	adds	r3, #68	@ 0x44
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	1c59      	adds	r1, r3, #1
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	1a9b      	subs	r3, r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4403      	add	r3, r0
 80040a0:	3344      	adds	r3, #68	@ 0x44
 80040a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80040a4:	78fa      	ldrb	r2, [r7, #3]
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	4613      	mov	r3, r2
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	3344      	adds	r3, #68	@ 0x44
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d922      	bls.n	8004100 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80040ba:	78fa      	ldrb	r2, [r7, #3]
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	3344      	adds	r3, #68	@ 0x44
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80040ce:	78fa      	ldrb	r2, [r7, #3]
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	4613      	mov	r3, r2
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	1a9b      	subs	r3, r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	440b      	add	r3, r1
 80040dc:	334c      	adds	r3, #76	@ 0x4c
 80040de:	2204      	movs	r2, #4
 80040e0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80040e2:	78fa      	ldrb	r2, [r7, #3]
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	334c      	adds	r3, #76	@ 0x4c
 80040f2:	781a      	ldrb	r2, [r3, #0]
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	4619      	mov	r1, r3
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7fe ff13 	bl	8002f24 <HAL_HCD_HC_NotifyURBChange_Callback>
 80040fe:	e022      	b.n	8004146 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004100:	78fa      	ldrb	r2, [r7, #3]
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	334c      	adds	r3, #76	@ 0x4c
 8004110:	2202      	movs	r2, #2
 8004112:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004114:	78fb      	ldrb	r3, [r7, #3]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	4413      	add	r3, r2
 800411c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800412a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004132:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4413      	add	r3, r2
 800413c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004140:	461a      	mov	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004146:	78fb      	ldrb	r3, [r7, #3]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4413      	add	r3, r2
 800414e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004152:	461a      	mov	r2, r3
 8004154:	2380      	movs	r3, #128	@ 0x80
 8004156:	6093      	str	r3, [r2, #8]
 8004158:	e217      	b.n	800458a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	78fa      	ldrb	r2, [r7, #3]
 8004160:	4611      	mov	r1, r2
 8004162:	4618      	mov	r0, r3
 8004164:	f003 f960 	bl	8007428 <USB_ReadChInterrupts>
 8004168:	4603      	mov	r3, r0
 800416a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800416e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004172:	d11b      	bne.n	80041ac <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004174:	78fa      	ldrb	r2, [r7, #3]
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	4613      	mov	r3, r2
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	1a9b      	subs	r3, r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	334d      	adds	r3, #77	@ 0x4d
 8004184:	2209      	movs	r2, #9
 8004186:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	78fa      	ldrb	r2, [r7, #3]
 800418e:	4611      	mov	r1, r2
 8004190:	4618      	mov	r0, r3
 8004192:	f003 fabb 	bl	800770c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	4413      	add	r3, r2
 800419e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041a2:	461a      	mov	r2, r3
 80041a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041a8:	6093      	str	r3, [r2, #8]
 80041aa:	e1ee      	b.n	800458a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	78fa      	ldrb	r2, [r7, #3]
 80041b2:	4611      	mov	r1, r2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f003 f937 	bl	8007428 <USB_ReadChInterrupts>
 80041ba:	4603      	mov	r3, r0
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	f040 81df 	bne.w	8004584 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041d2:	461a      	mov	r2, r3
 80041d4:	2302      	movs	r3, #2
 80041d6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80041d8:	78fa      	ldrb	r2, [r7, #3]
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	334d      	adds	r3, #77	@ 0x4d
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	f040 8093 	bne.w	8004316 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041f0:	78fa      	ldrb	r2, [r7, #3]
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	4613      	mov	r3, r2
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	334d      	adds	r3, #77	@ 0x4d
 8004200:	2202      	movs	r2, #2
 8004202:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004204:	78fa      	ldrb	r2, [r7, #3]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	334c      	adds	r3, #76	@ 0x4c
 8004214:	2201      	movs	r2, #1
 8004216:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004218:	78fa      	ldrb	r2, [r7, #3]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	3326      	adds	r3, #38	@ 0x26
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d00b      	beq.n	8004246 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800422e:	78fa      	ldrb	r2, [r7, #3]
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	3326      	adds	r3, #38	@ 0x26
 800423e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004240:	2b03      	cmp	r3, #3
 8004242:	f040 8190 	bne.w	8004566 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	799b      	ldrb	r3, [r3, #6]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d115      	bne.n	800427a <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800424e:	78fa      	ldrb	r2, [r7, #3]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	333d      	adds	r3, #61	@ 0x3d
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	78fa      	ldrb	r2, [r7, #3]
 8004262:	f083 0301 	eor.w	r3, r3, #1
 8004266:	b2d8      	uxtb	r0, r3
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	4613      	mov	r3, r2
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	1a9b      	subs	r3, r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	333d      	adds	r3, #61	@ 0x3d
 8004276:	4602      	mov	r2, r0
 8004278:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	799b      	ldrb	r3, [r3, #6]
 800427e:	2b01      	cmp	r3, #1
 8004280:	f040 8171 	bne.w	8004566 <HCD_HC_OUT_IRQHandler+0x954>
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	4613      	mov	r3, r2
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	3334      	adds	r3, #52	@ 0x34
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 8165 	beq.w	8004566 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800429c:	78fa      	ldrb	r2, [r7, #3]
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	4613      	mov	r3, r2
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	440b      	add	r3, r1
 80042aa:	3334      	adds	r3, #52	@ 0x34
 80042ac:	6819      	ldr	r1, [r3, #0]
 80042ae:	78fa      	ldrb	r2, [r7, #3]
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4403      	add	r3, r0
 80042bc:	3328      	adds	r3, #40	@ 0x28
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	440b      	add	r3, r1
 80042c2:	1e59      	subs	r1, r3, #1
 80042c4:	78fa      	ldrb	r2, [r7, #3]
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	1a9b      	subs	r3, r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4403      	add	r3, r0
 80042d2:	3328      	adds	r3, #40	@ 0x28
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80042da:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 813f 	beq.w	8004566 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80042e8:	78fa      	ldrb	r2, [r7, #3]
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	333d      	adds	r3, #61	@ 0x3d
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	78fa      	ldrb	r2, [r7, #3]
 80042fc:	f083 0301 	eor.w	r3, r3, #1
 8004300:	b2d8      	uxtb	r0, r3
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	333d      	adds	r3, #61	@ 0x3d
 8004310:	4602      	mov	r2, r0
 8004312:	701a      	strb	r2, [r3, #0]
 8004314:	e127      	b.n	8004566 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004316:	78fa      	ldrb	r2, [r7, #3]
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	4613      	mov	r3, r2
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	1a9b      	subs	r3, r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	440b      	add	r3, r1
 8004324:	334d      	adds	r3, #77	@ 0x4d
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2b03      	cmp	r3, #3
 800432a:	d120      	bne.n	800436e <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800432c:	78fa      	ldrb	r2, [r7, #3]
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	1a9b      	subs	r3, r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	334d      	adds	r3, #77	@ 0x4d
 800433c:	2202      	movs	r2, #2
 800433e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004340:	78fa      	ldrb	r2, [r7, #3]
 8004342:	6879      	ldr	r1, [r7, #4]
 8004344:	4613      	mov	r3, r2
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	1a9b      	subs	r3, r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	440b      	add	r3, r1
 800434e:	331b      	adds	r3, #27
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b01      	cmp	r3, #1
 8004354:	f040 8107 	bne.w	8004566 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004358:	78fa      	ldrb	r2, [r7, #3]
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	4613      	mov	r3, r2
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	1a9b      	subs	r3, r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	334c      	adds	r3, #76	@ 0x4c
 8004368:	2202      	movs	r2, #2
 800436a:	701a      	strb	r2, [r3, #0]
 800436c:	e0fb      	b.n	8004566 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800436e:	78fa      	ldrb	r2, [r7, #3]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	440b      	add	r3, r1
 800437c:	334d      	adds	r3, #77	@ 0x4d
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b04      	cmp	r3, #4
 8004382:	d13a      	bne.n	80043fa <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004384:	78fa      	ldrb	r2, [r7, #3]
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	334d      	adds	r3, #77	@ 0x4d
 8004394:	2202      	movs	r2, #2
 8004396:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004398:	78fa      	ldrb	r2, [r7, #3]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	334c      	adds	r3, #76	@ 0x4c
 80043a8:	2202      	movs	r2, #2
 80043aa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80043ac:	78fa      	ldrb	r2, [r7, #3]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	331b      	adds	r3, #27
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	f040 80d1 	bne.w	8004566 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80043c4:	78fa      	ldrb	r2, [r7, #3]
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	1a9b      	subs	r3, r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	331b      	adds	r3, #27
 80043d4:	2200      	movs	r2, #0
 80043d6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	78fa      	ldrb	r2, [r7, #3]
 80043e8:	0151      	lsls	r1, r2, #5
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	440a      	add	r2, r1
 80043ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043f6:	6053      	str	r3, [r2, #4]
 80043f8:	e0b5      	b.n	8004566 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80043fa:	78fa      	ldrb	r2, [r7, #3]
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	334d      	adds	r3, #77	@ 0x4d
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b05      	cmp	r3, #5
 800440e:	d114      	bne.n	800443a <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004410:	78fa      	ldrb	r2, [r7, #3]
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	4613      	mov	r3, r2
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	334d      	adds	r3, #77	@ 0x4d
 8004420:	2202      	movs	r2, #2
 8004422:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004424:	78fa      	ldrb	r2, [r7, #3]
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	334c      	adds	r3, #76	@ 0x4c
 8004434:	2202      	movs	r2, #2
 8004436:	701a      	strb	r2, [r3, #0]
 8004438:	e095      	b.n	8004566 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800443a:	78fa      	ldrb	r2, [r7, #3]
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	4613      	mov	r3, r2
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	1a9b      	subs	r3, r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	334d      	adds	r3, #77	@ 0x4d
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b06      	cmp	r3, #6
 800444e:	d114      	bne.n	800447a <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004450:	78fa      	ldrb	r2, [r7, #3]
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	4613      	mov	r3, r2
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	1a9b      	subs	r3, r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	334d      	adds	r3, #77	@ 0x4d
 8004460:	2202      	movs	r2, #2
 8004462:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004464:	78fa      	ldrb	r2, [r7, #3]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	1a9b      	subs	r3, r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	334c      	adds	r3, #76	@ 0x4c
 8004474:	2205      	movs	r2, #5
 8004476:	701a      	strb	r2, [r3, #0]
 8004478:	e075      	b.n	8004566 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800447a:	78fa      	ldrb	r2, [r7, #3]
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	1a9b      	subs	r3, r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	334d      	adds	r3, #77	@ 0x4d
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b07      	cmp	r3, #7
 800448e:	d00a      	beq.n	80044a6 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004490:	78fa      	ldrb	r2, [r7, #3]
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	1a9b      	subs	r3, r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	334d      	adds	r3, #77	@ 0x4d
 80044a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80044a2:	2b09      	cmp	r3, #9
 80044a4:	d170      	bne.n	8004588 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	1a9b      	subs	r3, r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	334d      	adds	r3, #77	@ 0x4d
 80044b6:	2202      	movs	r2, #2
 80044b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80044ba:	78fa      	ldrb	r2, [r7, #3]
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	440b      	add	r3, r1
 80044c8:	3344      	adds	r3, #68	@ 0x44
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	1c59      	adds	r1, r3, #1
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	4613      	mov	r3, r2
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	1a9b      	subs	r3, r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4403      	add	r3, r0
 80044da:	3344      	adds	r3, #68	@ 0x44
 80044dc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044de:	78fa      	ldrb	r2, [r7, #3]
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	440b      	add	r3, r1
 80044ec:	3344      	adds	r3, #68	@ 0x44
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d914      	bls.n	800451e <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80044f4:	78fa      	ldrb	r2, [r7, #3]
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	3344      	adds	r3, #68	@ 0x44
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004508:	78fa      	ldrb	r2, [r7, #3]
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	4613      	mov	r3, r2
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	1a9b      	subs	r3, r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	334c      	adds	r3, #76	@ 0x4c
 8004518:	2204      	movs	r2, #4
 800451a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800451c:	e022      	b.n	8004564 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800451e:	78fa      	ldrb	r2, [r7, #3]
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	4613      	mov	r3, r2
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	1a9b      	subs	r3, r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	440b      	add	r3, r1
 800452c:	334c      	adds	r3, #76	@ 0x4c
 800452e:	2202      	movs	r2, #2
 8004530:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004532:	78fb      	ldrb	r3, [r7, #3]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	4413      	add	r3, r2
 800453a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004548:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004550:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004552:	78fb      	ldrb	r3, [r7, #3]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	4413      	add	r3, r2
 800455a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800455e:	461a      	mov	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004564:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004566:	78fa      	ldrb	r2, [r7, #3]
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	4613      	mov	r3, r2
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	1a9b      	subs	r3, r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	440b      	add	r3, r1
 8004574:	334c      	adds	r3, #76	@ 0x4c
 8004576:	781a      	ldrb	r2, [r3, #0]
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	4619      	mov	r1, r3
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7fe fcd1 	bl	8002f24 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004582:	e002      	b.n	800458a <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004584:	bf00      	nop
 8004586:	e000      	b.n	800458a <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004588:	bf00      	nop
  }
}
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b08a      	sub	sp, #40	@ 0x28
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	f003 030f 	and.w	r3, r3, #15
 80045b0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	0c5b      	lsrs	r3, r3, #17
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	091b      	lsrs	r3, r3, #4
 80045c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045c4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d004      	beq.n	80045d6 <HCD_RXQLVL_IRQHandler+0x46>
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2b05      	cmp	r3, #5
 80045d0:	f000 80b6 	beq.w	8004740 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80045d4:	e0b7      	b.n	8004746 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80b3 	beq.w	8004744 <HCD_RXQLVL_IRQHandler+0x1b4>
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4613      	mov	r3, r2
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	332c      	adds	r3, #44	@ 0x2c
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 80a7 	beq.w	8004744 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4613      	mov	r3, r2
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	1a9b      	subs	r3, r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	440b      	add	r3, r1
 8004604:	3338      	adds	r3, #56	@ 0x38
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	18d1      	adds	r1, r2, r3
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	4613      	mov	r3, r2
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	1a9b      	subs	r3, r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4403      	add	r3, r0
 800461a:	3334      	adds	r3, #52	@ 0x34
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4299      	cmp	r1, r3
 8004620:	f200 8083 	bhi.w	800472a <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6818      	ldr	r0, [r3, #0]
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4613      	mov	r3, r2
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	332c      	adds	r3, #44	@ 0x2c
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	b292      	uxth	r2, r2
 800463e:	4619      	mov	r1, r3
 8004640:	f002 fe87 	bl	8007352 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	4613      	mov	r3, r2
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	332c      	adds	r3, #44	@ 0x2c
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	18d1      	adds	r1, r2, r3
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4613      	mov	r3, r2
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	1a9b      	subs	r3, r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4403      	add	r3, r0
 8004668:	332c      	adds	r3, #44	@ 0x2c
 800466a:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4613      	mov	r3, r2
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	3338      	adds	r3, #56	@ 0x38
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	18d1      	adds	r1, r2, r3
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4613      	mov	r3, r2
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4403      	add	r3, r0
 8004690:	3338      	adds	r3, #56	@ 0x38
 8004692:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	4413      	add	r3, r2
 800469c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	0cdb      	lsrs	r3, r3, #19
 80046a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046a8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4613      	mov	r3, r2
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	1a9b      	subs	r3, r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	440b      	add	r3, r1
 80046b8:	3328      	adds	r3, #40	@ 0x28
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	461a      	mov	r2, r3
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d13f      	bne.n	8004744 <HCD_RXQLVL_IRQHandler+0x1b4>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d03c      	beq.n	8004744 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80046e0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80046e8:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046f6:	461a      	mov	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	4613      	mov	r3, r2
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	1a9b      	subs	r3, r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	333c      	adds	r3, #60	@ 0x3c
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	f083 0301 	eor.w	r3, r3, #1
 8004712:	b2d8      	uxtb	r0, r3
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	4613      	mov	r3, r2
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	333c      	adds	r3, #60	@ 0x3c
 8004724:	4602      	mov	r2, r0
 8004726:	701a      	strb	r2, [r3, #0]
      break;
 8004728:	e00c      	b.n	8004744 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4613      	mov	r3, r2
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	1a9b      	subs	r3, r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	334c      	adds	r3, #76	@ 0x4c
 800473a:	2204      	movs	r2, #4
 800473c:	701a      	strb	r2, [r3, #0]
      break;
 800473e:	e001      	b.n	8004744 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004740:	bf00      	nop
 8004742:	e000      	b.n	8004746 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004744:	bf00      	nop
  }
}
 8004746:	bf00      	nop
 8004748:	3728      	adds	r7, #40	@ 0x28
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b086      	sub	sp, #24
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800477a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b02      	cmp	r3, #2
 8004784:	d10b      	bne.n	800479e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b01      	cmp	r3, #1
 800478e:	d102      	bne.n	8004796 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7fe fb9f 	bl	8002ed4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f043 0302 	orr.w	r3, r3, #2
 800479c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d132      	bne.n	800480e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f043 0308 	orr.w	r3, r3, #8
 80047ae:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f003 0304 	and.w	r3, r3, #4
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d126      	bne.n	8004808 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	7a5b      	ldrb	r3, [r3, #9]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d113      	bne.n	80047ea <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80047c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047cc:	d106      	bne.n	80047dc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2102      	movs	r1, #2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f002 ff4b 	bl	8007670 <USB_InitFSLSPClkSel>
 80047da:	e011      	b.n	8004800 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2101      	movs	r1, #1
 80047e2:	4618      	mov	r0, r3
 80047e4:	f002 ff44 	bl	8007670 <USB_InitFSLSPClkSel>
 80047e8:	e00a      	b.n	8004800 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	79db      	ldrb	r3, [r3, #7]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d106      	bne.n	8004800 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047f8:	461a      	mov	r2, r3
 80047fa:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80047fe:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7fe fb7b 	bl	8002efc <HAL_HCD_PortEnabled_Callback>
 8004806:	e002      	b.n	800480e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7fe fb81 	bl	8002f10 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b20      	cmp	r3, #32
 8004816:	d103      	bne.n	8004820 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f043 0320 	orr.w	r3, r3, #32
 800481e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004826:	461a      	mov	r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	6013      	str	r3, [r2, #0]
}
 800482c:	bf00      	nop
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e12b      	b.n	8004a9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7fc fb2a 	bl	8000eb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2224      	movs	r2, #36	@ 0x24
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0201 	bic.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004886:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004896:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004898:	f001 f964 	bl	8005b64 <HAL_RCC_GetPCLK1Freq>
 800489c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	4a81      	ldr	r2, [pc, #516]	@ (8004aa8 <HAL_I2C_Init+0x274>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d807      	bhi.n	80048b8 <HAL_I2C_Init+0x84>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4a80      	ldr	r2, [pc, #512]	@ (8004aac <HAL_I2C_Init+0x278>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	bf94      	ite	ls
 80048b0:	2301      	movls	r3, #1
 80048b2:	2300      	movhi	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	e006      	b.n	80048c6 <HAL_I2C_Init+0x92>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4a7d      	ldr	r2, [pc, #500]	@ (8004ab0 <HAL_I2C_Init+0x27c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	bf94      	ite	ls
 80048c0:	2301      	movls	r3, #1
 80048c2:	2300      	movhi	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e0e7      	b.n	8004a9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4a78      	ldr	r2, [pc, #480]	@ (8004ab4 <HAL_I2C_Init+0x280>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	0c9b      	lsrs	r3, r3, #18
 80048d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	4a6a      	ldr	r2, [pc, #424]	@ (8004aa8 <HAL_I2C_Init+0x274>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d802      	bhi.n	8004908 <HAL_I2C_Init+0xd4>
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	3301      	adds	r3, #1
 8004906:	e009      	b.n	800491c <HAL_I2C_Init+0xe8>
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800490e:	fb02 f303 	mul.w	r3, r2, r3
 8004912:	4a69      	ldr	r2, [pc, #420]	@ (8004ab8 <HAL_I2C_Init+0x284>)
 8004914:	fba2 2303 	umull	r2, r3, r2, r3
 8004918:	099b      	lsrs	r3, r3, #6
 800491a:	3301      	adds	r3, #1
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6812      	ldr	r2, [r2, #0]
 8004920:	430b      	orrs	r3, r1
 8004922:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800492e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	495c      	ldr	r1, [pc, #368]	@ (8004aa8 <HAL_I2C_Init+0x274>)
 8004938:	428b      	cmp	r3, r1
 800493a:	d819      	bhi.n	8004970 <HAL_I2C_Init+0x13c>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	1e59      	subs	r1, r3, #1
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	fbb1 f3f3 	udiv	r3, r1, r3
 800494a:	1c59      	adds	r1, r3, #1
 800494c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004950:	400b      	ands	r3, r1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <HAL_I2C_Init+0x138>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1e59      	subs	r1, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	fbb1 f3f3 	udiv	r3, r1, r3
 8004964:	3301      	adds	r3, #1
 8004966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800496a:	e051      	b.n	8004a10 <HAL_I2C_Init+0x1dc>
 800496c:	2304      	movs	r3, #4
 800496e:	e04f      	b.n	8004a10 <HAL_I2C_Init+0x1dc>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d111      	bne.n	800499c <HAL_I2C_Init+0x168>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	1e58      	subs	r0, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6859      	ldr	r1, [r3, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	440b      	add	r3, r1
 8004986:	fbb0 f3f3 	udiv	r3, r0, r3
 800498a:	3301      	adds	r3, #1
 800498c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004990:	2b00      	cmp	r3, #0
 8004992:	bf0c      	ite	eq
 8004994:	2301      	moveq	r3, #1
 8004996:	2300      	movne	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	e012      	b.n	80049c2 <HAL_I2C_Init+0x18e>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	1e58      	subs	r0, r3, #1
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6859      	ldr	r1, [r3, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	0099      	lsls	r1, r3, #2
 80049ac:	440b      	add	r3, r1
 80049ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80049b2:	3301      	adds	r3, #1
 80049b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	bf0c      	ite	eq
 80049bc:	2301      	moveq	r3, #1
 80049be:	2300      	movne	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_I2C_Init+0x196>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e022      	b.n	8004a10 <HAL_I2C_Init+0x1dc>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10e      	bne.n	80049f0 <HAL_I2C_Init+0x1bc>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	1e58      	subs	r0, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6859      	ldr	r1, [r3, #4]
 80049da:	460b      	mov	r3, r1
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	440b      	add	r3, r1
 80049e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80049e4:	3301      	adds	r3, #1
 80049e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049ee:	e00f      	b.n	8004a10 <HAL_I2C_Init+0x1dc>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1e58      	subs	r0, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6859      	ldr	r1, [r3, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	440b      	add	r3, r1
 80049fe:	0099      	lsls	r1, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a06:	3301      	adds	r3, #1
 8004a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	6809      	ldr	r1, [r1, #0]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69da      	ldr	r2, [r3, #28]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004a3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6911      	ldr	r1, [r2, #16]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	68d2      	ldr	r2, [r2, #12]
 8004a4a:	4311      	orrs	r1, r2
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	430b      	orrs	r3, r1
 8004a52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	695a      	ldr	r2, [r3, #20]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	000186a0 	.word	0x000186a0
 8004aac:	001e847f 	.word	0x001e847f
 8004ab0:	003d08ff 	.word	0x003d08ff
 8004ab4:	431bde83 	.word	0x431bde83
 8004ab8:	10624dd3 	.word	0x10624dd3

08004abc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b20      	cmp	r3, #32
 8004ad0:	d129      	bne.n	8004b26 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2224      	movs	r2, #36	@ 0x24
 8004ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0201 	bic.w	r2, r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0210 	bic.w	r2, r2, #16
 8004af8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 0201 	orr.w	r2, r2, #1
 8004b18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	e000      	b.n	8004b28 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004b26:	2302      	movs	r3, #2
  }
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b20      	cmp	r3, #32
 8004b4c:	d12a      	bne.n	8004ba4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2224      	movs	r2, #36	@ 0x24
 8004b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0201 	bic.w	r2, r2, #1
 8004b64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004b6e:	89fb      	ldrh	r3, [r7, #14]
 8004b70:	f023 030f 	bic.w	r3, r3, #15
 8004b74:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	89fb      	ldrh	r3, [r7, #14]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	89fa      	ldrh	r2, [r7, #14]
 8004b86:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	e000      	b.n	8004ba6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004ba4:	2302      	movs	r3, #2
  }
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
	...

08004bb4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e0bf      	b.n	8004d46 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fc f9d4 	bl	8000f88 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699a      	ldr	r2, [r3, #24]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004bf6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6999      	ldr	r1, [r3, #24]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004c0c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6899      	ldr	r1, [r3, #8]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	4b4a      	ldr	r3, [pc, #296]	@ (8004d50 <HAL_LTDC_Init+0x19c>)
 8004c28:	400b      	ands	r3, r1
 8004c2a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	041b      	lsls	r3, r3, #16
 8004c32:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6899      	ldr	r1, [r3, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68d9      	ldr	r1, [r3, #12]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	4b3e      	ldr	r3, [pc, #248]	@ (8004d50 <HAL_LTDC_Init+0x19c>)
 8004c56:	400b      	ands	r3, r1
 8004c58:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	041b      	lsls	r3, r3, #16
 8004c60:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68d9      	ldr	r1, [r3, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a1a      	ldr	r2, [r3, #32]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6919      	ldr	r1, [r3, #16]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4b33      	ldr	r3, [pc, #204]	@ (8004d50 <HAL_LTDC_Init+0x19c>)
 8004c84:	400b      	ands	r3, r1
 8004c86:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	041b      	lsls	r3, r3, #16
 8004c8e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6919      	ldr	r1, [r3, #16]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6959      	ldr	r1, [r3, #20]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	4b27      	ldr	r3, [pc, #156]	@ (8004d50 <HAL_LTDC_Init+0x19c>)
 8004cb2:	400b      	ands	r3, r1
 8004cb4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6959      	ldr	r1, [r3, #20]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cda:	021b      	lsls	r3, r3, #8
 8004cdc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004ce4:	041b      	lsls	r3, r3, #16
 8004ce6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004cf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0206 	orr.w	r2, r2, #6
 8004d22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699a      	ldr	r2, [r3, #24]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0201 	orr.w	r2, r2, #1
 8004d32:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	f000f800 	.word	0xf000f800

08004d54 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d62:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d6a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 0304 	and.w	r3, r3, #4
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d023      	beq.n	8004dbe <HAL_LTDC_IRQHandler+0x6a>
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01e      	beq.n	8004dbe <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0204 	bic.w	r2, r2, #4
 8004d8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2204      	movs	r2, #4
 8004d96:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004d9e:	f043 0201 	orr.w	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2204      	movs	r2, #4
 8004dac:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f86f 	bl	8004e9c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d023      	beq.n	8004e10 <HAL_LTDC_IRQHandler+0xbc>
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d01e      	beq.n	8004e10 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0202 	bic.w	r2, r2, #2
 8004de0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2202      	movs	r2, #2
 8004de8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004df0:	f043 0202 	orr.w	r2, r3, #2
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2204      	movs	r2, #4
 8004dfe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f846 	bl	8004e9c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d01b      	beq.n	8004e52 <HAL_LTDC_IRQHandler+0xfe>
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d016      	beq.n	8004e52 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0201 	bic.w	r2, r2, #1
 8004e32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f82f 	bl	8004eb0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d01b      	beq.n	8004e94 <HAL_LTDC_IRQHandler+0x140>
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d016      	beq.n	8004e94 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0208 	bic.w	r2, r2, #8
 8004e74:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2208      	movs	r2, #8
 8004e7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f818 	bl	8004ec4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004e94:	bf00      	nop
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004ed8:	b5b0      	push	{r4, r5, r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <HAL_LTDC_ConfigLayer+0x1a>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	e02c      	b.n	8004f4c <HAL_LTDC_ConfigLayer+0x74>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2202      	movs	r2, #2
 8004efe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2134      	movs	r1, #52	@ 0x34
 8004f08:	fb01 f303 	mul.w	r3, r1, r3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4614      	mov	r4, r2
 8004f16:	461d      	mov	r5, r3
 8004f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f24:	682b      	ldr	r3, [r5, #0]
 8004f26:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	68b9      	ldr	r1, [r7, #8]
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 f811 	bl	8004f54 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2201      	movs	r2, #1
 8004f38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bdb0      	pop	{r4, r5, r7, pc}

08004f54 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b089      	sub	sp, #36	@ 0x24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	0c1b      	lsrs	r3, r3, #16
 8004f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f70:	4413      	add	r3, r2
 8004f72:	041b      	lsls	r3, r3, #16
 8004f74:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	01db      	lsls	r3, r3, #7
 8004f80:	4413      	add	r3, r2
 8004f82:	3384      	adds	r3, #132	@ 0x84
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	01d2      	lsls	r2, r2, #7
 8004f90:	440a      	add	r2, r1
 8004f92:	3284      	adds	r2, #132	@ 0x84
 8004f94:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004f98:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	0c1b      	lsrs	r3, r3, #16
 8004fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004faa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004fac:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	01db      	lsls	r3, r3, #7
 8004fb8:	440b      	add	r3, r1
 8004fba:	3384      	adds	r3, #132	@ 0x84
 8004fbc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004fc2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fd2:	4413      	add	r3, r2
 8004fd4:	041b      	lsls	r3, r3, #16
 8004fd6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	01db      	lsls	r3, r3, #7
 8004fe2:	4413      	add	r3, r2
 8004fe4:	3384      	adds	r3, #132	@ 0x84
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	6812      	ldr	r2, [r2, #0]
 8004fec:	4611      	mov	r1, r2
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	01d2      	lsls	r2, r2, #7
 8004ff2:	440a      	add	r2, r1
 8004ff4:	3284      	adds	r2, #132	@ 0x84
 8004ff6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004ffa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800500a:	4413      	add	r3, r2
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4619      	mov	r1, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	01db      	lsls	r3, r3, #7
 8005018:	440b      	add	r3, r1
 800501a:	3384      	adds	r3, #132	@ 0x84
 800501c:	4619      	mov	r1, r3
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4313      	orrs	r3, r2
 8005022:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	461a      	mov	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	01db      	lsls	r3, r3, #7
 800502e:	4413      	add	r3, r2
 8005030:	3384      	adds	r3, #132	@ 0x84
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	4611      	mov	r1, r2
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	01d2      	lsls	r2, r2, #7
 800503e:	440a      	add	r2, r1
 8005040:	3284      	adds	r2, #132	@ 0x84
 8005042:	f023 0307 	bic.w	r3, r3, #7
 8005046:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	461a      	mov	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	01db      	lsls	r3, r3, #7
 8005052:	4413      	add	r3, r2
 8005054:	3384      	adds	r3, #132	@ 0x84
 8005056:	461a      	mov	r2, r3
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005064:	021b      	lsls	r3, r3, #8
 8005066:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800506e:	041b      	lsls	r3, r3, #16
 8005070:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	061b      	lsls	r3, r3, #24
 8005078:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	01db      	lsls	r3, r3, #7
 8005084:	4413      	add	r3, r2
 8005086:	3384      	adds	r3, #132	@ 0x84
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	01db      	lsls	r3, r3, #7
 8005094:	4413      	add	r3, r2
 8005096:	3384      	adds	r3, #132	@ 0x84
 8005098:	461a      	mov	r2, r3
 800509a:	2300      	movs	r3, #0
 800509c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80050a4:	461a      	mov	r2, r3
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	431a      	orrs	r2, r3
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	431a      	orrs	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4619      	mov	r1, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	01db      	lsls	r3, r3, #7
 80050b8:	440b      	add	r3, r1
 80050ba:	3384      	adds	r3, #132	@ 0x84
 80050bc:	4619      	mov	r1, r3
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	01db      	lsls	r3, r3, #7
 80050ce:	4413      	add	r3, r2
 80050d0:	3384      	adds	r3, #132	@ 0x84
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	6812      	ldr	r2, [r2, #0]
 80050d8:	4611      	mov	r1, r2
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	01d2      	lsls	r2, r2, #7
 80050de:	440a      	add	r2, r1
 80050e0:	3284      	adds	r2, #132	@ 0x84
 80050e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80050e6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	461a      	mov	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	01db      	lsls	r3, r3, #7
 80050f2:	4413      	add	r3, r2
 80050f4:	3384      	adds	r3, #132	@ 0x84
 80050f6:	461a      	mov	r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	01db      	lsls	r3, r3, #7
 8005108:	4413      	add	r3, r2
 800510a:	3384      	adds	r3, #132	@ 0x84
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	6812      	ldr	r2, [r2, #0]
 8005112:	4611      	mov	r1, r2
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	01d2      	lsls	r2, r2, #7
 8005118:	440a      	add	r2, r1
 800511a:	3284      	adds	r2, #132	@ 0x84
 800511c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005120:	f023 0307 	bic.w	r3, r3, #7
 8005124:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	69da      	ldr	r2, [r3, #28]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	68f9      	ldr	r1, [r7, #12]
 8005130:	6809      	ldr	r1, [r1, #0]
 8005132:	4608      	mov	r0, r1
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	01c9      	lsls	r1, r1, #7
 8005138:	4401      	add	r1, r0
 800513a:	3184      	adds	r1, #132	@ 0x84
 800513c:	4313      	orrs	r3, r2
 800513e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	01db      	lsls	r3, r3, #7
 800514a:	4413      	add	r3, r2
 800514c:	3384      	adds	r3, #132	@ 0x84
 800514e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	461a      	mov	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	01db      	lsls	r3, r3, #7
 800515a:	4413      	add	r3, r2
 800515c:	3384      	adds	r3, #132	@ 0x84
 800515e:	461a      	mov	r2, r3
 8005160:	2300      	movs	r3, #0
 8005162:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	461a      	mov	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	01db      	lsls	r3, r3, #7
 800516e:	4413      	add	r3, r2
 8005170:	3384      	adds	r3, #132	@ 0x84
 8005172:	461a      	mov	r2, r3
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005178:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d102      	bne.n	8005188 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005182:	2304      	movs	r3, #4
 8005184:	61fb      	str	r3, [r7, #28]
 8005186:	e01b      	b.n	80051c0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d102      	bne.n	8005196 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005190:	2303      	movs	r3, #3
 8005192:	61fb      	str	r3, [r7, #28]
 8005194:	e014      	b.n	80051c0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b04      	cmp	r3, #4
 800519c:	d00b      	beq.n	80051b6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d007      	beq.n	80051b6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d003      	beq.n	80051b6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80051b2:	2b07      	cmp	r3, #7
 80051b4:	d102      	bne.n	80051bc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80051b6:	2302      	movs	r3, #2
 80051b8:	61fb      	str	r3, [r7, #28]
 80051ba:	e001      	b.n	80051c0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80051bc:	2301      	movs	r3, #1
 80051be:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	461a      	mov	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	01db      	lsls	r3, r3, #7
 80051ca:	4413      	add	r3, r2
 80051cc:	3384      	adds	r3, #132	@ 0x84
 80051ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	6812      	ldr	r2, [r2, #0]
 80051d4:	4611      	mov	r1, r2
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	01d2      	lsls	r2, r2, #7
 80051da:	440a      	add	r2, r1
 80051dc:	3284      	adds	r2, #132	@ 0x84
 80051de:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80051e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e8:	69fa      	ldr	r2, [r7, #28]
 80051ea:	fb02 f303 	mul.w	r3, r2, r3
 80051ee:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	6859      	ldr	r1, [r3, #4]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	1acb      	subs	r3, r1, r3
 80051fa:	69f9      	ldr	r1, [r7, #28]
 80051fc:	fb01 f303 	mul.w	r3, r1, r3
 8005200:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005202:	68f9      	ldr	r1, [r7, #12]
 8005204:	6809      	ldr	r1, [r1, #0]
 8005206:	4608      	mov	r0, r1
 8005208:	6879      	ldr	r1, [r7, #4]
 800520a:	01c9      	lsls	r1, r1, #7
 800520c:	4401      	add	r1, r0
 800520e:	3184      	adds	r1, #132	@ 0x84
 8005210:	4313      	orrs	r3, r2
 8005212:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	461a      	mov	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	01db      	lsls	r3, r3, #7
 800521e:	4413      	add	r3, r2
 8005220:	3384      	adds	r3, #132	@ 0x84
 8005222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	6812      	ldr	r2, [r2, #0]
 8005228:	4611      	mov	r1, r2
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	01d2      	lsls	r2, r2, #7
 800522e:	440a      	add	r2, r1
 8005230:	3284      	adds	r2, #132	@ 0x84
 8005232:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005236:	f023 0307 	bic.w	r3, r3, #7
 800523a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	461a      	mov	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	01db      	lsls	r3, r3, #7
 8005246:	4413      	add	r3, r2
 8005248:	3384      	adds	r3, #132	@ 0x84
 800524a:	461a      	mov	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005250:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	01db      	lsls	r3, r3, #7
 800525c:	4413      	add	r3, r2
 800525e:	3384      	adds	r3, #132	@ 0x84
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	6812      	ldr	r2, [r2, #0]
 8005266:	4611      	mov	r1, r2
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	01d2      	lsls	r2, r2, #7
 800526c:	440a      	add	r2, r1
 800526e:	3284      	adds	r2, #132	@ 0x84
 8005270:	f043 0301 	orr.w	r3, r3, #1
 8005274:	6013      	str	r3, [r2, #0]
}
 8005276:	bf00      	nop
 8005278:	3724      	adds	r7, #36	@ 0x24
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
	...

08005284 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e267      	b.n	8005766 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d075      	beq.n	800538e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80052a2:	4b88      	ldr	r3, [pc, #544]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 030c 	and.w	r3, r3, #12
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d00c      	beq.n	80052c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ae:	4b85      	ldr	r3, [pc, #532]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d112      	bne.n	80052e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ba:	4b82      	ldr	r3, [pc, #520]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052c6:	d10b      	bne.n	80052e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052c8:	4b7e      	ldr	r3, [pc, #504]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d05b      	beq.n	800538c <HAL_RCC_OscConfig+0x108>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d157      	bne.n	800538c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e242      	b.n	8005766 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052e8:	d106      	bne.n	80052f8 <HAL_RCC_OscConfig+0x74>
 80052ea:	4b76      	ldr	r3, [pc, #472]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a75      	ldr	r2, [pc, #468]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 80052f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	e01d      	b.n	8005334 <HAL_RCC_OscConfig+0xb0>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005300:	d10c      	bne.n	800531c <HAL_RCC_OscConfig+0x98>
 8005302:	4b70      	ldr	r3, [pc, #448]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a6f      	ldr	r2, [pc, #444]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 8005308:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	4b6d      	ldr	r3, [pc, #436]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a6c      	ldr	r2, [pc, #432]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 8005314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	e00b      	b.n	8005334 <HAL_RCC_OscConfig+0xb0>
 800531c:	4b69      	ldr	r3, [pc, #420]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a68      	ldr	r2, [pc, #416]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 8005322:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	4b66      	ldr	r3, [pc, #408]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a65      	ldr	r2, [pc, #404]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 800532e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d013      	beq.n	8005364 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800533c:	f7fc ff52 	bl	80021e4 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005344:	f7fc ff4e 	bl	80021e4 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b64      	cmp	r3, #100	@ 0x64
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e207      	b.n	8005766 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005356:	4b5b      	ldr	r3, [pc, #364]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0f0      	beq.n	8005344 <HAL_RCC_OscConfig+0xc0>
 8005362:	e014      	b.n	800538e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005364:	f7fc ff3e 	bl	80021e4 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800536c:	f7fc ff3a 	bl	80021e4 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b64      	cmp	r3, #100	@ 0x64
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e1f3      	b.n	8005766 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800537e:	4b51      	ldr	r3, [pc, #324]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f0      	bne.n	800536c <HAL_RCC_OscConfig+0xe8>
 800538a:	e000      	b.n	800538e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800538c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d063      	beq.n	8005462 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800539a:	4b4a      	ldr	r3, [pc, #296]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 030c 	and.w	r3, r3, #12
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00b      	beq.n	80053be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053a6:	4b47      	ldr	r3, [pc, #284]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d11c      	bne.n	80053ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053b2:	4b44      	ldr	r3, [pc, #272]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d116      	bne.n	80053ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053be:	4b41      	ldr	r3, [pc, #260]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d005      	beq.n	80053d6 <HAL_RCC_OscConfig+0x152>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d001      	beq.n	80053d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e1c7      	b.n	8005766 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d6:	4b3b      	ldr	r3, [pc, #236]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	4937      	ldr	r1, [pc, #220]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ea:	e03a      	b.n	8005462 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d020      	beq.n	8005436 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053f4:	4b34      	ldr	r3, [pc, #208]	@ (80054c8 <HAL_RCC_OscConfig+0x244>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fa:	f7fc fef3 	bl	80021e4 <HAL_GetTick>
 80053fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005400:	e008      	b.n	8005414 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005402:	f7fc feef 	bl	80021e4 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e1a8      	b.n	8005766 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005414:	4b2b      	ldr	r3, [pc, #172]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0f0      	beq.n	8005402 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005420:	4b28      	ldr	r3, [pc, #160]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	4925      	ldr	r1, [pc, #148]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 8005430:	4313      	orrs	r3, r2
 8005432:	600b      	str	r3, [r1, #0]
 8005434:	e015      	b.n	8005462 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005436:	4b24      	ldr	r3, [pc, #144]	@ (80054c8 <HAL_RCC_OscConfig+0x244>)
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543c:	f7fc fed2 	bl	80021e4 <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005444:	f7fc fece 	bl	80021e4 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e187      	b.n	8005766 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005456:	4b1b      	ldr	r3, [pc, #108]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1f0      	bne.n	8005444 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d036      	beq.n	80054dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d016      	beq.n	80054a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005476:	4b15      	ldr	r3, [pc, #84]	@ (80054cc <HAL_RCC_OscConfig+0x248>)
 8005478:	2201      	movs	r2, #1
 800547a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800547c:	f7fc feb2 	bl	80021e4 <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005484:	f7fc feae 	bl	80021e4 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e167      	b.n	8005766 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005496:	4b0b      	ldr	r3, [pc, #44]	@ (80054c4 <HAL_RCC_OscConfig+0x240>)
 8005498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0f0      	beq.n	8005484 <HAL_RCC_OscConfig+0x200>
 80054a2:	e01b      	b.n	80054dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054a4:	4b09      	ldr	r3, [pc, #36]	@ (80054cc <HAL_RCC_OscConfig+0x248>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054aa:	f7fc fe9b 	bl	80021e4 <HAL_GetTick>
 80054ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054b0:	e00e      	b.n	80054d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054b2:	f7fc fe97 	bl	80021e4 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d907      	bls.n	80054d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e150      	b.n	8005766 <HAL_RCC_OscConfig+0x4e2>
 80054c4:	40023800 	.word	0x40023800
 80054c8:	42470000 	.word	0x42470000
 80054cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054d0:	4b88      	ldr	r3, [pc, #544]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 80054d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1ea      	bne.n	80054b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 8097 	beq.w	8005618 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ea:	2300      	movs	r3, #0
 80054ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ee:	4b81      	ldr	r3, [pc, #516]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 80054f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10f      	bne.n	800551a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054fa:	2300      	movs	r3, #0
 80054fc:	60bb      	str	r3, [r7, #8]
 80054fe:	4b7d      	ldr	r3, [pc, #500]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 8005500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005502:	4a7c      	ldr	r2, [pc, #496]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 8005504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005508:	6413      	str	r3, [r2, #64]	@ 0x40
 800550a:	4b7a      	ldr	r3, [pc, #488]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 800550c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005512:	60bb      	str	r3, [r7, #8]
 8005514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005516:	2301      	movs	r3, #1
 8005518:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800551a:	4b77      	ldr	r3, [pc, #476]	@ (80056f8 <HAL_RCC_OscConfig+0x474>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005522:	2b00      	cmp	r3, #0
 8005524:	d118      	bne.n	8005558 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005526:	4b74      	ldr	r3, [pc, #464]	@ (80056f8 <HAL_RCC_OscConfig+0x474>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a73      	ldr	r2, [pc, #460]	@ (80056f8 <HAL_RCC_OscConfig+0x474>)
 800552c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005532:	f7fc fe57 	bl	80021e4 <HAL_GetTick>
 8005536:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005538:	e008      	b.n	800554c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800553a:	f7fc fe53 	bl	80021e4 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d901      	bls.n	800554c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e10c      	b.n	8005766 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800554c:	4b6a      	ldr	r3, [pc, #424]	@ (80056f8 <HAL_RCC_OscConfig+0x474>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0f0      	beq.n	800553a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d106      	bne.n	800556e <HAL_RCC_OscConfig+0x2ea>
 8005560:	4b64      	ldr	r3, [pc, #400]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 8005562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005564:	4a63      	ldr	r2, [pc, #396]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 8005566:	f043 0301 	orr.w	r3, r3, #1
 800556a:	6713      	str	r3, [r2, #112]	@ 0x70
 800556c:	e01c      	b.n	80055a8 <HAL_RCC_OscConfig+0x324>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	2b05      	cmp	r3, #5
 8005574:	d10c      	bne.n	8005590 <HAL_RCC_OscConfig+0x30c>
 8005576:	4b5f      	ldr	r3, [pc, #380]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 8005578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800557a:	4a5e      	ldr	r2, [pc, #376]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 800557c:	f043 0304 	orr.w	r3, r3, #4
 8005580:	6713      	str	r3, [r2, #112]	@ 0x70
 8005582:	4b5c      	ldr	r3, [pc, #368]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 8005584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005586:	4a5b      	ldr	r2, [pc, #364]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 8005588:	f043 0301 	orr.w	r3, r3, #1
 800558c:	6713      	str	r3, [r2, #112]	@ 0x70
 800558e:	e00b      	b.n	80055a8 <HAL_RCC_OscConfig+0x324>
 8005590:	4b58      	ldr	r3, [pc, #352]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 8005592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005594:	4a57      	ldr	r2, [pc, #348]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 8005596:	f023 0301 	bic.w	r3, r3, #1
 800559a:	6713      	str	r3, [r2, #112]	@ 0x70
 800559c:	4b55      	ldr	r3, [pc, #340]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 800559e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a0:	4a54      	ldr	r2, [pc, #336]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 80055a2:	f023 0304 	bic.w	r3, r3, #4
 80055a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d015      	beq.n	80055dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b0:	f7fc fe18 	bl	80021e4 <HAL_GetTick>
 80055b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b6:	e00a      	b.n	80055ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055b8:	f7fc fe14 	bl	80021e4 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e0cb      	b.n	8005766 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ce:	4b49      	ldr	r3, [pc, #292]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 80055d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0ee      	beq.n	80055b8 <HAL_RCC_OscConfig+0x334>
 80055da:	e014      	b.n	8005606 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055dc:	f7fc fe02 	bl	80021e4 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055e2:	e00a      	b.n	80055fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055e4:	f7fc fdfe 	bl	80021e4 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e0b5      	b.n	8005766 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055fa:	4b3e      	ldr	r3, [pc, #248]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 80055fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1ee      	bne.n	80055e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005606:	7dfb      	ldrb	r3, [r7, #23]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d105      	bne.n	8005618 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800560c:	4b39      	ldr	r3, [pc, #228]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 800560e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005610:	4a38      	ldr	r2, [pc, #224]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 8005612:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005616:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 80a1 	beq.w	8005764 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005622:	4b34      	ldr	r3, [pc, #208]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f003 030c 	and.w	r3, r3, #12
 800562a:	2b08      	cmp	r3, #8
 800562c:	d05c      	beq.n	80056e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	2b02      	cmp	r3, #2
 8005634:	d141      	bne.n	80056ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005636:	4b31      	ldr	r3, [pc, #196]	@ (80056fc <HAL_RCC_OscConfig+0x478>)
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800563c:	f7fc fdd2 	bl	80021e4 <HAL_GetTick>
 8005640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005642:	e008      	b.n	8005656 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005644:	f7fc fdce 	bl	80021e4 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e087      	b.n	8005766 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005656:	4b27      	ldr	r3, [pc, #156]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1f0      	bne.n	8005644 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69da      	ldr	r2, [r3, #28]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005670:	019b      	lsls	r3, r3, #6
 8005672:	431a      	orrs	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005678:	085b      	lsrs	r3, r3, #1
 800567a:	3b01      	subs	r3, #1
 800567c:	041b      	lsls	r3, r3, #16
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005684:	061b      	lsls	r3, r3, #24
 8005686:	491b      	ldr	r1, [pc, #108]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 8005688:	4313      	orrs	r3, r2
 800568a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800568c:	4b1b      	ldr	r3, [pc, #108]	@ (80056fc <HAL_RCC_OscConfig+0x478>)
 800568e:	2201      	movs	r2, #1
 8005690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005692:	f7fc fda7 	bl	80021e4 <HAL_GetTick>
 8005696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005698:	e008      	b.n	80056ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800569a:	f7fc fda3 	bl	80021e4 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d901      	bls.n	80056ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e05c      	b.n	8005766 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ac:	4b11      	ldr	r3, [pc, #68]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0f0      	beq.n	800569a <HAL_RCC_OscConfig+0x416>
 80056b8:	e054      	b.n	8005764 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ba:	4b10      	ldr	r3, [pc, #64]	@ (80056fc <HAL_RCC_OscConfig+0x478>)
 80056bc:	2200      	movs	r2, #0
 80056be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c0:	f7fc fd90 	bl	80021e4 <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c8:	f7fc fd8c 	bl	80021e4 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e045      	b.n	8005766 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056da:	4b06      	ldr	r3, [pc, #24]	@ (80056f4 <HAL_RCC_OscConfig+0x470>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1f0      	bne.n	80056c8 <HAL_RCC_OscConfig+0x444>
 80056e6:	e03d      	b.n	8005764 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d107      	bne.n	8005700 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e038      	b.n	8005766 <HAL_RCC_OscConfig+0x4e2>
 80056f4:	40023800 	.word	0x40023800
 80056f8:	40007000 	.word	0x40007000
 80056fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005700:	4b1b      	ldr	r3, [pc, #108]	@ (8005770 <HAL_RCC_OscConfig+0x4ec>)
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d028      	beq.n	8005760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005718:	429a      	cmp	r2, r3
 800571a:	d121      	bne.n	8005760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005726:	429a      	cmp	r2, r3
 8005728:	d11a      	bne.n	8005760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005730:	4013      	ands	r3, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005736:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005738:	4293      	cmp	r3, r2
 800573a:	d111      	bne.n	8005760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005746:	085b      	lsrs	r3, r3, #1
 8005748:	3b01      	subs	r3, #1
 800574a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800574c:	429a      	cmp	r2, r3
 800574e:	d107      	bne.n	8005760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800575c:	429a      	cmp	r2, r3
 800575e:	d001      	beq.n	8005764 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e000      	b.n	8005766 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3718      	adds	r7, #24
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	40023800 	.word	0x40023800

08005774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e0cc      	b.n	8005922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005788:	4b68      	ldr	r3, [pc, #416]	@ (800592c <HAL_RCC_ClockConfig+0x1b8>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 030f 	and.w	r3, r3, #15
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d90c      	bls.n	80057b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005796:	4b65      	ldr	r3, [pc, #404]	@ (800592c <HAL_RCC_ClockConfig+0x1b8>)
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800579e:	4b63      	ldr	r3, [pc, #396]	@ (800592c <HAL_RCC_ClockConfig+0x1b8>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d001      	beq.n	80057b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e0b8      	b.n	8005922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d020      	beq.n	80057fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d005      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057c8:	4b59      	ldr	r3, [pc, #356]	@ (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	4a58      	ldr	r2, [pc, #352]	@ (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 80057ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80057d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0308 	and.w	r3, r3, #8
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d005      	beq.n	80057ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057e0:	4b53      	ldr	r3, [pc, #332]	@ (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	4a52      	ldr	r2, [pc, #328]	@ (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 80057e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80057ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057ec:	4b50      	ldr	r3, [pc, #320]	@ (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	494d      	ldr	r1, [pc, #308]	@ (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d044      	beq.n	8005894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d107      	bne.n	8005822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005812:	4b47      	ldr	r3, [pc, #284]	@ (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d119      	bne.n	8005852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e07f      	b.n	8005922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	2b02      	cmp	r3, #2
 8005828:	d003      	beq.n	8005832 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800582e:	2b03      	cmp	r3, #3
 8005830:	d107      	bne.n	8005842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005832:	4b3f      	ldr	r3, [pc, #252]	@ (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d109      	bne.n	8005852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e06f      	b.n	8005922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005842:	4b3b      	ldr	r3, [pc, #236]	@ (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e067      	b.n	8005922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005852:	4b37      	ldr	r3, [pc, #220]	@ (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f023 0203 	bic.w	r2, r3, #3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	4934      	ldr	r1, [pc, #208]	@ (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 8005860:	4313      	orrs	r3, r2
 8005862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005864:	f7fc fcbe 	bl	80021e4 <HAL_GetTick>
 8005868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800586a:	e00a      	b.n	8005882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800586c:	f7fc fcba 	bl	80021e4 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800587a:	4293      	cmp	r3, r2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e04f      	b.n	8005922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005882:	4b2b      	ldr	r3, [pc, #172]	@ (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 020c 	and.w	r2, r3, #12
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	429a      	cmp	r2, r3
 8005892:	d1eb      	bne.n	800586c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005894:	4b25      	ldr	r3, [pc, #148]	@ (800592c <HAL_RCC_ClockConfig+0x1b8>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d20c      	bcs.n	80058bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a2:	4b22      	ldr	r3, [pc, #136]	@ (800592c <HAL_RCC_ClockConfig+0x1b8>)
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058aa:	4b20      	ldr	r3, [pc, #128]	@ (800592c <HAL_RCC_ClockConfig+0x1b8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d001      	beq.n	80058bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e032      	b.n	8005922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d008      	beq.n	80058da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058c8:	4b19      	ldr	r3, [pc, #100]	@ (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	4916      	ldr	r1, [pc, #88]	@ (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0308 	and.w	r3, r3, #8
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d009      	beq.n	80058fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058e6:	4b12      	ldr	r3, [pc, #72]	@ (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	490e      	ldr	r1, [pc, #56]	@ (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058fa:	f000 f821 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 80058fe:	4602      	mov	r2, r0
 8005900:	4b0b      	ldr	r3, [pc, #44]	@ (8005930 <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	091b      	lsrs	r3, r3, #4
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	490a      	ldr	r1, [pc, #40]	@ (8005934 <HAL_RCC_ClockConfig+0x1c0>)
 800590c:	5ccb      	ldrb	r3, [r1, r3]
 800590e:	fa22 f303 	lsr.w	r3, r2, r3
 8005912:	4a09      	ldr	r2, [pc, #36]	@ (8005938 <HAL_RCC_ClockConfig+0x1c4>)
 8005914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005916:	4b09      	ldr	r3, [pc, #36]	@ (800593c <HAL_RCC_ClockConfig+0x1c8>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f7fb fe10 	bl	8001540 <HAL_InitTick>

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	40023c00 	.word	0x40023c00
 8005930:	40023800 	.word	0x40023800
 8005934:	080089c0 	.word	0x080089c0
 8005938:	20000000 	.word	0x20000000
 800593c:	20000004 	.word	0x20000004

08005940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005944:	b094      	sub	sp, #80	@ 0x50
 8005946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005958:	4b79      	ldr	r3, [pc, #484]	@ (8005b40 <HAL_RCC_GetSysClockFreq+0x200>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f003 030c 	and.w	r3, r3, #12
 8005960:	2b08      	cmp	r3, #8
 8005962:	d00d      	beq.n	8005980 <HAL_RCC_GetSysClockFreq+0x40>
 8005964:	2b08      	cmp	r3, #8
 8005966:	f200 80e1 	bhi.w	8005b2c <HAL_RCC_GetSysClockFreq+0x1ec>
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <HAL_RCC_GetSysClockFreq+0x34>
 800596e:	2b04      	cmp	r3, #4
 8005970:	d003      	beq.n	800597a <HAL_RCC_GetSysClockFreq+0x3a>
 8005972:	e0db      	b.n	8005b2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005974:	4b73      	ldr	r3, [pc, #460]	@ (8005b44 <HAL_RCC_GetSysClockFreq+0x204>)
 8005976:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005978:	e0db      	b.n	8005b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800597a:	4b73      	ldr	r3, [pc, #460]	@ (8005b48 <HAL_RCC_GetSysClockFreq+0x208>)
 800597c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800597e:	e0d8      	b.n	8005b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005980:	4b6f      	ldr	r3, [pc, #444]	@ (8005b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005988:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800598a:	4b6d      	ldr	r3, [pc, #436]	@ (8005b40 <HAL_RCC_GetSysClockFreq+0x200>)
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d063      	beq.n	8005a5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005996:	4b6a      	ldr	r3, [pc, #424]	@ (8005b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	099b      	lsrs	r3, r3, #6
 800599c:	2200      	movs	r2, #0
 800599e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80059a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80059aa:	2300      	movs	r3, #0
 80059ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80059ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80059b2:	4622      	mov	r2, r4
 80059b4:	462b      	mov	r3, r5
 80059b6:	f04f 0000 	mov.w	r0, #0
 80059ba:	f04f 0100 	mov.w	r1, #0
 80059be:	0159      	lsls	r1, r3, #5
 80059c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059c4:	0150      	lsls	r0, r2, #5
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4621      	mov	r1, r4
 80059cc:	1a51      	subs	r1, r2, r1
 80059ce:	6139      	str	r1, [r7, #16]
 80059d0:	4629      	mov	r1, r5
 80059d2:	eb63 0301 	sbc.w	r3, r3, r1
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059e4:	4659      	mov	r1, fp
 80059e6:	018b      	lsls	r3, r1, #6
 80059e8:	4651      	mov	r1, sl
 80059ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059ee:	4651      	mov	r1, sl
 80059f0:	018a      	lsls	r2, r1, #6
 80059f2:	4651      	mov	r1, sl
 80059f4:	ebb2 0801 	subs.w	r8, r2, r1
 80059f8:	4659      	mov	r1, fp
 80059fa:	eb63 0901 	sbc.w	r9, r3, r1
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	f04f 0300 	mov.w	r3, #0
 8005a06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a12:	4690      	mov	r8, r2
 8005a14:	4699      	mov	r9, r3
 8005a16:	4623      	mov	r3, r4
 8005a18:	eb18 0303 	adds.w	r3, r8, r3
 8005a1c:	60bb      	str	r3, [r7, #8]
 8005a1e:	462b      	mov	r3, r5
 8005a20:	eb49 0303 	adc.w	r3, r9, r3
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	f04f 0200 	mov.w	r2, #0
 8005a2a:	f04f 0300 	mov.w	r3, #0
 8005a2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a32:	4629      	mov	r1, r5
 8005a34:	024b      	lsls	r3, r1, #9
 8005a36:	4621      	mov	r1, r4
 8005a38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	024a      	lsls	r2, r1, #9
 8005a40:	4610      	mov	r0, r2
 8005a42:	4619      	mov	r1, r3
 8005a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a46:	2200      	movs	r2, #0
 8005a48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a50:	f7fa fc1e 	bl	8000290 <__aeabi_uldivmod>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4613      	mov	r3, r2
 8005a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a5c:	e058      	b.n	8005b10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a5e:	4b38      	ldr	r3, [pc, #224]	@ (8005b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	099b      	lsrs	r3, r3, #6
 8005a64:	2200      	movs	r2, #0
 8005a66:	4618      	mov	r0, r3
 8005a68:	4611      	mov	r1, r2
 8005a6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a6e:	623b      	str	r3, [r7, #32]
 8005a70:	2300      	movs	r3, #0
 8005a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a78:	4642      	mov	r2, r8
 8005a7a:	464b      	mov	r3, r9
 8005a7c:	f04f 0000 	mov.w	r0, #0
 8005a80:	f04f 0100 	mov.w	r1, #0
 8005a84:	0159      	lsls	r1, r3, #5
 8005a86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a8a:	0150      	lsls	r0, r2, #5
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4641      	mov	r1, r8
 8005a92:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a96:	4649      	mov	r1, r9
 8005a98:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005aa8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005aac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ab0:	ebb2 040a 	subs.w	r4, r2, sl
 8005ab4:	eb63 050b 	sbc.w	r5, r3, fp
 8005ab8:	f04f 0200 	mov.w	r2, #0
 8005abc:	f04f 0300 	mov.w	r3, #0
 8005ac0:	00eb      	lsls	r3, r5, #3
 8005ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ac6:	00e2      	lsls	r2, r4, #3
 8005ac8:	4614      	mov	r4, r2
 8005aca:	461d      	mov	r5, r3
 8005acc:	4643      	mov	r3, r8
 8005ace:	18e3      	adds	r3, r4, r3
 8005ad0:	603b      	str	r3, [r7, #0]
 8005ad2:	464b      	mov	r3, r9
 8005ad4:	eb45 0303 	adc.w	r3, r5, r3
 8005ad8:	607b      	str	r3, [r7, #4]
 8005ada:	f04f 0200 	mov.w	r2, #0
 8005ade:	f04f 0300 	mov.w	r3, #0
 8005ae2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	028b      	lsls	r3, r1, #10
 8005aea:	4621      	mov	r1, r4
 8005aec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005af0:	4621      	mov	r1, r4
 8005af2:	028a      	lsls	r2, r1, #10
 8005af4:	4610      	mov	r0, r2
 8005af6:	4619      	mov	r1, r3
 8005af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005afa:	2200      	movs	r2, #0
 8005afc:	61bb      	str	r3, [r7, #24]
 8005afe:	61fa      	str	r2, [r7, #28]
 8005b00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b04:	f7fa fbc4 	bl	8000290 <__aeabi_uldivmod>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005b10:	4b0b      	ldr	r3, [pc, #44]	@ (8005b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	0c1b      	lsrs	r3, r3, #16
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005b20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b2a:	e002      	b.n	8005b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b2c:	4b05      	ldr	r3, [pc, #20]	@ (8005b44 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3750      	adds	r7, #80	@ 0x50
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b3e:	bf00      	nop
 8005b40:	40023800 	.word	0x40023800
 8005b44:	00f42400 	.word	0x00f42400
 8005b48:	007a1200 	.word	0x007a1200

08005b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b50:	4b03      	ldr	r3, [pc, #12]	@ (8005b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b52:	681b      	ldr	r3, [r3, #0]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	20000000 	.word	0x20000000

08005b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b68:	f7ff fff0 	bl	8005b4c <HAL_RCC_GetHCLKFreq>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	4b05      	ldr	r3, [pc, #20]	@ (8005b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	0a9b      	lsrs	r3, r3, #10
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	4903      	ldr	r1, [pc, #12]	@ (8005b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b7a:	5ccb      	ldrb	r3, [r1, r3]
 8005b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	40023800 	.word	0x40023800
 8005b88:	080089d0 	.word	0x080089d0

08005b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b90:	f7ff ffdc 	bl	8005b4c <HAL_RCC_GetHCLKFreq>
 8005b94:	4602      	mov	r2, r0
 8005b96:	4b05      	ldr	r3, [pc, #20]	@ (8005bac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	0b5b      	lsrs	r3, r3, #13
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	4903      	ldr	r1, [pc, #12]	@ (8005bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ba2:	5ccb      	ldrb	r3, [r1, r3]
 8005ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40023800 	.word	0x40023800
 8005bb0:	080089d0 	.word	0x080089d0

08005bb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	220f      	movs	r2, #15
 8005bc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005bc4:	4b12      	ldr	r3, [pc, #72]	@ (8005c10 <HAL_RCC_GetClockConfig+0x5c>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f003 0203 	and.w	r2, r3, #3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8005c10 <HAL_RCC_GetClockConfig+0x5c>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8005c10 <HAL_RCC_GetClockConfig+0x5c>)
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005be8:	4b09      	ldr	r3, [pc, #36]	@ (8005c10 <HAL_RCC_GetClockConfig+0x5c>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	08db      	lsrs	r3, r3, #3
 8005bee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005bf6:	4b07      	ldr	r3, [pc, #28]	@ (8005c14 <HAL_RCC_GetClockConfig+0x60>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 020f 	and.w	r2, r3, #15
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	601a      	str	r2, [r3, #0]
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	40023800 	.word	0x40023800
 8005c14:	40023c00 	.word	0x40023c00

08005c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c20:	2300      	movs	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10b      	bne.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d105      	bne.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d075      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c4c:	4b91      	ldr	r3, [pc, #580]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c52:	f7fc fac7 	bl	80021e4 <HAL_GetTick>
 8005c56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c58:	e008      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c5a:	f7fc fac3 	bl	80021e4 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d901      	bls.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e189      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c6c:	4b8a      	ldr	r3, [pc, #552]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1f0      	bne.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d009      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	019a      	lsls	r2, r3, #6
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	071b      	lsls	r3, r3, #28
 8005c90:	4981      	ldr	r1, [pc, #516]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d01f      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ca4:	4b7c      	ldr	r3, [pc, #496]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005caa:	0f1b      	lsrs	r3, r3, #28
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	019a      	lsls	r2, r3, #6
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	061b      	lsls	r3, r3, #24
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	071b      	lsls	r3, r3, #28
 8005cc4:	4974      	ldr	r1, [pc, #464]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005ccc:	4b72      	ldr	r3, [pc, #456]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cd2:	f023 021f 	bic.w	r2, r3, #31
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	496e      	ldr	r1, [pc, #440]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00d      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	019a      	lsls	r2, r3, #6
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	061b      	lsls	r3, r3, #24
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	071b      	lsls	r3, r3, #28
 8005d04:	4964      	ldr	r1, [pc, #400]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d0c:	4b61      	ldr	r3, [pc, #388]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005d0e:	2201      	movs	r2, #1
 8005d10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d12:	f7fc fa67 	bl	80021e4 <HAL_GetTick>
 8005d16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d18:	e008      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d1a:	f7fc fa63 	bl	80021e4 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e129      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d2c:	4b5a      	ldr	r3, [pc, #360]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0f0      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d105      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d079      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005d50:	4b52      	ldr	r3, [pc, #328]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d56:	f7fc fa45 	bl	80021e4 <HAL_GetTick>
 8005d5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d5c:	e008      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d5e:	f7fc fa41 	bl	80021e4 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d901      	bls.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e107      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d70:	4b49      	ldr	r3, [pc, #292]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d7c:	d0ef      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0304 	and.w	r3, r3, #4
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d020      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d8a:	4b43      	ldr	r3, [pc, #268]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d90:	0f1b      	lsrs	r3, r3, #28
 8005d92:	f003 0307 	and.w	r3, r3, #7
 8005d96:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	019a      	lsls	r2, r3, #6
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	061b      	lsls	r3, r3, #24
 8005da4:	431a      	orrs	r2, r3
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	071b      	lsls	r3, r3, #28
 8005daa:	493b      	ldr	r1, [pc, #236]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005db2:	4b39      	ldr	r3, [pc, #228]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005db8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	021b      	lsls	r3, r3, #8
 8005dc4:	4934      	ldr	r1, [pc, #208]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01e      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005dd8:	4b2f      	ldr	r3, [pc, #188]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dde:	0e1b      	lsrs	r3, r3, #24
 8005de0:	f003 030f 	and.w	r3, r3, #15
 8005de4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	019a      	lsls	r2, r3, #6
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	061b      	lsls	r3, r3, #24
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	071b      	lsls	r3, r3, #28
 8005df8:	4927      	ldr	r1, [pc, #156]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005e00:	4b25      	ldr	r3, [pc, #148]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0e:	4922      	ldr	r1, [pc, #136]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e16:	4b21      	ldr	r3, [pc, #132]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005e18:	2201      	movs	r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e1c:	f7fc f9e2 	bl	80021e4 <HAL_GetTick>
 8005e20:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e22:	e008      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e24:	f7fc f9de 	bl	80021e4 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e0a4      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e36:	4b18      	ldr	r3, [pc, #96]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e42:	d1ef      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 808b 	beq.w	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	4b10      	ldr	r3, [pc, #64]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5a:	4a0f      	ldr	r2, [pc, #60]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e62:	4b0d      	ldr	r3, [pc, #52]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a0b      	ldr	r2, [pc, #44]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e7a:	f7fc f9b3 	bl	80021e4 <HAL_GetTick>
 8005e7e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005e80:	e010      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e82:	f7fc f9af 	bl	80021e4 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d909      	bls.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e075      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005e94:	42470068 	.word	0x42470068
 8005e98:	40023800 	.word	0x40023800
 8005e9c:	42470070 	.word	0x42470070
 8005ea0:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005ea4:	4b38      	ldr	r3, [pc, #224]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0e8      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005eb0:	4b36      	ldr	r3, [pc, #216]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eb8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d02f      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d028      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ece:	4b2f      	ldr	r3, [pc, #188]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ed2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ed6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005eda:	2201      	movs	r2, #1
 8005edc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ede:	4b2c      	ldr	r3, [pc, #176]	@ (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005ee4:	4a29      	ldr	r2, [pc, #164]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005eea:	4b28      	ldr	r3, [pc, #160]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d114      	bne.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005ef6:	f7fc f975 	bl	80021e4 <HAL_GetTick>
 8005efa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005efc:	e00a      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005efe:	f7fc f971 	bl	80021e4 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d901      	bls.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e035      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f14:	4b1d      	ldr	r3, [pc, #116]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f18:	f003 0302 	and.w	r3, r3, #2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0ee      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f2c:	d10d      	bne.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005f2e:	4b17      	ldr	r3, [pc, #92]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005f3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f42:	4912      	ldr	r1, [pc, #72]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	608b      	str	r3, [r1, #8]
 8005f48:	e005      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005f4a:	4b10      	ldr	r3, [pc, #64]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	4a0f      	ldr	r2, [pc, #60]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f50:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005f54:	6093      	str	r3, [r2, #8]
 8005f56:	4b0d      	ldr	r3, [pc, #52]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f58:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f62:	490a      	ldr	r1, [pc, #40]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d004      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005f7a:	4b06      	ldr	r3, [pc, #24]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005f7c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3718      	adds	r7, #24
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	40007000 	.word	0x40007000
 8005f8c:	40023800 	.word	0x40023800
 8005f90:	42470e40 	.word	0x42470e40
 8005f94:	424711e0 	.word	0x424711e0

08005f98 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e025      	b.n	8005ff8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d106      	bne.n	8005fc6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7fb fab3 	bl	800152c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2202      	movs	r2, #2
 8005fca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	4610      	mov	r0, r2
 8005fda:	f000 ffd3 	bl	8006f84 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	6839      	ldr	r1, [r7, #0]
 8005fea:	f001 f828 	bl	800703e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e07b      	b.n	800610a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006016:	2b00      	cmp	r3, #0
 8006018:	d108      	bne.n	800602c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006022:	d009      	beq.n	8006038 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	61da      	str	r2, [r3, #28]
 800602a:	e005      	b.n	8006038 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d106      	bne.n	8006058 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7fb f8c8 	bl	80011e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800606e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006080:	431a      	orrs	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800608a:	431a      	orrs	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	431a      	orrs	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060a8:	431a      	orrs	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060b2:	431a      	orrs	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060bc:	ea42 0103 	orr.w	r1, r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	0c1b      	lsrs	r3, r3, #16
 80060d6:	f003 0104 	and.w	r1, r3, #4
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060de:	f003 0210 	and.w	r2, r3, #16
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69da      	ldr	r2, [r3, #28]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e041      	b.n	80061a8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	d106      	bne.n	800613e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7fb f89d 	bl	8001278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2202      	movs	r2, #2
 8006142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3304      	adds	r3, #4
 800614e:	4619      	mov	r1, r3
 8006150:	4610      	mov	r0, r2
 8006152:	f000 fa7d 	bl	8006650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d001      	beq.n	80061c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e04e      	b.n	8006266 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0201 	orr.w	r2, r2, #1
 80061de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a23      	ldr	r2, [pc, #140]	@ (8006274 <HAL_TIM_Base_Start_IT+0xc4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d022      	beq.n	8006230 <HAL_TIM_Base_Start_IT+0x80>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f2:	d01d      	beq.n	8006230 <HAL_TIM_Base_Start_IT+0x80>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a1f      	ldr	r2, [pc, #124]	@ (8006278 <HAL_TIM_Base_Start_IT+0xc8>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d018      	beq.n	8006230 <HAL_TIM_Base_Start_IT+0x80>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a1e      	ldr	r2, [pc, #120]	@ (800627c <HAL_TIM_Base_Start_IT+0xcc>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d013      	beq.n	8006230 <HAL_TIM_Base_Start_IT+0x80>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a1c      	ldr	r2, [pc, #112]	@ (8006280 <HAL_TIM_Base_Start_IT+0xd0>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d00e      	beq.n	8006230 <HAL_TIM_Base_Start_IT+0x80>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a1b      	ldr	r2, [pc, #108]	@ (8006284 <HAL_TIM_Base_Start_IT+0xd4>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d009      	beq.n	8006230 <HAL_TIM_Base_Start_IT+0x80>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a19      	ldr	r2, [pc, #100]	@ (8006288 <HAL_TIM_Base_Start_IT+0xd8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d004      	beq.n	8006230 <HAL_TIM_Base_Start_IT+0x80>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a18      	ldr	r2, [pc, #96]	@ (800628c <HAL_TIM_Base_Start_IT+0xdc>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d111      	bne.n	8006254 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2b06      	cmp	r3, #6
 8006240:	d010      	beq.n	8006264 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f042 0201 	orr.w	r2, r2, #1
 8006250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006252:	e007      	b.n	8006264 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f042 0201 	orr.w	r2, r2, #1
 8006262:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40010000 	.word	0x40010000
 8006278:	40000400 	.word	0x40000400
 800627c:	40000800 	.word	0x40000800
 8006280:	40000c00 	.word	0x40000c00
 8006284:	40010400 	.word	0x40010400
 8006288:	40014000 	.word	0x40014000
 800628c:	40001800 	.word	0x40001800

08006290 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d020      	beq.n	80062f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d01b      	beq.n	80062f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f06f 0202 	mvn.w	r2, #2
 80062c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f999 	bl	8006612 <HAL_TIM_IC_CaptureCallback>
 80062e0:	e005      	b.n	80062ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f98b 	bl	80065fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 f99c 	bl	8006626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f003 0304 	and.w	r3, r3, #4
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d020      	beq.n	8006340 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b00      	cmp	r3, #0
 8006306:	d01b      	beq.n	8006340 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f06f 0204 	mvn.w	r2, #4
 8006310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2202      	movs	r2, #2
 8006316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f973 	bl	8006612 <HAL_TIM_IC_CaptureCallback>
 800632c:	e005      	b.n	800633a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f965 	bl	80065fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f976 	bl	8006626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	f003 0308 	and.w	r3, r3, #8
 8006346:	2b00      	cmp	r3, #0
 8006348:	d020      	beq.n	800638c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f003 0308 	and.w	r3, r3, #8
 8006350:	2b00      	cmp	r3, #0
 8006352:	d01b      	beq.n	800638c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f06f 0208 	mvn.w	r2, #8
 800635c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2204      	movs	r2, #4
 8006362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	f003 0303 	and.w	r3, r3, #3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f94d 	bl	8006612 <HAL_TIM_IC_CaptureCallback>
 8006378:	e005      	b.n	8006386 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f93f 	bl	80065fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f950 	bl	8006626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	f003 0310 	and.w	r3, r3, #16
 8006392:	2b00      	cmp	r3, #0
 8006394:	d020      	beq.n	80063d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f003 0310 	and.w	r3, r3, #16
 800639c:	2b00      	cmp	r3, #0
 800639e:	d01b      	beq.n	80063d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f06f 0210 	mvn.w	r2, #16
 80063a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2208      	movs	r2, #8
 80063ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f927 	bl	8006612 <HAL_TIM_IC_CaptureCallback>
 80063c4:	e005      	b.n	80063d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f919 	bl	80065fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f92a 	bl	8006626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00c      	beq.n	80063fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d007      	beq.n	80063fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f06f 0201 	mvn.w	r2, #1
 80063f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fa fcd2 	bl	8000da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00c      	beq.n	8006420 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800640c:	2b00      	cmp	r3, #0
 800640e:	d007      	beq.n	8006420 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fae4 	bl	80069e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00c      	beq.n	8006444 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006430:	2b00      	cmp	r3, #0
 8006432:	d007      	beq.n	8006444 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800643c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f8fb 	bl	800663a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f003 0320 	and.w	r3, r3, #32
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00c      	beq.n	8006468 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b00      	cmp	r3, #0
 8006456:	d007      	beq.n	8006468 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f06f 0220 	mvn.w	r2, #32
 8006460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fab6 	bl	80069d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006468:	bf00      	nop
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <HAL_TIM_ConfigClockSource+0x1c>
 8006488:	2302      	movs	r3, #2
 800648a:	e0b4      	b.n	80065f6 <HAL_TIM_ConfigClockSource+0x186>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80064aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064c4:	d03e      	beq.n	8006544 <HAL_TIM_ConfigClockSource+0xd4>
 80064c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064ca:	f200 8087 	bhi.w	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 80064ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064d2:	f000 8086 	beq.w	80065e2 <HAL_TIM_ConfigClockSource+0x172>
 80064d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064da:	d87f      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 80064dc:	2b70      	cmp	r3, #112	@ 0x70
 80064de:	d01a      	beq.n	8006516 <HAL_TIM_ConfigClockSource+0xa6>
 80064e0:	2b70      	cmp	r3, #112	@ 0x70
 80064e2:	d87b      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 80064e4:	2b60      	cmp	r3, #96	@ 0x60
 80064e6:	d050      	beq.n	800658a <HAL_TIM_ConfigClockSource+0x11a>
 80064e8:	2b60      	cmp	r3, #96	@ 0x60
 80064ea:	d877      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 80064ec:	2b50      	cmp	r3, #80	@ 0x50
 80064ee:	d03c      	beq.n	800656a <HAL_TIM_ConfigClockSource+0xfa>
 80064f0:	2b50      	cmp	r3, #80	@ 0x50
 80064f2:	d873      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 80064f4:	2b40      	cmp	r3, #64	@ 0x40
 80064f6:	d058      	beq.n	80065aa <HAL_TIM_ConfigClockSource+0x13a>
 80064f8:	2b40      	cmp	r3, #64	@ 0x40
 80064fa:	d86f      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 80064fc:	2b30      	cmp	r3, #48	@ 0x30
 80064fe:	d064      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x15a>
 8006500:	2b30      	cmp	r3, #48	@ 0x30
 8006502:	d86b      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 8006504:	2b20      	cmp	r3, #32
 8006506:	d060      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x15a>
 8006508:	2b20      	cmp	r3, #32
 800650a:	d867      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 800650c:	2b00      	cmp	r3, #0
 800650e:	d05c      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x15a>
 8006510:	2b10      	cmp	r3, #16
 8006512:	d05a      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x15a>
 8006514:	e062      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006526:	f000 f9b9 	bl	800689c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006538:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	609a      	str	r2, [r3, #8]
      break;
 8006542:	e04f      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006554:	f000 f9a2 	bl	800689c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006566:	609a      	str	r2, [r3, #8]
      break;
 8006568:	e03c      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006576:	461a      	mov	r2, r3
 8006578:	f000 f916 	bl	80067a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2150      	movs	r1, #80	@ 0x50
 8006582:	4618      	mov	r0, r3
 8006584:	f000 f96f 	bl	8006866 <TIM_ITRx_SetConfig>
      break;
 8006588:	e02c      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006596:	461a      	mov	r2, r3
 8006598:	f000 f935 	bl	8006806 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2160      	movs	r1, #96	@ 0x60
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 f95f 	bl	8006866 <TIM_ITRx_SetConfig>
      break;
 80065a8:	e01c      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065b6:	461a      	mov	r2, r3
 80065b8:	f000 f8f6 	bl	80067a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2140      	movs	r1, #64	@ 0x40
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 f94f 	bl	8006866 <TIM_ITRx_SetConfig>
      break;
 80065c8:	e00c      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4619      	mov	r1, r3
 80065d4:	4610      	mov	r0, r2
 80065d6:	f000 f946 	bl	8006866 <TIM_ITRx_SetConfig>
      break;
 80065da:	e003      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	73fb      	strb	r3, [r7, #15]
      break;
 80065e0:	e000      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006606:	bf00      	nop
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006626:	b480      	push	{r7}
 8006628:	b083      	sub	sp, #12
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800662e:	bf00      	nop
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
	...

08006650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a46      	ldr	r2, [pc, #280]	@ (800677c <TIM_Base_SetConfig+0x12c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d013      	beq.n	8006690 <TIM_Base_SetConfig+0x40>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800666e:	d00f      	beq.n	8006690 <TIM_Base_SetConfig+0x40>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a43      	ldr	r2, [pc, #268]	@ (8006780 <TIM_Base_SetConfig+0x130>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d00b      	beq.n	8006690 <TIM_Base_SetConfig+0x40>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a42      	ldr	r2, [pc, #264]	@ (8006784 <TIM_Base_SetConfig+0x134>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d007      	beq.n	8006690 <TIM_Base_SetConfig+0x40>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a41      	ldr	r2, [pc, #260]	@ (8006788 <TIM_Base_SetConfig+0x138>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d003      	beq.n	8006690 <TIM_Base_SetConfig+0x40>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a40      	ldr	r2, [pc, #256]	@ (800678c <TIM_Base_SetConfig+0x13c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d108      	bne.n	80066a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	4313      	orrs	r3, r2
 80066a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a35      	ldr	r2, [pc, #212]	@ (800677c <TIM_Base_SetConfig+0x12c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d02b      	beq.n	8006702 <TIM_Base_SetConfig+0xb2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066b0:	d027      	beq.n	8006702 <TIM_Base_SetConfig+0xb2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a32      	ldr	r2, [pc, #200]	@ (8006780 <TIM_Base_SetConfig+0x130>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d023      	beq.n	8006702 <TIM_Base_SetConfig+0xb2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a31      	ldr	r2, [pc, #196]	@ (8006784 <TIM_Base_SetConfig+0x134>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d01f      	beq.n	8006702 <TIM_Base_SetConfig+0xb2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a30      	ldr	r2, [pc, #192]	@ (8006788 <TIM_Base_SetConfig+0x138>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d01b      	beq.n	8006702 <TIM_Base_SetConfig+0xb2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a2f      	ldr	r2, [pc, #188]	@ (800678c <TIM_Base_SetConfig+0x13c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d017      	beq.n	8006702 <TIM_Base_SetConfig+0xb2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006790 <TIM_Base_SetConfig+0x140>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d013      	beq.n	8006702 <TIM_Base_SetConfig+0xb2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006794 <TIM_Base_SetConfig+0x144>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d00f      	beq.n	8006702 <TIM_Base_SetConfig+0xb2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a2c      	ldr	r2, [pc, #176]	@ (8006798 <TIM_Base_SetConfig+0x148>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d00b      	beq.n	8006702 <TIM_Base_SetConfig+0xb2>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a2b      	ldr	r2, [pc, #172]	@ (800679c <TIM_Base_SetConfig+0x14c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d007      	beq.n	8006702 <TIM_Base_SetConfig+0xb2>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a2a      	ldr	r2, [pc, #168]	@ (80067a0 <TIM_Base_SetConfig+0x150>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d003      	beq.n	8006702 <TIM_Base_SetConfig+0xb2>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a29      	ldr	r2, [pc, #164]	@ (80067a4 <TIM_Base_SetConfig+0x154>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d108      	bne.n	8006714 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	4313      	orrs	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a10      	ldr	r2, [pc, #64]	@ (800677c <TIM_Base_SetConfig+0x12c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d003      	beq.n	8006748 <TIM_Base_SetConfig+0xf8>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a12      	ldr	r2, [pc, #72]	@ (800678c <TIM_Base_SetConfig+0x13c>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d103      	bne.n	8006750 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	691a      	ldr	r2, [r3, #16]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b01      	cmp	r3, #1
 8006760:	d105      	bne.n	800676e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	f023 0201 	bic.w	r2, r3, #1
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	611a      	str	r2, [r3, #16]
  }
}
 800676e:	bf00      	nop
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	40010000 	.word	0x40010000
 8006780:	40000400 	.word	0x40000400
 8006784:	40000800 	.word	0x40000800
 8006788:	40000c00 	.word	0x40000c00
 800678c:	40010400 	.word	0x40010400
 8006790:	40014000 	.word	0x40014000
 8006794:	40014400 	.word	0x40014400
 8006798:	40014800 	.word	0x40014800
 800679c:	40001800 	.word	0x40001800
 80067a0:	40001c00 	.word	0x40001c00
 80067a4:	40002000 	.word	0x40002000

080067a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	f023 0201 	bic.w	r2, r3, #1
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	011b      	lsls	r3, r3, #4
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	4313      	orrs	r3, r2
 80067dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f023 030a 	bic.w	r3, r3, #10
 80067e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	621a      	str	r2, [r3, #32]
}
 80067fa:	bf00      	nop
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006806:	b480      	push	{r7}
 8006808:	b087      	sub	sp, #28
 800680a:	af00      	add	r7, sp, #0
 800680c:	60f8      	str	r0, [r7, #12]
 800680e:	60b9      	str	r1, [r7, #8]
 8006810:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	f023 0210 	bic.w	r2, r3, #16
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006830:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	031b      	lsls	r3, r3, #12
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	4313      	orrs	r3, r2
 800683a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006842:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	011b      	lsls	r3, r3, #4
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	4313      	orrs	r3, r2
 800684c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	621a      	str	r2, [r3, #32]
}
 800685a:	bf00      	nop
 800685c:	371c      	adds	r7, #28
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006866:	b480      	push	{r7}
 8006868:	b085      	sub	sp, #20
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800687c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4313      	orrs	r3, r2
 8006884:	f043 0307 	orr.w	r3, r3, #7
 8006888:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	609a      	str	r2, [r3, #8]
}
 8006890:	bf00      	nop
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
 80068a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	021a      	lsls	r2, r3, #8
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	431a      	orrs	r2, r3
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	609a      	str	r2, [r3, #8]
}
 80068d0:	bf00      	nop
 80068d2:	371c      	adds	r7, #28
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068f0:	2302      	movs	r3, #2
 80068f2:	e05a      	b.n	80069aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800691a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a21      	ldr	r2, [pc, #132]	@ (80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d022      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006940:	d01d      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a1d      	ldr	r2, [pc, #116]	@ (80069bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d018      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a1b      	ldr	r2, [pc, #108]	@ (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d013      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a1a      	ldr	r2, [pc, #104]	@ (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d00e      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a18      	ldr	r2, [pc, #96]	@ (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d009      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a17      	ldr	r2, [pc, #92]	@ (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d004      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a15      	ldr	r2, [pc, #84]	@ (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d10c      	bne.n	8006998 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	4313      	orrs	r3, r2
 800698e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	40010000 	.word	0x40010000
 80069bc:	40000400 	.word	0x40000400
 80069c0:	40000800 	.word	0x40000800
 80069c4:	40000c00 	.word	0x40000c00
 80069c8:	40010400 	.word	0x40010400
 80069cc:	40014000 	.word	0x40014000
 80069d0:	40001800 	.word	0x40001800

080069d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e042      	b.n	8006a94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d106      	bne.n	8006a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7fa fc4a 	bl	80012bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2224      	movs	r2, #36	@ 0x24
 8006a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f82b 	bl	8006a9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	691a      	ldr	r2, [r3, #16]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	695a      	ldr	r2, [r3, #20]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006aa0:	b0c0      	sub	sp, #256	@ 0x100
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ab8:	68d9      	ldr	r1, [r3, #12]
 8006aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	ea40 0301 	orr.w	r3, r0, r1
 8006ac4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	431a      	orrs	r2, r3
 8006adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ae0:	69db      	ldr	r3, [r3, #28]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006af4:	f021 010c 	bic.w	r1, r1, #12
 8006af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b02:	430b      	orrs	r3, r1
 8006b04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b16:	6999      	ldr	r1, [r3, #24]
 8006b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	ea40 0301 	orr.w	r3, r0, r1
 8006b22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	4b8f      	ldr	r3, [pc, #572]	@ (8006d68 <UART_SetConfig+0x2cc>)
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d005      	beq.n	8006b3c <UART_SetConfig+0xa0>
 8006b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	4b8d      	ldr	r3, [pc, #564]	@ (8006d6c <UART_SetConfig+0x2d0>)
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d104      	bne.n	8006b46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b3c:	f7ff f826 	bl	8005b8c <HAL_RCC_GetPCLK2Freq>
 8006b40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006b44:	e003      	b.n	8006b4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b46:	f7ff f80d 	bl	8005b64 <HAL_RCC_GetPCLK1Freq>
 8006b4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b58:	f040 810c 	bne.w	8006d74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b60:	2200      	movs	r2, #0
 8006b62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006b66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006b6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006b6e:	4622      	mov	r2, r4
 8006b70:	462b      	mov	r3, r5
 8006b72:	1891      	adds	r1, r2, r2
 8006b74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006b76:	415b      	adcs	r3, r3
 8006b78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006b7e:	4621      	mov	r1, r4
 8006b80:	eb12 0801 	adds.w	r8, r2, r1
 8006b84:	4629      	mov	r1, r5
 8006b86:	eb43 0901 	adc.w	r9, r3, r1
 8006b8a:	f04f 0200 	mov.w	r2, #0
 8006b8e:	f04f 0300 	mov.w	r3, #0
 8006b92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b9e:	4690      	mov	r8, r2
 8006ba0:	4699      	mov	r9, r3
 8006ba2:	4623      	mov	r3, r4
 8006ba4:	eb18 0303 	adds.w	r3, r8, r3
 8006ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006bac:	462b      	mov	r3, r5
 8006bae:	eb49 0303 	adc.w	r3, r9, r3
 8006bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006bc2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006bc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006bca:	460b      	mov	r3, r1
 8006bcc:	18db      	adds	r3, r3, r3
 8006bce:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	eb42 0303 	adc.w	r3, r2, r3
 8006bd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006bdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006be0:	f7f9 fb56 	bl	8000290 <__aeabi_uldivmod>
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	4b61      	ldr	r3, [pc, #388]	@ (8006d70 <UART_SetConfig+0x2d4>)
 8006bea:	fba3 2302 	umull	r2, r3, r3, r2
 8006bee:	095b      	lsrs	r3, r3, #5
 8006bf0:	011c      	lsls	r4, r3, #4
 8006bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006bfc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006c00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006c04:	4642      	mov	r2, r8
 8006c06:	464b      	mov	r3, r9
 8006c08:	1891      	adds	r1, r2, r2
 8006c0a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006c0c:	415b      	adcs	r3, r3
 8006c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006c14:	4641      	mov	r1, r8
 8006c16:	eb12 0a01 	adds.w	sl, r2, r1
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	eb43 0b01 	adc.w	fp, r3, r1
 8006c20:	f04f 0200 	mov.w	r2, #0
 8006c24:	f04f 0300 	mov.w	r3, #0
 8006c28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c34:	4692      	mov	sl, r2
 8006c36:	469b      	mov	fp, r3
 8006c38:	4643      	mov	r3, r8
 8006c3a:	eb1a 0303 	adds.w	r3, sl, r3
 8006c3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c42:	464b      	mov	r3, r9
 8006c44:	eb4b 0303 	adc.w	r3, fp, r3
 8006c48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c58:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006c5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006c60:	460b      	mov	r3, r1
 8006c62:	18db      	adds	r3, r3, r3
 8006c64:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c66:	4613      	mov	r3, r2
 8006c68:	eb42 0303 	adc.w	r3, r2, r3
 8006c6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006c72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006c76:	f7f9 fb0b 	bl	8000290 <__aeabi_uldivmod>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4611      	mov	r1, r2
 8006c80:	4b3b      	ldr	r3, [pc, #236]	@ (8006d70 <UART_SetConfig+0x2d4>)
 8006c82:	fba3 2301 	umull	r2, r3, r3, r1
 8006c86:	095b      	lsrs	r3, r3, #5
 8006c88:	2264      	movs	r2, #100	@ 0x64
 8006c8a:	fb02 f303 	mul.w	r3, r2, r3
 8006c8e:	1acb      	subs	r3, r1, r3
 8006c90:	00db      	lsls	r3, r3, #3
 8006c92:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006c96:	4b36      	ldr	r3, [pc, #216]	@ (8006d70 <UART_SetConfig+0x2d4>)
 8006c98:	fba3 2302 	umull	r2, r3, r3, r2
 8006c9c:	095b      	lsrs	r3, r3, #5
 8006c9e:	005b      	lsls	r3, r3, #1
 8006ca0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006ca4:	441c      	add	r4, r3
 8006ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006caa:	2200      	movs	r2, #0
 8006cac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006cb0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006cb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006cb8:	4642      	mov	r2, r8
 8006cba:	464b      	mov	r3, r9
 8006cbc:	1891      	adds	r1, r2, r2
 8006cbe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006cc0:	415b      	adcs	r3, r3
 8006cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006cc8:	4641      	mov	r1, r8
 8006cca:	1851      	adds	r1, r2, r1
 8006ccc:	6339      	str	r1, [r7, #48]	@ 0x30
 8006cce:	4649      	mov	r1, r9
 8006cd0:	414b      	adcs	r3, r1
 8006cd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cd4:	f04f 0200 	mov.w	r2, #0
 8006cd8:	f04f 0300 	mov.w	r3, #0
 8006cdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006ce0:	4659      	mov	r1, fp
 8006ce2:	00cb      	lsls	r3, r1, #3
 8006ce4:	4651      	mov	r1, sl
 8006ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cea:	4651      	mov	r1, sl
 8006cec:	00ca      	lsls	r2, r1, #3
 8006cee:	4610      	mov	r0, r2
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	4642      	mov	r2, r8
 8006cf6:	189b      	adds	r3, r3, r2
 8006cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	460a      	mov	r2, r1
 8006d00:	eb42 0303 	adc.w	r3, r2, r3
 8006d04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d14:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006d18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	18db      	adds	r3, r3, r3
 8006d20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d22:	4613      	mov	r3, r2
 8006d24:	eb42 0303 	adc.w	r3, r2, r3
 8006d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006d32:	f7f9 faad 	bl	8000290 <__aeabi_uldivmod>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d70 <UART_SetConfig+0x2d4>)
 8006d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d40:	095b      	lsrs	r3, r3, #5
 8006d42:	2164      	movs	r1, #100	@ 0x64
 8006d44:	fb01 f303 	mul.w	r3, r1, r3
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	00db      	lsls	r3, r3, #3
 8006d4c:	3332      	adds	r3, #50	@ 0x32
 8006d4e:	4a08      	ldr	r2, [pc, #32]	@ (8006d70 <UART_SetConfig+0x2d4>)
 8006d50:	fba2 2303 	umull	r2, r3, r2, r3
 8006d54:	095b      	lsrs	r3, r3, #5
 8006d56:	f003 0207 	and.w	r2, r3, #7
 8006d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4422      	add	r2, r4
 8006d62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d64:	e106      	b.n	8006f74 <UART_SetConfig+0x4d8>
 8006d66:	bf00      	nop
 8006d68:	40011000 	.word	0x40011000
 8006d6c:	40011400 	.word	0x40011400
 8006d70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d7e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006d82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006d86:	4642      	mov	r2, r8
 8006d88:	464b      	mov	r3, r9
 8006d8a:	1891      	adds	r1, r2, r2
 8006d8c:	6239      	str	r1, [r7, #32]
 8006d8e:	415b      	adcs	r3, r3
 8006d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d96:	4641      	mov	r1, r8
 8006d98:	1854      	adds	r4, r2, r1
 8006d9a:	4649      	mov	r1, r9
 8006d9c:	eb43 0501 	adc.w	r5, r3, r1
 8006da0:	f04f 0200 	mov.w	r2, #0
 8006da4:	f04f 0300 	mov.w	r3, #0
 8006da8:	00eb      	lsls	r3, r5, #3
 8006daa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dae:	00e2      	lsls	r2, r4, #3
 8006db0:	4614      	mov	r4, r2
 8006db2:	461d      	mov	r5, r3
 8006db4:	4643      	mov	r3, r8
 8006db6:	18e3      	adds	r3, r4, r3
 8006db8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006dbc:	464b      	mov	r3, r9
 8006dbe:	eb45 0303 	adc.w	r3, r5, r3
 8006dc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006dd2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006dd6:	f04f 0200 	mov.w	r2, #0
 8006dda:	f04f 0300 	mov.w	r3, #0
 8006dde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006de2:	4629      	mov	r1, r5
 8006de4:	008b      	lsls	r3, r1, #2
 8006de6:	4621      	mov	r1, r4
 8006de8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dec:	4621      	mov	r1, r4
 8006dee:	008a      	lsls	r2, r1, #2
 8006df0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006df4:	f7f9 fa4c 	bl	8000290 <__aeabi_uldivmod>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	4b60      	ldr	r3, [pc, #384]	@ (8006f80 <UART_SetConfig+0x4e4>)
 8006dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8006e02:	095b      	lsrs	r3, r3, #5
 8006e04:	011c      	lsls	r4, r3, #4
 8006e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006e14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006e18:	4642      	mov	r2, r8
 8006e1a:	464b      	mov	r3, r9
 8006e1c:	1891      	adds	r1, r2, r2
 8006e1e:	61b9      	str	r1, [r7, #24]
 8006e20:	415b      	adcs	r3, r3
 8006e22:	61fb      	str	r3, [r7, #28]
 8006e24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e28:	4641      	mov	r1, r8
 8006e2a:	1851      	adds	r1, r2, r1
 8006e2c:	6139      	str	r1, [r7, #16]
 8006e2e:	4649      	mov	r1, r9
 8006e30:	414b      	adcs	r3, r1
 8006e32:	617b      	str	r3, [r7, #20]
 8006e34:	f04f 0200 	mov.w	r2, #0
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e40:	4659      	mov	r1, fp
 8006e42:	00cb      	lsls	r3, r1, #3
 8006e44:	4651      	mov	r1, sl
 8006e46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e4a:	4651      	mov	r1, sl
 8006e4c:	00ca      	lsls	r2, r1, #3
 8006e4e:	4610      	mov	r0, r2
 8006e50:	4619      	mov	r1, r3
 8006e52:	4603      	mov	r3, r0
 8006e54:	4642      	mov	r2, r8
 8006e56:	189b      	adds	r3, r3, r2
 8006e58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e5c:	464b      	mov	r3, r9
 8006e5e:	460a      	mov	r2, r1
 8006e60:	eb42 0303 	adc.w	r3, r2, r3
 8006e64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006e74:	f04f 0200 	mov.w	r2, #0
 8006e78:	f04f 0300 	mov.w	r3, #0
 8006e7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006e80:	4649      	mov	r1, r9
 8006e82:	008b      	lsls	r3, r1, #2
 8006e84:	4641      	mov	r1, r8
 8006e86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e8a:	4641      	mov	r1, r8
 8006e8c:	008a      	lsls	r2, r1, #2
 8006e8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006e92:	f7f9 f9fd 	bl	8000290 <__aeabi_uldivmod>
 8006e96:	4602      	mov	r2, r0
 8006e98:	460b      	mov	r3, r1
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	4b38      	ldr	r3, [pc, #224]	@ (8006f80 <UART_SetConfig+0x4e4>)
 8006e9e:	fba3 2301 	umull	r2, r3, r3, r1
 8006ea2:	095b      	lsrs	r3, r3, #5
 8006ea4:	2264      	movs	r2, #100	@ 0x64
 8006ea6:	fb02 f303 	mul.w	r3, r2, r3
 8006eaa:	1acb      	subs	r3, r1, r3
 8006eac:	011b      	lsls	r3, r3, #4
 8006eae:	3332      	adds	r3, #50	@ 0x32
 8006eb0:	4a33      	ldr	r2, [pc, #204]	@ (8006f80 <UART_SetConfig+0x4e4>)
 8006eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb6:	095b      	lsrs	r3, r3, #5
 8006eb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ebc:	441c      	add	r4, r3
 8006ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ec6:	677a      	str	r2, [r7, #116]	@ 0x74
 8006ec8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006ecc:	4642      	mov	r2, r8
 8006ece:	464b      	mov	r3, r9
 8006ed0:	1891      	adds	r1, r2, r2
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	415b      	adcs	r3, r3
 8006ed6:	60fb      	str	r3, [r7, #12]
 8006ed8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006edc:	4641      	mov	r1, r8
 8006ede:	1851      	adds	r1, r2, r1
 8006ee0:	6039      	str	r1, [r7, #0]
 8006ee2:	4649      	mov	r1, r9
 8006ee4:	414b      	adcs	r3, r1
 8006ee6:	607b      	str	r3, [r7, #4]
 8006ee8:	f04f 0200 	mov.w	r2, #0
 8006eec:	f04f 0300 	mov.w	r3, #0
 8006ef0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ef4:	4659      	mov	r1, fp
 8006ef6:	00cb      	lsls	r3, r1, #3
 8006ef8:	4651      	mov	r1, sl
 8006efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006efe:	4651      	mov	r1, sl
 8006f00:	00ca      	lsls	r2, r1, #3
 8006f02:	4610      	mov	r0, r2
 8006f04:	4619      	mov	r1, r3
 8006f06:	4603      	mov	r3, r0
 8006f08:	4642      	mov	r2, r8
 8006f0a:	189b      	adds	r3, r3, r2
 8006f0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f0e:	464b      	mov	r3, r9
 8006f10:	460a      	mov	r2, r1
 8006f12:	eb42 0303 	adc.w	r3, r2, r3
 8006f16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f22:	667a      	str	r2, [r7, #100]	@ 0x64
 8006f24:	f04f 0200 	mov.w	r2, #0
 8006f28:	f04f 0300 	mov.w	r3, #0
 8006f2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006f30:	4649      	mov	r1, r9
 8006f32:	008b      	lsls	r3, r1, #2
 8006f34:	4641      	mov	r1, r8
 8006f36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f3a:	4641      	mov	r1, r8
 8006f3c:	008a      	lsls	r2, r1, #2
 8006f3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006f42:	f7f9 f9a5 	bl	8000290 <__aeabi_uldivmod>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f80 <UART_SetConfig+0x4e4>)
 8006f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	2164      	movs	r1, #100	@ 0x64
 8006f54:	fb01 f303 	mul.w	r3, r1, r3
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	011b      	lsls	r3, r3, #4
 8006f5c:	3332      	adds	r3, #50	@ 0x32
 8006f5e:	4a08      	ldr	r2, [pc, #32]	@ (8006f80 <UART_SetConfig+0x4e4>)
 8006f60:	fba2 2303 	umull	r2, r3, r2, r3
 8006f64:	095b      	lsrs	r3, r3, #5
 8006f66:	f003 020f 	and.w	r2, r3, #15
 8006f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4422      	add	r2, r4
 8006f72:	609a      	str	r2, [r3, #8]
}
 8006f74:	bf00      	nop
 8006f76:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f80:	51eb851f 	.word	0x51eb851f

08006f84 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d123      	bne.n	8006fde <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006f9e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	6851      	ldr	r1, [r2, #4]
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	6892      	ldr	r2, [r2, #8]
 8006faa:	4311      	orrs	r1, r2
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	68d2      	ldr	r2, [r2, #12]
 8006fb0:	4311      	orrs	r1, r2
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	6912      	ldr	r2, [r2, #16]
 8006fb6:	4311      	orrs	r1, r2
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	6952      	ldr	r2, [r2, #20]
 8006fbc:	4311      	orrs	r1, r2
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	6992      	ldr	r2, [r2, #24]
 8006fc2:	4311      	orrs	r1, r2
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	69d2      	ldr	r2, [r2, #28]
 8006fc8:	4311      	orrs	r1, r2
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	6a12      	ldr	r2, [r2, #32]
 8006fce:	4311      	orrs	r1, r2
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	e028      	b.n	8007030 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	69d9      	ldr	r1, [r3, #28]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	4319      	orrs	r1, r3
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff4:	430b      	orrs	r3, r1
 8006ff6:	431a      	orrs	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007004:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	6851      	ldr	r1, [r2, #4]
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	6892      	ldr	r2, [r2, #8]
 8007010:	4311      	orrs	r1, r2
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	68d2      	ldr	r2, [r2, #12]
 8007016:	4311      	orrs	r1, r2
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	6912      	ldr	r2, [r2, #16]
 800701c:	4311      	orrs	r1, r2
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	6952      	ldr	r2, [r2, #20]
 8007022:	4311      	orrs	r1, r2
 8007024:	683a      	ldr	r2, [r7, #0]
 8007026:	6992      	ldr	r2, [r2, #24]
 8007028:	430a      	orrs	r2, r1
 800702a:	431a      	orrs	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800703e:	b480      	push	{r7}
 8007040:	b085      	sub	sp, #20
 8007042:	af00      	add	r7, sp, #0
 8007044:	60f8      	str	r0, [r7, #12]
 8007046:	60b9      	str	r1, [r7, #8]
 8007048:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d128      	bne.n	80070a2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	1e59      	subs	r1, r3, #1
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	3b01      	subs	r3, #1
 8007064:	011b      	lsls	r3, r3, #4
 8007066:	4319      	orrs	r1, r3
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	3b01      	subs	r3, #1
 800706e:	021b      	lsls	r3, r3, #8
 8007070:	4319      	orrs	r1, r3
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	3b01      	subs	r3, #1
 8007078:	031b      	lsls	r3, r3, #12
 800707a:	4319      	orrs	r1, r3
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	3b01      	subs	r3, #1
 8007082:	041b      	lsls	r3, r3, #16
 8007084:	4319      	orrs	r1, r3
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	3b01      	subs	r3, #1
 800708c:	051b      	lsls	r3, r3, #20
 800708e:	4319      	orrs	r1, r3
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	3b01      	subs	r3, #1
 8007096:	061b      	lsls	r3, r3, #24
 8007098:	430b      	orrs	r3, r1
 800709a:	431a      	orrs	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	609a      	str	r2, [r3, #8]
 80070a0:	e02f      	b.n	8007102 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80070aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	68d2      	ldr	r2, [r2, #12]
 80070b2:	3a01      	subs	r2, #1
 80070b4:	0311      	lsls	r1, r2, #12
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	6952      	ldr	r2, [r2, #20]
 80070ba:	3a01      	subs	r2, #1
 80070bc:	0512      	lsls	r2, r2, #20
 80070be:	430a      	orrs	r2, r1
 80070c0:	431a      	orrs	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	1e59      	subs	r1, r3, #1
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	3b01      	subs	r3, #1
 80070da:	011b      	lsls	r3, r3, #4
 80070dc:	4319      	orrs	r1, r3
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	021b      	lsls	r3, r3, #8
 80070e6:	4319      	orrs	r1, r3
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	3b01      	subs	r3, #1
 80070ee:	041b      	lsls	r3, r3, #16
 80070f0:	4319      	orrs	r1, r3
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	3b01      	subs	r3, #1
 80070f8:	061b      	lsls	r3, r3, #24
 80070fa:	430b      	orrs	r3, r1
 80070fc:	431a      	orrs	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007110:	b084      	sub	sp, #16
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	f107 001c 	add.w	r0, r7, #28
 800711e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007122:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007126:	2b01      	cmp	r3, #1
 8007128:	d123      	bne.n	8007172 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800712e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800713e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007152:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007156:	2b01      	cmp	r3, #1
 8007158:	d105      	bne.n	8007166 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f98d 	bl	8007486 <USB_CoreReset>
 800716c:	4603      	mov	r3, r0
 800716e:	73fb      	strb	r3, [r7, #15]
 8007170:	e01b      	b.n	80071aa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f981 	bl	8007486 <USB_CoreReset>
 8007184:	4603      	mov	r3, r0
 8007186:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007188:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800718c:	2b00      	cmp	r3, #0
 800718e:	d106      	bne.n	800719e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007194:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	639a      	str	r2, [r3, #56]	@ 0x38
 800719c:	e005      	b.n	80071aa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80071aa:	7fbb      	ldrb	r3, [r7, #30]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d10b      	bne.n	80071c8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f043 0206 	orr.w	r2, r3, #6
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f043 0220 	orr.w	r2, r3, #32
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071d4:	b004      	add	sp, #16
 80071d6:	4770      	bx	lr

080071d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f023 0201 	bic.w	r2, r3, #1
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b084      	sub	sp, #16
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	460b      	mov	r3, r1
 8007204:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007216:	78fb      	ldrb	r3, [r7, #3]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d115      	bne.n	8007248 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007228:	200a      	movs	r0, #10
 800722a:	f7fa ffe7 	bl	80021fc <HAL_Delay>
      ms += 10U;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	330a      	adds	r3, #10
 8007232:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f918 	bl	800746a <USB_GetMode>
 800723a:	4603      	mov	r3, r0
 800723c:	2b01      	cmp	r3, #1
 800723e:	d01e      	beq.n	800727e <USB_SetCurrentMode+0x84>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2bc7      	cmp	r3, #199	@ 0xc7
 8007244:	d9f0      	bls.n	8007228 <USB_SetCurrentMode+0x2e>
 8007246:	e01a      	b.n	800727e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007248:	78fb      	ldrb	r3, [r7, #3]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d115      	bne.n	800727a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800725a:	200a      	movs	r0, #10
 800725c:	f7fa ffce 	bl	80021fc <HAL_Delay>
      ms += 10U;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	330a      	adds	r3, #10
 8007264:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f8ff 	bl	800746a <USB_GetMode>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d005      	beq.n	800727e <USB_SetCurrentMode+0x84>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2bc7      	cmp	r3, #199	@ 0xc7
 8007276:	d9f0      	bls.n	800725a <USB_SetCurrentMode+0x60>
 8007278:	e001      	b.n	800727e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e005      	b.n	800728a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2bc8      	cmp	r3, #200	@ 0xc8
 8007282:	d101      	bne.n	8007288 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e000      	b.n	800728a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007292:	b480      	push	{r7}
 8007294:	b085      	sub	sp, #20
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
 800729a:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	3301      	adds	r3, #1
 80072a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072ac:	d901      	bls.n	80072b2 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e01b      	b.n	80072ea <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	daf2      	bge.n	80072a0 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	019b      	lsls	r3, r3, #6
 80072c2:	f043 0220 	orr.w	r2, r3, #32
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	3301      	adds	r3, #1
 80072ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072d6:	d901      	bls.n	80072dc <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e006      	b.n	80072ea <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	f003 0320 	and.w	r3, r3, #32
 80072e4:	2b20      	cmp	r3, #32
 80072e6:	d0f0      	beq.n	80072ca <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b085      	sub	sp, #20
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	3301      	adds	r3, #1
 8007306:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800730e:	d901      	bls.n	8007314 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e018      	b.n	8007346 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	2b00      	cmp	r3, #0
 800731a:	daf2      	bge.n	8007302 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2210      	movs	r2, #16
 8007324:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3301      	adds	r3, #1
 800732a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007332:	d901      	bls.n	8007338 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e006      	b.n	8007346 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	f003 0310 	and.w	r3, r3, #16
 8007340:	2b10      	cmp	r3, #16
 8007342:	d0f0      	beq.n	8007326 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007352:	b480      	push	{r7}
 8007354:	b08b      	sub	sp, #44	@ 0x2c
 8007356:	af00      	add	r7, sp, #0
 8007358:	60f8      	str	r0, [r7, #12]
 800735a:	60b9      	str	r1, [r7, #8]
 800735c:	4613      	mov	r3, r2
 800735e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007368:	88fb      	ldrh	r3, [r7, #6]
 800736a:	089b      	lsrs	r3, r3, #2
 800736c:	b29b      	uxth	r3, r3
 800736e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007370:	88fb      	ldrh	r3, [r7, #6]
 8007372:	f003 0303 	and.w	r3, r3, #3
 8007376:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007378:	2300      	movs	r3, #0
 800737a:	623b      	str	r3, [r7, #32]
 800737c:	e014      	b.n	80073a8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007388:	601a      	str	r2, [r3, #0]
    pDest++;
 800738a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738c:	3301      	adds	r3, #1
 800738e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007392:	3301      	adds	r3, #1
 8007394:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007398:	3301      	adds	r3, #1
 800739a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800739c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739e:	3301      	adds	r3, #1
 80073a0:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	3301      	adds	r3, #1
 80073a6:	623b      	str	r3, [r7, #32]
 80073a8:	6a3a      	ldr	r2, [r7, #32]
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d3e6      	bcc.n	800737e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80073b0:	8bfb      	ldrh	r3, [r7, #30]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d01e      	beq.n	80073f4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80073b6:	2300      	movs	r3, #0
 80073b8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073c0:	461a      	mov	r2, r3
 80073c2:	f107 0310 	add.w	r3, r7, #16
 80073c6:	6812      	ldr	r2, [r2, #0]
 80073c8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	00db      	lsls	r3, r3, #3
 80073d2:	fa22 f303 	lsr.w	r3, r2, r3
 80073d6:	b2da      	uxtb	r2, r3
 80073d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073da:	701a      	strb	r2, [r3, #0]
      i++;
 80073dc:	6a3b      	ldr	r3, [r7, #32]
 80073de:	3301      	adds	r3, #1
 80073e0:	623b      	str	r3, [r7, #32]
      pDest++;
 80073e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e4:	3301      	adds	r3, #1
 80073e6:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80073e8:	8bfb      	ldrh	r3, [r7, #30]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80073ee:	8bfb      	ldrh	r3, [r7, #30]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1ea      	bne.n	80073ca <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80073f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	372c      	adds	r7, #44	@ 0x2c
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007402:	b480      	push	{r7}
 8007404:	b085      	sub	sp, #20
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	4013      	ands	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800741a:	68fb      	ldr	r3, [r7, #12]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007438:	78fb      	ldrb	r3, [r7, #3]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4413      	add	r3, r2
 8007440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007448:	78fb      	ldrb	r3, [r7, #3]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4413      	add	r3, r2
 8007450:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	4013      	ands	r3, r2
 800745a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800745c:	68bb      	ldr	r3, [r7, #8]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	f003 0301 	and.w	r3, r3, #1
}
 800747a:	4618      	mov	r0, r3
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007486:	b480      	push	{r7}
 8007488:	b085      	sub	sp, #20
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800748e:	2300      	movs	r3, #0
 8007490:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	3301      	adds	r3, #1
 8007496:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800749e:	d901      	bls.n	80074a4 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e01b      	b.n	80074dc <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	daf2      	bge.n	8007492 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80074ac:	2300      	movs	r3, #0
 80074ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	f043 0201 	orr.w	r2, r3, #1
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	3301      	adds	r3, #1
 80074c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074c8:	d901      	bls.n	80074ce <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e006      	b.n	80074dc <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d0f0      	beq.n	80074bc <USB_CoreReset+0x36>

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074e8:	b084      	sub	sp, #16
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b086      	sub	sp, #24
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80074f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007508:	461a      	mov	r2, r3
 800750a:	2300      	movs	r3, #0
 800750c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007512:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800752a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800753a:	2b00      	cmp	r3, #0
 800753c:	d119      	bne.n	8007572 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800753e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007542:	2b01      	cmp	r3, #1
 8007544:	d10a      	bne.n	800755c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007554:	f043 0304 	orr.w	r3, r3, #4
 8007558:	6013      	str	r3, [r2, #0]
 800755a:	e014      	b.n	8007586 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800756a:	f023 0304 	bic.w	r3, r3, #4
 800756e:	6013      	str	r3, [r2, #0]
 8007570:	e009      	b.n	8007586 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007580:	f023 0304 	bic.w	r3, r3, #4
 8007584:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007586:	2110      	movs	r1, #16
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7ff fe82 	bl	8007292 <USB_FlushTxFifo>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7ff feac 	bl	80072f6 <USB_FlushRxFifo>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80075a8:	2300      	movs	r3, #0
 80075aa:	613b      	str	r3, [r7, #16]
 80075ac:	e015      	b.n	80075da <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075ba:	461a      	mov	r2, r3
 80075bc:	f04f 33ff 	mov.w	r3, #4294967295
 80075c0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075ce:	461a      	mov	r2, r3
 80075d0:	2300      	movs	r3, #0
 80075d2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	3301      	adds	r3, #1
 80075d8:	613b      	str	r3, [r7, #16]
 80075da:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80075de:	461a      	mov	r2, r3
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d3e3      	bcc.n	80075ae <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f04f 32ff 	mov.w	r2, #4294967295
 80075f2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a18      	ldr	r2, [pc, #96]	@ (8007658 <USB_HostInit+0x170>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d10b      	bne.n	8007614 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007602:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a15      	ldr	r2, [pc, #84]	@ (800765c <USB_HostInit+0x174>)
 8007608:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a14      	ldr	r2, [pc, #80]	@ (8007660 <USB_HostInit+0x178>)
 800760e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007612:	e009      	b.n	8007628 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2280      	movs	r2, #128	@ 0x80
 8007618:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a11      	ldr	r2, [pc, #68]	@ (8007664 <USB_HostInit+0x17c>)
 800761e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a11      	ldr	r2, [pc, #68]	@ (8007668 <USB_HostInit+0x180>)
 8007624:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007628:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800762c:	2b00      	cmp	r3, #0
 800762e:	d105      	bne.n	800763c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	f043 0210 	orr.w	r2, r3, #16
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	699a      	ldr	r2, [r3, #24]
 8007640:	4b0a      	ldr	r3, [pc, #40]	@ (800766c <USB_HostInit+0x184>)
 8007642:	4313      	orrs	r3, r2
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007648:	7dfb      	ldrb	r3, [r7, #23]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007654:	b004      	add	sp, #16
 8007656:	4770      	bx	lr
 8007658:	40040000 	.word	0x40040000
 800765c:	01000200 	.word	0x01000200
 8007660:	00e00300 	.word	0x00e00300
 8007664:	00600080 	.word	0x00600080
 8007668:	004000e0 	.word	0x004000e0
 800766c:	a3200008 	.word	0xa3200008

08007670 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	460b      	mov	r3, r1
 800767a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800768e:	f023 0303 	bic.w	r3, r3, #3
 8007692:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	78fb      	ldrb	r3, [r7, #3]
 800769e:	f003 0303 	and.w	r3, r3, #3
 80076a2:	68f9      	ldr	r1, [r7, #12]
 80076a4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80076a8:	4313      	orrs	r3, r2
 80076aa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80076ac:	78fb      	ldrb	r3, [r7, #3]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d107      	bne.n	80076c2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076b8:	461a      	mov	r2, r3
 80076ba:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80076be:	6053      	str	r3, [r2, #4]
 80076c0:	e00c      	b.n	80076dc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80076c2:	78fb      	ldrb	r3, [r7, #3]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d107      	bne.n	80076d8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076ce:	461a      	mov	r2, r3
 80076d0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80076d4:	6053      	str	r3, [r2, #4]
 80076d6:	e001      	b.n	80076dc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e000      	b.n	80076de <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b085      	sub	sp, #20
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	b29b      	uxth	r3, r3
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800770c:	b480      	push	{r7}
 800770e:	b089      	sub	sp, #36	@ 0x24
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	460b      	mov	r3, r1
 8007716:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800771c:	78fb      	ldrb	r3, [r7, #3]
 800771e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	4413      	add	r3, r2
 800772c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	0c9b      	lsrs	r3, r3, #18
 8007734:	f003 0303 	and.w	r3, r3, #3
 8007738:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	4413      	add	r3, r2
 8007742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	0fdb      	lsrs	r3, r3, #31
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	015a      	lsls	r2, r3, #5
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	4413      	add	r3, r2
 8007758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	0fdb      	lsrs	r3, r3, #31
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f003 0320 	and.w	r3, r3, #32
 800776e:	2b20      	cmp	r3, #32
 8007770:	d10d      	bne.n	800778e <USB_HC_Halt+0x82>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10a      	bne.n	800778e <USB_HC_Halt+0x82>
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d005      	beq.n	800778a <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d002      	beq.n	800778a <USB_HC_Halt+0x7e>
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	2b03      	cmp	r3, #3
 8007788:	d101      	bne.n	800778e <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	e0d8      	b.n	8007940 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <USB_HC_Halt+0x8e>
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	2b02      	cmp	r3, #2
 8007798:	d173      	bne.n	8007882 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	0151      	lsls	r1, r2, #5
 80077ac:	69fa      	ldr	r2, [r7, #28]
 80077ae:	440a      	add	r2, r1
 80077b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077b8:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f003 0320 	and.w	r3, r3, #32
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d14a      	bne.n	800785c <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d133      	bne.n	800783a <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	69ba      	ldr	r2, [r7, #24]
 80077e2:	0151      	lsls	r1, r2, #5
 80077e4:	69fa      	ldr	r2, [r7, #28]
 80077e6:	440a      	add	r2, r1
 80077e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077f0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	015a      	lsls	r2, r3, #5
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	69ba      	ldr	r2, [r7, #24]
 8007802:	0151      	lsls	r1, r2, #5
 8007804:	69fa      	ldr	r2, [r7, #28]
 8007806:	440a      	add	r2, r1
 8007808:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800780c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007810:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	3301      	adds	r3, #1
 8007816:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800781e:	d82e      	bhi.n	800787e <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	4413      	add	r3, r2
 8007828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007832:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007836:	d0ec      	beq.n	8007812 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007838:	e081      	b.n	800793e <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	015a      	lsls	r2, r3, #5
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	4413      	add	r3, r2
 8007842:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	69ba      	ldr	r2, [r7, #24]
 800784a:	0151      	lsls	r1, r2, #5
 800784c:	69fa      	ldr	r2, [r7, #28]
 800784e:	440a      	add	r2, r1
 8007850:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007854:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007858:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800785a:	e070      	b.n	800793e <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	015a      	lsls	r2, r3, #5
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	4413      	add	r3, r2
 8007864:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	69ba      	ldr	r2, [r7, #24]
 800786c:	0151      	lsls	r1, r2, #5
 800786e:	69fa      	ldr	r2, [r7, #28]
 8007870:	440a      	add	r2, r1
 8007872:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007876:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800787a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800787c:	e05f      	b.n	800793e <USB_HC_Halt+0x232>
            break;
 800787e:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007880:	e05d      	b.n	800793e <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	015a      	lsls	r2, r3, #5
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	4413      	add	r3, r2
 800788a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	0151      	lsls	r1, r2, #5
 8007894:	69fa      	ldr	r2, [r7, #28]
 8007896:	440a      	add	r2, r1
 8007898:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800789c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80078a0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d133      	bne.n	800791a <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	015a      	lsls	r2, r3, #5
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	69ba      	ldr	r2, [r7, #24]
 80078c2:	0151      	lsls	r1, r2, #5
 80078c4:	69fa      	ldr	r2, [r7, #28]
 80078c6:	440a      	add	r2, r1
 80078c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078d0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	015a      	lsls	r2, r3, #5
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	4413      	add	r3, r2
 80078da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	69ba      	ldr	r2, [r7, #24]
 80078e2:	0151      	lsls	r1, r2, #5
 80078e4:	69fa      	ldr	r2, [r7, #28]
 80078e6:	440a      	add	r2, r1
 80078e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80078f0:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	3301      	adds	r3, #1
 80078f6:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078fe:	d81d      	bhi.n	800793c <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	4413      	add	r3, r2
 8007908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007912:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007916:	d0ec      	beq.n	80078f2 <USB_HC_Halt+0x1e6>
 8007918:	e011      	b.n	800793e <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	4413      	add	r3, r2
 8007922:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	69ba      	ldr	r2, [r7, #24]
 800792a:	0151      	lsls	r1, r2, #5
 800792c:	69fa      	ldr	r2, [r7, #28]
 800792e:	440a      	add	r2, r1
 8007930:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007934:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007938:	6013      	str	r3, [r2, #0]
 800793a:	e000      	b.n	800793e <USB_HC_Halt+0x232>
          break;
 800793c:	bf00      	nop
    }
  }

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3724      	adds	r7, #36	@ 0x24
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <std>:
 800794c:	2300      	movs	r3, #0
 800794e:	b510      	push	{r4, lr}
 8007950:	4604      	mov	r4, r0
 8007952:	e9c0 3300 	strd	r3, r3, [r0]
 8007956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800795a:	6083      	str	r3, [r0, #8]
 800795c:	8181      	strh	r1, [r0, #12]
 800795e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007960:	81c2      	strh	r2, [r0, #14]
 8007962:	6183      	str	r3, [r0, #24]
 8007964:	4619      	mov	r1, r3
 8007966:	2208      	movs	r2, #8
 8007968:	305c      	adds	r0, #92	@ 0x5c
 800796a:	f000 f9f9 	bl	8007d60 <memset>
 800796e:	4b0d      	ldr	r3, [pc, #52]	@ (80079a4 <std+0x58>)
 8007970:	6263      	str	r3, [r4, #36]	@ 0x24
 8007972:	4b0d      	ldr	r3, [pc, #52]	@ (80079a8 <std+0x5c>)
 8007974:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007976:	4b0d      	ldr	r3, [pc, #52]	@ (80079ac <std+0x60>)
 8007978:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800797a:	4b0d      	ldr	r3, [pc, #52]	@ (80079b0 <std+0x64>)
 800797c:	6323      	str	r3, [r4, #48]	@ 0x30
 800797e:	4b0d      	ldr	r3, [pc, #52]	@ (80079b4 <std+0x68>)
 8007980:	6224      	str	r4, [r4, #32]
 8007982:	429c      	cmp	r4, r3
 8007984:	d006      	beq.n	8007994 <std+0x48>
 8007986:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800798a:	4294      	cmp	r4, r2
 800798c:	d002      	beq.n	8007994 <std+0x48>
 800798e:	33d0      	adds	r3, #208	@ 0xd0
 8007990:	429c      	cmp	r4, r3
 8007992:	d105      	bne.n	80079a0 <std+0x54>
 8007994:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800799c:	f000 ba58 	b.w	8007e50 <__retarget_lock_init_recursive>
 80079a0:	bd10      	pop	{r4, pc}
 80079a2:	bf00      	nop
 80079a4:	08007bb1 	.word	0x08007bb1
 80079a8:	08007bd3 	.word	0x08007bd3
 80079ac:	08007c0b 	.word	0x08007c0b
 80079b0:	08007c2f 	.word	0x08007c2f
 80079b4:	20000718 	.word	0x20000718

080079b8 <stdio_exit_handler>:
 80079b8:	4a02      	ldr	r2, [pc, #8]	@ (80079c4 <stdio_exit_handler+0xc>)
 80079ba:	4903      	ldr	r1, [pc, #12]	@ (80079c8 <stdio_exit_handler+0x10>)
 80079bc:	4803      	ldr	r0, [pc, #12]	@ (80079cc <stdio_exit_handler+0x14>)
 80079be:	f000 b869 	b.w	8007a94 <_fwalk_sglue>
 80079c2:	bf00      	nop
 80079c4:	2000000c 	.word	0x2000000c
 80079c8:	080086ed 	.word	0x080086ed
 80079cc:	2000001c 	.word	0x2000001c

080079d0 <cleanup_stdio>:
 80079d0:	6841      	ldr	r1, [r0, #4]
 80079d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007a04 <cleanup_stdio+0x34>)
 80079d4:	4299      	cmp	r1, r3
 80079d6:	b510      	push	{r4, lr}
 80079d8:	4604      	mov	r4, r0
 80079da:	d001      	beq.n	80079e0 <cleanup_stdio+0x10>
 80079dc:	f000 fe86 	bl	80086ec <_fflush_r>
 80079e0:	68a1      	ldr	r1, [r4, #8]
 80079e2:	4b09      	ldr	r3, [pc, #36]	@ (8007a08 <cleanup_stdio+0x38>)
 80079e4:	4299      	cmp	r1, r3
 80079e6:	d002      	beq.n	80079ee <cleanup_stdio+0x1e>
 80079e8:	4620      	mov	r0, r4
 80079ea:	f000 fe7f 	bl	80086ec <_fflush_r>
 80079ee:	68e1      	ldr	r1, [r4, #12]
 80079f0:	4b06      	ldr	r3, [pc, #24]	@ (8007a0c <cleanup_stdio+0x3c>)
 80079f2:	4299      	cmp	r1, r3
 80079f4:	d004      	beq.n	8007a00 <cleanup_stdio+0x30>
 80079f6:	4620      	mov	r0, r4
 80079f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079fc:	f000 be76 	b.w	80086ec <_fflush_r>
 8007a00:	bd10      	pop	{r4, pc}
 8007a02:	bf00      	nop
 8007a04:	20000718 	.word	0x20000718
 8007a08:	20000780 	.word	0x20000780
 8007a0c:	200007e8 	.word	0x200007e8

08007a10 <global_stdio_init.part.0>:
 8007a10:	b510      	push	{r4, lr}
 8007a12:	4b0b      	ldr	r3, [pc, #44]	@ (8007a40 <global_stdio_init.part.0+0x30>)
 8007a14:	4c0b      	ldr	r4, [pc, #44]	@ (8007a44 <global_stdio_init.part.0+0x34>)
 8007a16:	4a0c      	ldr	r2, [pc, #48]	@ (8007a48 <global_stdio_init.part.0+0x38>)
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	2104      	movs	r1, #4
 8007a20:	f7ff ff94 	bl	800794c <std>
 8007a24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a28:	2201      	movs	r2, #1
 8007a2a:	2109      	movs	r1, #9
 8007a2c:	f7ff ff8e 	bl	800794c <std>
 8007a30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a34:	2202      	movs	r2, #2
 8007a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a3a:	2112      	movs	r1, #18
 8007a3c:	f7ff bf86 	b.w	800794c <std>
 8007a40:	20000850 	.word	0x20000850
 8007a44:	20000718 	.word	0x20000718
 8007a48:	080079b9 	.word	0x080079b9

08007a4c <__sfp_lock_acquire>:
 8007a4c:	4801      	ldr	r0, [pc, #4]	@ (8007a54 <__sfp_lock_acquire+0x8>)
 8007a4e:	f000 ba00 	b.w	8007e52 <__retarget_lock_acquire_recursive>
 8007a52:	bf00      	nop
 8007a54:	20000859 	.word	0x20000859

08007a58 <__sfp_lock_release>:
 8007a58:	4801      	ldr	r0, [pc, #4]	@ (8007a60 <__sfp_lock_release+0x8>)
 8007a5a:	f000 b9fb 	b.w	8007e54 <__retarget_lock_release_recursive>
 8007a5e:	bf00      	nop
 8007a60:	20000859 	.word	0x20000859

08007a64 <__sinit>:
 8007a64:	b510      	push	{r4, lr}
 8007a66:	4604      	mov	r4, r0
 8007a68:	f7ff fff0 	bl	8007a4c <__sfp_lock_acquire>
 8007a6c:	6a23      	ldr	r3, [r4, #32]
 8007a6e:	b11b      	cbz	r3, 8007a78 <__sinit+0x14>
 8007a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a74:	f7ff bff0 	b.w	8007a58 <__sfp_lock_release>
 8007a78:	4b04      	ldr	r3, [pc, #16]	@ (8007a8c <__sinit+0x28>)
 8007a7a:	6223      	str	r3, [r4, #32]
 8007a7c:	4b04      	ldr	r3, [pc, #16]	@ (8007a90 <__sinit+0x2c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1f5      	bne.n	8007a70 <__sinit+0xc>
 8007a84:	f7ff ffc4 	bl	8007a10 <global_stdio_init.part.0>
 8007a88:	e7f2      	b.n	8007a70 <__sinit+0xc>
 8007a8a:	bf00      	nop
 8007a8c:	080079d1 	.word	0x080079d1
 8007a90:	20000850 	.word	0x20000850

08007a94 <_fwalk_sglue>:
 8007a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a98:	4607      	mov	r7, r0
 8007a9a:	4688      	mov	r8, r1
 8007a9c:	4614      	mov	r4, r2
 8007a9e:	2600      	movs	r6, #0
 8007aa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007aa4:	f1b9 0901 	subs.w	r9, r9, #1
 8007aa8:	d505      	bpl.n	8007ab6 <_fwalk_sglue+0x22>
 8007aaa:	6824      	ldr	r4, [r4, #0]
 8007aac:	2c00      	cmp	r4, #0
 8007aae:	d1f7      	bne.n	8007aa0 <_fwalk_sglue+0xc>
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ab6:	89ab      	ldrh	r3, [r5, #12]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d907      	bls.n	8007acc <_fwalk_sglue+0x38>
 8007abc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	d003      	beq.n	8007acc <_fwalk_sglue+0x38>
 8007ac4:	4629      	mov	r1, r5
 8007ac6:	4638      	mov	r0, r7
 8007ac8:	47c0      	blx	r8
 8007aca:	4306      	orrs	r6, r0
 8007acc:	3568      	adds	r5, #104	@ 0x68
 8007ace:	e7e9      	b.n	8007aa4 <_fwalk_sglue+0x10>

08007ad0 <iprintf>:
 8007ad0:	b40f      	push	{r0, r1, r2, r3}
 8007ad2:	b507      	push	{r0, r1, r2, lr}
 8007ad4:	4906      	ldr	r1, [pc, #24]	@ (8007af0 <iprintf+0x20>)
 8007ad6:	ab04      	add	r3, sp, #16
 8007ad8:	6808      	ldr	r0, [r1, #0]
 8007ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ade:	6881      	ldr	r1, [r0, #8]
 8007ae0:	9301      	str	r3, [sp, #4]
 8007ae2:	f000 fadb 	bl	800809c <_vfiprintf_r>
 8007ae6:	b003      	add	sp, #12
 8007ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007aec:	b004      	add	sp, #16
 8007aee:	4770      	bx	lr
 8007af0:	20000018 	.word	0x20000018

08007af4 <_puts_r>:
 8007af4:	6a03      	ldr	r3, [r0, #32]
 8007af6:	b570      	push	{r4, r5, r6, lr}
 8007af8:	6884      	ldr	r4, [r0, #8]
 8007afa:	4605      	mov	r5, r0
 8007afc:	460e      	mov	r6, r1
 8007afe:	b90b      	cbnz	r3, 8007b04 <_puts_r+0x10>
 8007b00:	f7ff ffb0 	bl	8007a64 <__sinit>
 8007b04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b06:	07db      	lsls	r3, r3, #31
 8007b08:	d405      	bmi.n	8007b16 <_puts_r+0x22>
 8007b0a:	89a3      	ldrh	r3, [r4, #12]
 8007b0c:	0598      	lsls	r0, r3, #22
 8007b0e:	d402      	bmi.n	8007b16 <_puts_r+0x22>
 8007b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b12:	f000 f99e 	bl	8007e52 <__retarget_lock_acquire_recursive>
 8007b16:	89a3      	ldrh	r3, [r4, #12]
 8007b18:	0719      	lsls	r1, r3, #28
 8007b1a:	d502      	bpl.n	8007b22 <_puts_r+0x2e>
 8007b1c:	6923      	ldr	r3, [r4, #16]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d135      	bne.n	8007b8e <_puts_r+0x9a>
 8007b22:	4621      	mov	r1, r4
 8007b24:	4628      	mov	r0, r5
 8007b26:	f000 f8c5 	bl	8007cb4 <__swsetup_r>
 8007b2a:	b380      	cbz	r0, 8007b8e <_puts_r+0x9a>
 8007b2c:	f04f 35ff 	mov.w	r5, #4294967295
 8007b30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b32:	07da      	lsls	r2, r3, #31
 8007b34:	d405      	bmi.n	8007b42 <_puts_r+0x4e>
 8007b36:	89a3      	ldrh	r3, [r4, #12]
 8007b38:	059b      	lsls	r3, r3, #22
 8007b3a:	d402      	bmi.n	8007b42 <_puts_r+0x4e>
 8007b3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b3e:	f000 f989 	bl	8007e54 <__retarget_lock_release_recursive>
 8007b42:	4628      	mov	r0, r5
 8007b44:	bd70      	pop	{r4, r5, r6, pc}
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	da04      	bge.n	8007b54 <_puts_r+0x60>
 8007b4a:	69a2      	ldr	r2, [r4, #24]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	dc17      	bgt.n	8007b80 <_puts_r+0x8c>
 8007b50:	290a      	cmp	r1, #10
 8007b52:	d015      	beq.n	8007b80 <_puts_r+0x8c>
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	1c5a      	adds	r2, r3, #1
 8007b58:	6022      	str	r2, [r4, #0]
 8007b5a:	7019      	strb	r1, [r3, #0]
 8007b5c:	68a3      	ldr	r3, [r4, #8]
 8007b5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b62:	3b01      	subs	r3, #1
 8007b64:	60a3      	str	r3, [r4, #8]
 8007b66:	2900      	cmp	r1, #0
 8007b68:	d1ed      	bne.n	8007b46 <_puts_r+0x52>
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	da11      	bge.n	8007b92 <_puts_r+0x9e>
 8007b6e:	4622      	mov	r2, r4
 8007b70:	210a      	movs	r1, #10
 8007b72:	4628      	mov	r0, r5
 8007b74:	f000 f85f 	bl	8007c36 <__swbuf_r>
 8007b78:	3001      	adds	r0, #1
 8007b7a:	d0d7      	beq.n	8007b2c <_puts_r+0x38>
 8007b7c:	250a      	movs	r5, #10
 8007b7e:	e7d7      	b.n	8007b30 <_puts_r+0x3c>
 8007b80:	4622      	mov	r2, r4
 8007b82:	4628      	mov	r0, r5
 8007b84:	f000 f857 	bl	8007c36 <__swbuf_r>
 8007b88:	3001      	adds	r0, #1
 8007b8a:	d1e7      	bne.n	8007b5c <_puts_r+0x68>
 8007b8c:	e7ce      	b.n	8007b2c <_puts_r+0x38>
 8007b8e:	3e01      	subs	r6, #1
 8007b90:	e7e4      	b.n	8007b5c <_puts_r+0x68>
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	1c5a      	adds	r2, r3, #1
 8007b96:	6022      	str	r2, [r4, #0]
 8007b98:	220a      	movs	r2, #10
 8007b9a:	701a      	strb	r2, [r3, #0]
 8007b9c:	e7ee      	b.n	8007b7c <_puts_r+0x88>
	...

08007ba0 <puts>:
 8007ba0:	4b02      	ldr	r3, [pc, #8]	@ (8007bac <puts+0xc>)
 8007ba2:	4601      	mov	r1, r0
 8007ba4:	6818      	ldr	r0, [r3, #0]
 8007ba6:	f7ff bfa5 	b.w	8007af4 <_puts_r>
 8007baa:	bf00      	nop
 8007bac:	20000018 	.word	0x20000018

08007bb0 <__sread>:
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	460c      	mov	r4, r1
 8007bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb8:	f000 f8fc 	bl	8007db4 <_read_r>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	bfab      	itete	ge
 8007bc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8007bc4:	181b      	addge	r3, r3, r0
 8007bc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007bca:	bfac      	ite	ge
 8007bcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007bce:	81a3      	strhlt	r3, [r4, #12]
 8007bd0:	bd10      	pop	{r4, pc}

08007bd2 <__swrite>:
 8007bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd6:	461f      	mov	r7, r3
 8007bd8:	898b      	ldrh	r3, [r1, #12]
 8007bda:	05db      	lsls	r3, r3, #23
 8007bdc:	4605      	mov	r5, r0
 8007bde:	460c      	mov	r4, r1
 8007be0:	4616      	mov	r6, r2
 8007be2:	d505      	bpl.n	8007bf0 <__swrite+0x1e>
 8007be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be8:	2302      	movs	r3, #2
 8007bea:	2200      	movs	r2, #0
 8007bec:	f000 f8d0 	bl	8007d90 <_lseek_r>
 8007bf0:	89a3      	ldrh	r3, [r4, #12]
 8007bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bfa:	81a3      	strh	r3, [r4, #12]
 8007bfc:	4632      	mov	r2, r6
 8007bfe:	463b      	mov	r3, r7
 8007c00:	4628      	mov	r0, r5
 8007c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c06:	f000 b8e7 	b.w	8007dd8 <_write_r>

08007c0a <__sseek>:
 8007c0a:	b510      	push	{r4, lr}
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c12:	f000 f8bd 	bl	8007d90 <_lseek_r>
 8007c16:	1c43      	adds	r3, r0, #1
 8007c18:	89a3      	ldrh	r3, [r4, #12]
 8007c1a:	bf15      	itete	ne
 8007c1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c26:	81a3      	strheq	r3, [r4, #12]
 8007c28:	bf18      	it	ne
 8007c2a:	81a3      	strhne	r3, [r4, #12]
 8007c2c:	bd10      	pop	{r4, pc}

08007c2e <__sclose>:
 8007c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c32:	f000 b89d 	b.w	8007d70 <_close_r>

08007c36 <__swbuf_r>:
 8007c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c38:	460e      	mov	r6, r1
 8007c3a:	4614      	mov	r4, r2
 8007c3c:	4605      	mov	r5, r0
 8007c3e:	b118      	cbz	r0, 8007c48 <__swbuf_r+0x12>
 8007c40:	6a03      	ldr	r3, [r0, #32]
 8007c42:	b90b      	cbnz	r3, 8007c48 <__swbuf_r+0x12>
 8007c44:	f7ff ff0e 	bl	8007a64 <__sinit>
 8007c48:	69a3      	ldr	r3, [r4, #24]
 8007c4a:	60a3      	str	r3, [r4, #8]
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	071a      	lsls	r2, r3, #28
 8007c50:	d501      	bpl.n	8007c56 <__swbuf_r+0x20>
 8007c52:	6923      	ldr	r3, [r4, #16]
 8007c54:	b943      	cbnz	r3, 8007c68 <__swbuf_r+0x32>
 8007c56:	4621      	mov	r1, r4
 8007c58:	4628      	mov	r0, r5
 8007c5a:	f000 f82b 	bl	8007cb4 <__swsetup_r>
 8007c5e:	b118      	cbz	r0, 8007c68 <__swbuf_r+0x32>
 8007c60:	f04f 37ff 	mov.w	r7, #4294967295
 8007c64:	4638      	mov	r0, r7
 8007c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c68:	6823      	ldr	r3, [r4, #0]
 8007c6a:	6922      	ldr	r2, [r4, #16]
 8007c6c:	1a98      	subs	r0, r3, r2
 8007c6e:	6963      	ldr	r3, [r4, #20]
 8007c70:	b2f6      	uxtb	r6, r6
 8007c72:	4283      	cmp	r3, r0
 8007c74:	4637      	mov	r7, r6
 8007c76:	dc05      	bgt.n	8007c84 <__swbuf_r+0x4e>
 8007c78:	4621      	mov	r1, r4
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	f000 fd36 	bl	80086ec <_fflush_r>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	d1ed      	bne.n	8007c60 <__swbuf_r+0x2a>
 8007c84:	68a3      	ldr	r3, [r4, #8]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	60a3      	str	r3, [r4, #8]
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	1c5a      	adds	r2, r3, #1
 8007c8e:	6022      	str	r2, [r4, #0]
 8007c90:	701e      	strb	r6, [r3, #0]
 8007c92:	6962      	ldr	r2, [r4, #20]
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d004      	beq.n	8007ca4 <__swbuf_r+0x6e>
 8007c9a:	89a3      	ldrh	r3, [r4, #12]
 8007c9c:	07db      	lsls	r3, r3, #31
 8007c9e:	d5e1      	bpl.n	8007c64 <__swbuf_r+0x2e>
 8007ca0:	2e0a      	cmp	r6, #10
 8007ca2:	d1df      	bne.n	8007c64 <__swbuf_r+0x2e>
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f000 fd20 	bl	80086ec <_fflush_r>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d0d9      	beq.n	8007c64 <__swbuf_r+0x2e>
 8007cb0:	e7d6      	b.n	8007c60 <__swbuf_r+0x2a>
	...

08007cb4 <__swsetup_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	4b29      	ldr	r3, [pc, #164]	@ (8007d5c <__swsetup_r+0xa8>)
 8007cb8:	4605      	mov	r5, r0
 8007cba:	6818      	ldr	r0, [r3, #0]
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	b118      	cbz	r0, 8007cc8 <__swsetup_r+0x14>
 8007cc0:	6a03      	ldr	r3, [r0, #32]
 8007cc2:	b90b      	cbnz	r3, 8007cc8 <__swsetup_r+0x14>
 8007cc4:	f7ff fece 	bl	8007a64 <__sinit>
 8007cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ccc:	0719      	lsls	r1, r3, #28
 8007cce:	d422      	bmi.n	8007d16 <__swsetup_r+0x62>
 8007cd0:	06da      	lsls	r2, r3, #27
 8007cd2:	d407      	bmi.n	8007ce4 <__swsetup_r+0x30>
 8007cd4:	2209      	movs	r2, #9
 8007cd6:	602a      	str	r2, [r5, #0]
 8007cd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cdc:	81a3      	strh	r3, [r4, #12]
 8007cde:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce2:	e033      	b.n	8007d4c <__swsetup_r+0x98>
 8007ce4:	0758      	lsls	r0, r3, #29
 8007ce6:	d512      	bpl.n	8007d0e <__swsetup_r+0x5a>
 8007ce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cea:	b141      	cbz	r1, 8007cfe <__swsetup_r+0x4a>
 8007cec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cf0:	4299      	cmp	r1, r3
 8007cf2:	d002      	beq.n	8007cfa <__swsetup_r+0x46>
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	f000 f8af 	bl	8007e58 <_free_r>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cfe:	89a3      	ldrh	r3, [r4, #12]
 8007d00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d04:	81a3      	strh	r3, [r4, #12]
 8007d06:	2300      	movs	r3, #0
 8007d08:	6063      	str	r3, [r4, #4]
 8007d0a:	6923      	ldr	r3, [r4, #16]
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	f043 0308 	orr.w	r3, r3, #8
 8007d14:	81a3      	strh	r3, [r4, #12]
 8007d16:	6923      	ldr	r3, [r4, #16]
 8007d18:	b94b      	cbnz	r3, 8007d2e <__swsetup_r+0x7a>
 8007d1a:	89a3      	ldrh	r3, [r4, #12]
 8007d1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d24:	d003      	beq.n	8007d2e <__swsetup_r+0x7a>
 8007d26:	4621      	mov	r1, r4
 8007d28:	4628      	mov	r0, r5
 8007d2a:	f000 fd2d 	bl	8008788 <__smakebuf_r>
 8007d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d32:	f013 0201 	ands.w	r2, r3, #1
 8007d36:	d00a      	beq.n	8007d4e <__swsetup_r+0x9a>
 8007d38:	2200      	movs	r2, #0
 8007d3a:	60a2      	str	r2, [r4, #8]
 8007d3c:	6962      	ldr	r2, [r4, #20]
 8007d3e:	4252      	negs	r2, r2
 8007d40:	61a2      	str	r2, [r4, #24]
 8007d42:	6922      	ldr	r2, [r4, #16]
 8007d44:	b942      	cbnz	r2, 8007d58 <__swsetup_r+0xa4>
 8007d46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d4a:	d1c5      	bne.n	8007cd8 <__swsetup_r+0x24>
 8007d4c:	bd38      	pop	{r3, r4, r5, pc}
 8007d4e:	0799      	lsls	r1, r3, #30
 8007d50:	bf58      	it	pl
 8007d52:	6962      	ldrpl	r2, [r4, #20]
 8007d54:	60a2      	str	r2, [r4, #8]
 8007d56:	e7f4      	b.n	8007d42 <__swsetup_r+0x8e>
 8007d58:	2000      	movs	r0, #0
 8007d5a:	e7f7      	b.n	8007d4c <__swsetup_r+0x98>
 8007d5c:	20000018 	.word	0x20000018

08007d60 <memset>:
 8007d60:	4402      	add	r2, r0
 8007d62:	4603      	mov	r3, r0
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d100      	bne.n	8007d6a <memset+0xa>
 8007d68:	4770      	bx	lr
 8007d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d6e:	e7f9      	b.n	8007d64 <memset+0x4>

08007d70 <_close_r>:
 8007d70:	b538      	push	{r3, r4, r5, lr}
 8007d72:	4d06      	ldr	r5, [pc, #24]	@ (8007d8c <_close_r+0x1c>)
 8007d74:	2300      	movs	r3, #0
 8007d76:	4604      	mov	r4, r0
 8007d78:	4608      	mov	r0, r1
 8007d7a:	602b      	str	r3, [r5, #0]
 8007d7c:	f7fa f956 	bl	800202c <_close>
 8007d80:	1c43      	adds	r3, r0, #1
 8007d82:	d102      	bne.n	8007d8a <_close_r+0x1a>
 8007d84:	682b      	ldr	r3, [r5, #0]
 8007d86:	b103      	cbz	r3, 8007d8a <_close_r+0x1a>
 8007d88:	6023      	str	r3, [r4, #0]
 8007d8a:	bd38      	pop	{r3, r4, r5, pc}
 8007d8c:	20000854 	.word	0x20000854

08007d90 <_lseek_r>:
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	4d07      	ldr	r5, [pc, #28]	@ (8007db0 <_lseek_r+0x20>)
 8007d94:	4604      	mov	r4, r0
 8007d96:	4608      	mov	r0, r1
 8007d98:	4611      	mov	r1, r2
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	602a      	str	r2, [r5, #0]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	f7fa f96b 	bl	800207a <_lseek>
 8007da4:	1c43      	adds	r3, r0, #1
 8007da6:	d102      	bne.n	8007dae <_lseek_r+0x1e>
 8007da8:	682b      	ldr	r3, [r5, #0]
 8007daa:	b103      	cbz	r3, 8007dae <_lseek_r+0x1e>
 8007dac:	6023      	str	r3, [r4, #0]
 8007dae:	bd38      	pop	{r3, r4, r5, pc}
 8007db0:	20000854 	.word	0x20000854

08007db4 <_read_r>:
 8007db4:	b538      	push	{r3, r4, r5, lr}
 8007db6:	4d07      	ldr	r5, [pc, #28]	@ (8007dd4 <_read_r+0x20>)
 8007db8:	4604      	mov	r4, r0
 8007dba:	4608      	mov	r0, r1
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	602a      	str	r2, [r5, #0]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	f7fa f8f9 	bl	8001fba <_read>
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	d102      	bne.n	8007dd2 <_read_r+0x1e>
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	b103      	cbz	r3, 8007dd2 <_read_r+0x1e>
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	bd38      	pop	{r3, r4, r5, pc}
 8007dd4:	20000854 	.word	0x20000854

08007dd8 <_write_r>:
 8007dd8:	b538      	push	{r3, r4, r5, lr}
 8007dda:	4d07      	ldr	r5, [pc, #28]	@ (8007df8 <_write_r+0x20>)
 8007ddc:	4604      	mov	r4, r0
 8007dde:	4608      	mov	r0, r1
 8007de0:	4611      	mov	r1, r2
 8007de2:	2200      	movs	r2, #0
 8007de4:	602a      	str	r2, [r5, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	f7fa f904 	bl	8001ff4 <_write>
 8007dec:	1c43      	adds	r3, r0, #1
 8007dee:	d102      	bne.n	8007df6 <_write_r+0x1e>
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	b103      	cbz	r3, 8007df6 <_write_r+0x1e>
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	bd38      	pop	{r3, r4, r5, pc}
 8007df8:	20000854 	.word	0x20000854

08007dfc <__errno>:
 8007dfc:	4b01      	ldr	r3, [pc, #4]	@ (8007e04 <__errno+0x8>)
 8007dfe:	6818      	ldr	r0, [r3, #0]
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	20000018 	.word	0x20000018

08007e08 <__libc_init_array>:
 8007e08:	b570      	push	{r4, r5, r6, lr}
 8007e0a:	4d0d      	ldr	r5, [pc, #52]	@ (8007e40 <__libc_init_array+0x38>)
 8007e0c:	4c0d      	ldr	r4, [pc, #52]	@ (8007e44 <__libc_init_array+0x3c>)
 8007e0e:	1b64      	subs	r4, r4, r5
 8007e10:	10a4      	asrs	r4, r4, #2
 8007e12:	2600      	movs	r6, #0
 8007e14:	42a6      	cmp	r6, r4
 8007e16:	d109      	bne.n	8007e2c <__libc_init_array+0x24>
 8007e18:	4d0b      	ldr	r5, [pc, #44]	@ (8007e48 <__libc_init_array+0x40>)
 8007e1a:	4c0c      	ldr	r4, [pc, #48]	@ (8007e4c <__libc_init_array+0x44>)
 8007e1c:	f000 fd22 	bl	8008864 <_init>
 8007e20:	1b64      	subs	r4, r4, r5
 8007e22:	10a4      	asrs	r4, r4, #2
 8007e24:	2600      	movs	r6, #0
 8007e26:	42a6      	cmp	r6, r4
 8007e28:	d105      	bne.n	8007e36 <__libc_init_array+0x2e>
 8007e2a:	bd70      	pop	{r4, r5, r6, pc}
 8007e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e30:	4798      	blx	r3
 8007e32:	3601      	adds	r6, #1
 8007e34:	e7ee      	b.n	8007e14 <__libc_init_array+0xc>
 8007e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e3a:	4798      	blx	r3
 8007e3c:	3601      	adds	r6, #1
 8007e3e:	e7f2      	b.n	8007e26 <__libc_init_array+0x1e>
 8007e40:	08008a14 	.word	0x08008a14
 8007e44:	08008a14 	.word	0x08008a14
 8007e48:	08008a14 	.word	0x08008a14
 8007e4c:	08008a18 	.word	0x08008a18

08007e50 <__retarget_lock_init_recursive>:
 8007e50:	4770      	bx	lr

08007e52 <__retarget_lock_acquire_recursive>:
 8007e52:	4770      	bx	lr

08007e54 <__retarget_lock_release_recursive>:
 8007e54:	4770      	bx	lr
	...

08007e58 <_free_r>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	4605      	mov	r5, r0
 8007e5c:	2900      	cmp	r1, #0
 8007e5e:	d041      	beq.n	8007ee4 <_free_r+0x8c>
 8007e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e64:	1f0c      	subs	r4, r1, #4
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	bfb8      	it	lt
 8007e6a:	18e4      	addlt	r4, r4, r3
 8007e6c:	f000 f8e0 	bl	8008030 <__malloc_lock>
 8007e70:	4a1d      	ldr	r2, [pc, #116]	@ (8007ee8 <_free_r+0x90>)
 8007e72:	6813      	ldr	r3, [r2, #0]
 8007e74:	b933      	cbnz	r3, 8007e84 <_free_r+0x2c>
 8007e76:	6063      	str	r3, [r4, #4]
 8007e78:	6014      	str	r4, [r2, #0]
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e80:	f000 b8dc 	b.w	800803c <__malloc_unlock>
 8007e84:	42a3      	cmp	r3, r4
 8007e86:	d908      	bls.n	8007e9a <_free_r+0x42>
 8007e88:	6820      	ldr	r0, [r4, #0]
 8007e8a:	1821      	adds	r1, r4, r0
 8007e8c:	428b      	cmp	r3, r1
 8007e8e:	bf01      	itttt	eq
 8007e90:	6819      	ldreq	r1, [r3, #0]
 8007e92:	685b      	ldreq	r3, [r3, #4]
 8007e94:	1809      	addeq	r1, r1, r0
 8007e96:	6021      	streq	r1, [r4, #0]
 8007e98:	e7ed      	b.n	8007e76 <_free_r+0x1e>
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	b10b      	cbz	r3, 8007ea4 <_free_r+0x4c>
 8007ea0:	42a3      	cmp	r3, r4
 8007ea2:	d9fa      	bls.n	8007e9a <_free_r+0x42>
 8007ea4:	6811      	ldr	r1, [r2, #0]
 8007ea6:	1850      	adds	r0, r2, r1
 8007ea8:	42a0      	cmp	r0, r4
 8007eaa:	d10b      	bne.n	8007ec4 <_free_r+0x6c>
 8007eac:	6820      	ldr	r0, [r4, #0]
 8007eae:	4401      	add	r1, r0
 8007eb0:	1850      	adds	r0, r2, r1
 8007eb2:	4283      	cmp	r3, r0
 8007eb4:	6011      	str	r1, [r2, #0]
 8007eb6:	d1e0      	bne.n	8007e7a <_free_r+0x22>
 8007eb8:	6818      	ldr	r0, [r3, #0]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	6053      	str	r3, [r2, #4]
 8007ebe:	4408      	add	r0, r1
 8007ec0:	6010      	str	r0, [r2, #0]
 8007ec2:	e7da      	b.n	8007e7a <_free_r+0x22>
 8007ec4:	d902      	bls.n	8007ecc <_free_r+0x74>
 8007ec6:	230c      	movs	r3, #12
 8007ec8:	602b      	str	r3, [r5, #0]
 8007eca:	e7d6      	b.n	8007e7a <_free_r+0x22>
 8007ecc:	6820      	ldr	r0, [r4, #0]
 8007ece:	1821      	adds	r1, r4, r0
 8007ed0:	428b      	cmp	r3, r1
 8007ed2:	bf04      	itt	eq
 8007ed4:	6819      	ldreq	r1, [r3, #0]
 8007ed6:	685b      	ldreq	r3, [r3, #4]
 8007ed8:	6063      	str	r3, [r4, #4]
 8007eda:	bf04      	itt	eq
 8007edc:	1809      	addeq	r1, r1, r0
 8007ede:	6021      	streq	r1, [r4, #0]
 8007ee0:	6054      	str	r4, [r2, #4]
 8007ee2:	e7ca      	b.n	8007e7a <_free_r+0x22>
 8007ee4:	bd38      	pop	{r3, r4, r5, pc}
 8007ee6:	bf00      	nop
 8007ee8:	20000860 	.word	0x20000860

08007eec <sbrk_aligned>:
 8007eec:	b570      	push	{r4, r5, r6, lr}
 8007eee:	4e0f      	ldr	r6, [pc, #60]	@ (8007f2c <sbrk_aligned+0x40>)
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	6831      	ldr	r1, [r6, #0]
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	b911      	cbnz	r1, 8007efe <sbrk_aligned+0x12>
 8007ef8:	f000 fca4 	bl	8008844 <_sbrk_r>
 8007efc:	6030      	str	r0, [r6, #0]
 8007efe:	4621      	mov	r1, r4
 8007f00:	4628      	mov	r0, r5
 8007f02:	f000 fc9f 	bl	8008844 <_sbrk_r>
 8007f06:	1c43      	adds	r3, r0, #1
 8007f08:	d103      	bne.n	8007f12 <sbrk_aligned+0x26>
 8007f0a:	f04f 34ff 	mov.w	r4, #4294967295
 8007f0e:	4620      	mov	r0, r4
 8007f10:	bd70      	pop	{r4, r5, r6, pc}
 8007f12:	1cc4      	adds	r4, r0, #3
 8007f14:	f024 0403 	bic.w	r4, r4, #3
 8007f18:	42a0      	cmp	r0, r4
 8007f1a:	d0f8      	beq.n	8007f0e <sbrk_aligned+0x22>
 8007f1c:	1a21      	subs	r1, r4, r0
 8007f1e:	4628      	mov	r0, r5
 8007f20:	f000 fc90 	bl	8008844 <_sbrk_r>
 8007f24:	3001      	adds	r0, #1
 8007f26:	d1f2      	bne.n	8007f0e <sbrk_aligned+0x22>
 8007f28:	e7ef      	b.n	8007f0a <sbrk_aligned+0x1e>
 8007f2a:	bf00      	nop
 8007f2c:	2000085c 	.word	0x2000085c

08007f30 <_malloc_r>:
 8007f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f34:	1ccd      	adds	r5, r1, #3
 8007f36:	f025 0503 	bic.w	r5, r5, #3
 8007f3a:	3508      	adds	r5, #8
 8007f3c:	2d0c      	cmp	r5, #12
 8007f3e:	bf38      	it	cc
 8007f40:	250c      	movcc	r5, #12
 8007f42:	2d00      	cmp	r5, #0
 8007f44:	4606      	mov	r6, r0
 8007f46:	db01      	blt.n	8007f4c <_malloc_r+0x1c>
 8007f48:	42a9      	cmp	r1, r5
 8007f4a:	d904      	bls.n	8007f56 <_malloc_r+0x26>
 8007f4c:	230c      	movs	r3, #12
 8007f4e:	6033      	str	r3, [r6, #0]
 8007f50:	2000      	movs	r0, #0
 8007f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800802c <_malloc_r+0xfc>
 8007f5a:	f000 f869 	bl	8008030 <__malloc_lock>
 8007f5e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f62:	461c      	mov	r4, r3
 8007f64:	bb44      	cbnz	r4, 8007fb8 <_malloc_r+0x88>
 8007f66:	4629      	mov	r1, r5
 8007f68:	4630      	mov	r0, r6
 8007f6a:	f7ff ffbf 	bl	8007eec <sbrk_aligned>
 8007f6e:	1c43      	adds	r3, r0, #1
 8007f70:	4604      	mov	r4, r0
 8007f72:	d158      	bne.n	8008026 <_malloc_r+0xf6>
 8007f74:	f8d8 4000 	ldr.w	r4, [r8]
 8007f78:	4627      	mov	r7, r4
 8007f7a:	2f00      	cmp	r7, #0
 8007f7c:	d143      	bne.n	8008006 <_malloc_r+0xd6>
 8007f7e:	2c00      	cmp	r4, #0
 8007f80:	d04b      	beq.n	800801a <_malloc_r+0xea>
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	4639      	mov	r1, r7
 8007f86:	4630      	mov	r0, r6
 8007f88:	eb04 0903 	add.w	r9, r4, r3
 8007f8c:	f000 fc5a 	bl	8008844 <_sbrk_r>
 8007f90:	4581      	cmp	r9, r0
 8007f92:	d142      	bne.n	800801a <_malloc_r+0xea>
 8007f94:	6821      	ldr	r1, [r4, #0]
 8007f96:	1a6d      	subs	r5, r5, r1
 8007f98:	4629      	mov	r1, r5
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	f7ff ffa6 	bl	8007eec <sbrk_aligned>
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	d03a      	beq.n	800801a <_malloc_r+0xea>
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	442b      	add	r3, r5
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	f8d8 3000 	ldr.w	r3, [r8]
 8007fae:	685a      	ldr	r2, [r3, #4]
 8007fb0:	bb62      	cbnz	r2, 800800c <_malloc_r+0xdc>
 8007fb2:	f8c8 7000 	str.w	r7, [r8]
 8007fb6:	e00f      	b.n	8007fd8 <_malloc_r+0xa8>
 8007fb8:	6822      	ldr	r2, [r4, #0]
 8007fba:	1b52      	subs	r2, r2, r5
 8007fbc:	d420      	bmi.n	8008000 <_malloc_r+0xd0>
 8007fbe:	2a0b      	cmp	r2, #11
 8007fc0:	d917      	bls.n	8007ff2 <_malloc_r+0xc2>
 8007fc2:	1961      	adds	r1, r4, r5
 8007fc4:	42a3      	cmp	r3, r4
 8007fc6:	6025      	str	r5, [r4, #0]
 8007fc8:	bf18      	it	ne
 8007fca:	6059      	strne	r1, [r3, #4]
 8007fcc:	6863      	ldr	r3, [r4, #4]
 8007fce:	bf08      	it	eq
 8007fd0:	f8c8 1000 	streq.w	r1, [r8]
 8007fd4:	5162      	str	r2, [r4, r5]
 8007fd6:	604b      	str	r3, [r1, #4]
 8007fd8:	4630      	mov	r0, r6
 8007fda:	f000 f82f 	bl	800803c <__malloc_unlock>
 8007fde:	f104 000b 	add.w	r0, r4, #11
 8007fe2:	1d23      	adds	r3, r4, #4
 8007fe4:	f020 0007 	bic.w	r0, r0, #7
 8007fe8:	1ac2      	subs	r2, r0, r3
 8007fea:	bf1c      	itt	ne
 8007fec:	1a1b      	subne	r3, r3, r0
 8007fee:	50a3      	strne	r3, [r4, r2]
 8007ff0:	e7af      	b.n	8007f52 <_malloc_r+0x22>
 8007ff2:	6862      	ldr	r2, [r4, #4]
 8007ff4:	42a3      	cmp	r3, r4
 8007ff6:	bf0c      	ite	eq
 8007ff8:	f8c8 2000 	streq.w	r2, [r8]
 8007ffc:	605a      	strne	r2, [r3, #4]
 8007ffe:	e7eb      	b.n	8007fd8 <_malloc_r+0xa8>
 8008000:	4623      	mov	r3, r4
 8008002:	6864      	ldr	r4, [r4, #4]
 8008004:	e7ae      	b.n	8007f64 <_malloc_r+0x34>
 8008006:	463c      	mov	r4, r7
 8008008:	687f      	ldr	r7, [r7, #4]
 800800a:	e7b6      	b.n	8007f7a <_malloc_r+0x4a>
 800800c:	461a      	mov	r2, r3
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	42a3      	cmp	r3, r4
 8008012:	d1fb      	bne.n	800800c <_malloc_r+0xdc>
 8008014:	2300      	movs	r3, #0
 8008016:	6053      	str	r3, [r2, #4]
 8008018:	e7de      	b.n	8007fd8 <_malloc_r+0xa8>
 800801a:	230c      	movs	r3, #12
 800801c:	6033      	str	r3, [r6, #0]
 800801e:	4630      	mov	r0, r6
 8008020:	f000 f80c 	bl	800803c <__malloc_unlock>
 8008024:	e794      	b.n	8007f50 <_malloc_r+0x20>
 8008026:	6005      	str	r5, [r0, #0]
 8008028:	e7d6      	b.n	8007fd8 <_malloc_r+0xa8>
 800802a:	bf00      	nop
 800802c:	20000860 	.word	0x20000860

08008030 <__malloc_lock>:
 8008030:	4801      	ldr	r0, [pc, #4]	@ (8008038 <__malloc_lock+0x8>)
 8008032:	f7ff bf0e 	b.w	8007e52 <__retarget_lock_acquire_recursive>
 8008036:	bf00      	nop
 8008038:	20000858 	.word	0x20000858

0800803c <__malloc_unlock>:
 800803c:	4801      	ldr	r0, [pc, #4]	@ (8008044 <__malloc_unlock+0x8>)
 800803e:	f7ff bf09 	b.w	8007e54 <__retarget_lock_release_recursive>
 8008042:	bf00      	nop
 8008044:	20000858 	.word	0x20000858

08008048 <__sfputc_r>:
 8008048:	6893      	ldr	r3, [r2, #8]
 800804a:	3b01      	subs	r3, #1
 800804c:	2b00      	cmp	r3, #0
 800804e:	b410      	push	{r4}
 8008050:	6093      	str	r3, [r2, #8]
 8008052:	da08      	bge.n	8008066 <__sfputc_r+0x1e>
 8008054:	6994      	ldr	r4, [r2, #24]
 8008056:	42a3      	cmp	r3, r4
 8008058:	db01      	blt.n	800805e <__sfputc_r+0x16>
 800805a:	290a      	cmp	r1, #10
 800805c:	d103      	bne.n	8008066 <__sfputc_r+0x1e>
 800805e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008062:	f7ff bde8 	b.w	8007c36 <__swbuf_r>
 8008066:	6813      	ldr	r3, [r2, #0]
 8008068:	1c58      	adds	r0, r3, #1
 800806a:	6010      	str	r0, [r2, #0]
 800806c:	7019      	strb	r1, [r3, #0]
 800806e:	4608      	mov	r0, r1
 8008070:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008074:	4770      	bx	lr

08008076 <__sfputs_r>:
 8008076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008078:	4606      	mov	r6, r0
 800807a:	460f      	mov	r7, r1
 800807c:	4614      	mov	r4, r2
 800807e:	18d5      	adds	r5, r2, r3
 8008080:	42ac      	cmp	r4, r5
 8008082:	d101      	bne.n	8008088 <__sfputs_r+0x12>
 8008084:	2000      	movs	r0, #0
 8008086:	e007      	b.n	8008098 <__sfputs_r+0x22>
 8008088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800808c:	463a      	mov	r2, r7
 800808e:	4630      	mov	r0, r6
 8008090:	f7ff ffda 	bl	8008048 <__sfputc_r>
 8008094:	1c43      	adds	r3, r0, #1
 8008096:	d1f3      	bne.n	8008080 <__sfputs_r+0xa>
 8008098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800809c <_vfiprintf_r>:
 800809c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a0:	460d      	mov	r5, r1
 80080a2:	b09d      	sub	sp, #116	@ 0x74
 80080a4:	4614      	mov	r4, r2
 80080a6:	4698      	mov	r8, r3
 80080a8:	4606      	mov	r6, r0
 80080aa:	b118      	cbz	r0, 80080b4 <_vfiprintf_r+0x18>
 80080ac:	6a03      	ldr	r3, [r0, #32]
 80080ae:	b90b      	cbnz	r3, 80080b4 <_vfiprintf_r+0x18>
 80080b0:	f7ff fcd8 	bl	8007a64 <__sinit>
 80080b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080b6:	07d9      	lsls	r1, r3, #31
 80080b8:	d405      	bmi.n	80080c6 <_vfiprintf_r+0x2a>
 80080ba:	89ab      	ldrh	r3, [r5, #12]
 80080bc:	059a      	lsls	r2, r3, #22
 80080be:	d402      	bmi.n	80080c6 <_vfiprintf_r+0x2a>
 80080c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080c2:	f7ff fec6 	bl	8007e52 <__retarget_lock_acquire_recursive>
 80080c6:	89ab      	ldrh	r3, [r5, #12]
 80080c8:	071b      	lsls	r3, r3, #28
 80080ca:	d501      	bpl.n	80080d0 <_vfiprintf_r+0x34>
 80080cc:	692b      	ldr	r3, [r5, #16]
 80080ce:	b99b      	cbnz	r3, 80080f8 <_vfiprintf_r+0x5c>
 80080d0:	4629      	mov	r1, r5
 80080d2:	4630      	mov	r0, r6
 80080d4:	f7ff fdee 	bl	8007cb4 <__swsetup_r>
 80080d8:	b170      	cbz	r0, 80080f8 <_vfiprintf_r+0x5c>
 80080da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080dc:	07dc      	lsls	r4, r3, #31
 80080de:	d504      	bpl.n	80080ea <_vfiprintf_r+0x4e>
 80080e0:	f04f 30ff 	mov.w	r0, #4294967295
 80080e4:	b01d      	add	sp, #116	@ 0x74
 80080e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ea:	89ab      	ldrh	r3, [r5, #12]
 80080ec:	0598      	lsls	r0, r3, #22
 80080ee:	d4f7      	bmi.n	80080e0 <_vfiprintf_r+0x44>
 80080f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080f2:	f7ff feaf 	bl	8007e54 <__retarget_lock_release_recursive>
 80080f6:	e7f3      	b.n	80080e0 <_vfiprintf_r+0x44>
 80080f8:	2300      	movs	r3, #0
 80080fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80080fc:	2320      	movs	r3, #32
 80080fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008102:	f8cd 800c 	str.w	r8, [sp, #12]
 8008106:	2330      	movs	r3, #48	@ 0x30
 8008108:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80082b8 <_vfiprintf_r+0x21c>
 800810c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008110:	f04f 0901 	mov.w	r9, #1
 8008114:	4623      	mov	r3, r4
 8008116:	469a      	mov	sl, r3
 8008118:	f813 2b01 	ldrb.w	r2, [r3], #1
 800811c:	b10a      	cbz	r2, 8008122 <_vfiprintf_r+0x86>
 800811e:	2a25      	cmp	r2, #37	@ 0x25
 8008120:	d1f9      	bne.n	8008116 <_vfiprintf_r+0x7a>
 8008122:	ebba 0b04 	subs.w	fp, sl, r4
 8008126:	d00b      	beq.n	8008140 <_vfiprintf_r+0xa4>
 8008128:	465b      	mov	r3, fp
 800812a:	4622      	mov	r2, r4
 800812c:	4629      	mov	r1, r5
 800812e:	4630      	mov	r0, r6
 8008130:	f7ff ffa1 	bl	8008076 <__sfputs_r>
 8008134:	3001      	adds	r0, #1
 8008136:	f000 80a7 	beq.w	8008288 <_vfiprintf_r+0x1ec>
 800813a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800813c:	445a      	add	r2, fp
 800813e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008140:	f89a 3000 	ldrb.w	r3, [sl]
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 809f 	beq.w	8008288 <_vfiprintf_r+0x1ec>
 800814a:	2300      	movs	r3, #0
 800814c:	f04f 32ff 	mov.w	r2, #4294967295
 8008150:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008154:	f10a 0a01 	add.w	sl, sl, #1
 8008158:	9304      	str	r3, [sp, #16]
 800815a:	9307      	str	r3, [sp, #28]
 800815c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008160:	931a      	str	r3, [sp, #104]	@ 0x68
 8008162:	4654      	mov	r4, sl
 8008164:	2205      	movs	r2, #5
 8008166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800816a:	4853      	ldr	r0, [pc, #332]	@ (80082b8 <_vfiprintf_r+0x21c>)
 800816c:	f7f8 f840 	bl	80001f0 <memchr>
 8008170:	9a04      	ldr	r2, [sp, #16]
 8008172:	b9d8      	cbnz	r0, 80081ac <_vfiprintf_r+0x110>
 8008174:	06d1      	lsls	r1, r2, #27
 8008176:	bf44      	itt	mi
 8008178:	2320      	movmi	r3, #32
 800817a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800817e:	0713      	lsls	r3, r2, #28
 8008180:	bf44      	itt	mi
 8008182:	232b      	movmi	r3, #43	@ 0x2b
 8008184:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008188:	f89a 3000 	ldrb.w	r3, [sl]
 800818c:	2b2a      	cmp	r3, #42	@ 0x2a
 800818e:	d015      	beq.n	80081bc <_vfiprintf_r+0x120>
 8008190:	9a07      	ldr	r2, [sp, #28]
 8008192:	4654      	mov	r4, sl
 8008194:	2000      	movs	r0, #0
 8008196:	f04f 0c0a 	mov.w	ip, #10
 800819a:	4621      	mov	r1, r4
 800819c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081a0:	3b30      	subs	r3, #48	@ 0x30
 80081a2:	2b09      	cmp	r3, #9
 80081a4:	d94b      	bls.n	800823e <_vfiprintf_r+0x1a2>
 80081a6:	b1b0      	cbz	r0, 80081d6 <_vfiprintf_r+0x13a>
 80081a8:	9207      	str	r2, [sp, #28]
 80081aa:	e014      	b.n	80081d6 <_vfiprintf_r+0x13a>
 80081ac:	eba0 0308 	sub.w	r3, r0, r8
 80081b0:	fa09 f303 	lsl.w	r3, r9, r3
 80081b4:	4313      	orrs	r3, r2
 80081b6:	9304      	str	r3, [sp, #16]
 80081b8:	46a2      	mov	sl, r4
 80081ba:	e7d2      	b.n	8008162 <_vfiprintf_r+0xc6>
 80081bc:	9b03      	ldr	r3, [sp, #12]
 80081be:	1d19      	adds	r1, r3, #4
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	9103      	str	r1, [sp, #12]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	bfbb      	ittet	lt
 80081c8:	425b      	neglt	r3, r3
 80081ca:	f042 0202 	orrlt.w	r2, r2, #2
 80081ce:	9307      	strge	r3, [sp, #28]
 80081d0:	9307      	strlt	r3, [sp, #28]
 80081d2:	bfb8      	it	lt
 80081d4:	9204      	strlt	r2, [sp, #16]
 80081d6:	7823      	ldrb	r3, [r4, #0]
 80081d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80081da:	d10a      	bne.n	80081f2 <_vfiprintf_r+0x156>
 80081dc:	7863      	ldrb	r3, [r4, #1]
 80081de:	2b2a      	cmp	r3, #42	@ 0x2a
 80081e0:	d132      	bne.n	8008248 <_vfiprintf_r+0x1ac>
 80081e2:	9b03      	ldr	r3, [sp, #12]
 80081e4:	1d1a      	adds	r2, r3, #4
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	9203      	str	r2, [sp, #12]
 80081ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081ee:	3402      	adds	r4, #2
 80081f0:	9305      	str	r3, [sp, #20]
 80081f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80082c8 <_vfiprintf_r+0x22c>
 80081f6:	7821      	ldrb	r1, [r4, #0]
 80081f8:	2203      	movs	r2, #3
 80081fa:	4650      	mov	r0, sl
 80081fc:	f7f7 fff8 	bl	80001f0 <memchr>
 8008200:	b138      	cbz	r0, 8008212 <_vfiprintf_r+0x176>
 8008202:	9b04      	ldr	r3, [sp, #16]
 8008204:	eba0 000a 	sub.w	r0, r0, sl
 8008208:	2240      	movs	r2, #64	@ 0x40
 800820a:	4082      	lsls	r2, r0
 800820c:	4313      	orrs	r3, r2
 800820e:	3401      	adds	r4, #1
 8008210:	9304      	str	r3, [sp, #16]
 8008212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008216:	4829      	ldr	r0, [pc, #164]	@ (80082bc <_vfiprintf_r+0x220>)
 8008218:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800821c:	2206      	movs	r2, #6
 800821e:	f7f7 ffe7 	bl	80001f0 <memchr>
 8008222:	2800      	cmp	r0, #0
 8008224:	d03f      	beq.n	80082a6 <_vfiprintf_r+0x20a>
 8008226:	4b26      	ldr	r3, [pc, #152]	@ (80082c0 <_vfiprintf_r+0x224>)
 8008228:	bb1b      	cbnz	r3, 8008272 <_vfiprintf_r+0x1d6>
 800822a:	9b03      	ldr	r3, [sp, #12]
 800822c:	3307      	adds	r3, #7
 800822e:	f023 0307 	bic.w	r3, r3, #7
 8008232:	3308      	adds	r3, #8
 8008234:	9303      	str	r3, [sp, #12]
 8008236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008238:	443b      	add	r3, r7
 800823a:	9309      	str	r3, [sp, #36]	@ 0x24
 800823c:	e76a      	b.n	8008114 <_vfiprintf_r+0x78>
 800823e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008242:	460c      	mov	r4, r1
 8008244:	2001      	movs	r0, #1
 8008246:	e7a8      	b.n	800819a <_vfiprintf_r+0xfe>
 8008248:	2300      	movs	r3, #0
 800824a:	3401      	adds	r4, #1
 800824c:	9305      	str	r3, [sp, #20]
 800824e:	4619      	mov	r1, r3
 8008250:	f04f 0c0a 	mov.w	ip, #10
 8008254:	4620      	mov	r0, r4
 8008256:	f810 2b01 	ldrb.w	r2, [r0], #1
 800825a:	3a30      	subs	r2, #48	@ 0x30
 800825c:	2a09      	cmp	r2, #9
 800825e:	d903      	bls.n	8008268 <_vfiprintf_r+0x1cc>
 8008260:	2b00      	cmp	r3, #0
 8008262:	d0c6      	beq.n	80081f2 <_vfiprintf_r+0x156>
 8008264:	9105      	str	r1, [sp, #20]
 8008266:	e7c4      	b.n	80081f2 <_vfiprintf_r+0x156>
 8008268:	fb0c 2101 	mla	r1, ip, r1, r2
 800826c:	4604      	mov	r4, r0
 800826e:	2301      	movs	r3, #1
 8008270:	e7f0      	b.n	8008254 <_vfiprintf_r+0x1b8>
 8008272:	ab03      	add	r3, sp, #12
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	462a      	mov	r2, r5
 8008278:	4b12      	ldr	r3, [pc, #72]	@ (80082c4 <_vfiprintf_r+0x228>)
 800827a:	a904      	add	r1, sp, #16
 800827c:	4630      	mov	r0, r6
 800827e:	f3af 8000 	nop.w
 8008282:	4607      	mov	r7, r0
 8008284:	1c78      	adds	r0, r7, #1
 8008286:	d1d6      	bne.n	8008236 <_vfiprintf_r+0x19a>
 8008288:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800828a:	07d9      	lsls	r1, r3, #31
 800828c:	d405      	bmi.n	800829a <_vfiprintf_r+0x1fe>
 800828e:	89ab      	ldrh	r3, [r5, #12]
 8008290:	059a      	lsls	r2, r3, #22
 8008292:	d402      	bmi.n	800829a <_vfiprintf_r+0x1fe>
 8008294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008296:	f7ff fddd 	bl	8007e54 <__retarget_lock_release_recursive>
 800829a:	89ab      	ldrh	r3, [r5, #12]
 800829c:	065b      	lsls	r3, r3, #25
 800829e:	f53f af1f 	bmi.w	80080e0 <_vfiprintf_r+0x44>
 80082a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082a4:	e71e      	b.n	80080e4 <_vfiprintf_r+0x48>
 80082a6:	ab03      	add	r3, sp, #12
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	462a      	mov	r2, r5
 80082ac:	4b05      	ldr	r3, [pc, #20]	@ (80082c4 <_vfiprintf_r+0x228>)
 80082ae:	a904      	add	r1, sp, #16
 80082b0:	4630      	mov	r0, r6
 80082b2:	f000 f879 	bl	80083a8 <_printf_i>
 80082b6:	e7e4      	b.n	8008282 <_vfiprintf_r+0x1e6>
 80082b8:	080089d8 	.word	0x080089d8
 80082bc:	080089e2 	.word	0x080089e2
 80082c0:	00000000 	.word	0x00000000
 80082c4:	08008077 	.word	0x08008077
 80082c8:	080089de 	.word	0x080089de

080082cc <_printf_common>:
 80082cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d0:	4616      	mov	r6, r2
 80082d2:	4698      	mov	r8, r3
 80082d4:	688a      	ldr	r2, [r1, #8]
 80082d6:	690b      	ldr	r3, [r1, #16]
 80082d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082dc:	4293      	cmp	r3, r2
 80082de:	bfb8      	it	lt
 80082e0:	4613      	movlt	r3, r2
 80082e2:	6033      	str	r3, [r6, #0]
 80082e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082e8:	4607      	mov	r7, r0
 80082ea:	460c      	mov	r4, r1
 80082ec:	b10a      	cbz	r2, 80082f2 <_printf_common+0x26>
 80082ee:	3301      	adds	r3, #1
 80082f0:	6033      	str	r3, [r6, #0]
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	0699      	lsls	r1, r3, #26
 80082f6:	bf42      	ittt	mi
 80082f8:	6833      	ldrmi	r3, [r6, #0]
 80082fa:	3302      	addmi	r3, #2
 80082fc:	6033      	strmi	r3, [r6, #0]
 80082fe:	6825      	ldr	r5, [r4, #0]
 8008300:	f015 0506 	ands.w	r5, r5, #6
 8008304:	d106      	bne.n	8008314 <_printf_common+0x48>
 8008306:	f104 0a19 	add.w	sl, r4, #25
 800830a:	68e3      	ldr	r3, [r4, #12]
 800830c:	6832      	ldr	r2, [r6, #0]
 800830e:	1a9b      	subs	r3, r3, r2
 8008310:	42ab      	cmp	r3, r5
 8008312:	dc26      	bgt.n	8008362 <_printf_common+0x96>
 8008314:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008318:	6822      	ldr	r2, [r4, #0]
 800831a:	3b00      	subs	r3, #0
 800831c:	bf18      	it	ne
 800831e:	2301      	movne	r3, #1
 8008320:	0692      	lsls	r2, r2, #26
 8008322:	d42b      	bmi.n	800837c <_printf_common+0xb0>
 8008324:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008328:	4641      	mov	r1, r8
 800832a:	4638      	mov	r0, r7
 800832c:	47c8      	blx	r9
 800832e:	3001      	adds	r0, #1
 8008330:	d01e      	beq.n	8008370 <_printf_common+0xa4>
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	6922      	ldr	r2, [r4, #16]
 8008336:	f003 0306 	and.w	r3, r3, #6
 800833a:	2b04      	cmp	r3, #4
 800833c:	bf02      	ittt	eq
 800833e:	68e5      	ldreq	r5, [r4, #12]
 8008340:	6833      	ldreq	r3, [r6, #0]
 8008342:	1aed      	subeq	r5, r5, r3
 8008344:	68a3      	ldr	r3, [r4, #8]
 8008346:	bf0c      	ite	eq
 8008348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800834c:	2500      	movne	r5, #0
 800834e:	4293      	cmp	r3, r2
 8008350:	bfc4      	itt	gt
 8008352:	1a9b      	subgt	r3, r3, r2
 8008354:	18ed      	addgt	r5, r5, r3
 8008356:	2600      	movs	r6, #0
 8008358:	341a      	adds	r4, #26
 800835a:	42b5      	cmp	r5, r6
 800835c:	d11a      	bne.n	8008394 <_printf_common+0xc8>
 800835e:	2000      	movs	r0, #0
 8008360:	e008      	b.n	8008374 <_printf_common+0xa8>
 8008362:	2301      	movs	r3, #1
 8008364:	4652      	mov	r2, sl
 8008366:	4641      	mov	r1, r8
 8008368:	4638      	mov	r0, r7
 800836a:	47c8      	blx	r9
 800836c:	3001      	adds	r0, #1
 800836e:	d103      	bne.n	8008378 <_printf_common+0xac>
 8008370:	f04f 30ff 	mov.w	r0, #4294967295
 8008374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008378:	3501      	adds	r5, #1
 800837a:	e7c6      	b.n	800830a <_printf_common+0x3e>
 800837c:	18e1      	adds	r1, r4, r3
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	2030      	movs	r0, #48	@ 0x30
 8008382:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008386:	4422      	add	r2, r4
 8008388:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800838c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008390:	3302      	adds	r3, #2
 8008392:	e7c7      	b.n	8008324 <_printf_common+0x58>
 8008394:	2301      	movs	r3, #1
 8008396:	4622      	mov	r2, r4
 8008398:	4641      	mov	r1, r8
 800839a:	4638      	mov	r0, r7
 800839c:	47c8      	blx	r9
 800839e:	3001      	adds	r0, #1
 80083a0:	d0e6      	beq.n	8008370 <_printf_common+0xa4>
 80083a2:	3601      	adds	r6, #1
 80083a4:	e7d9      	b.n	800835a <_printf_common+0x8e>
	...

080083a8 <_printf_i>:
 80083a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083ac:	7e0f      	ldrb	r7, [r1, #24]
 80083ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083b0:	2f78      	cmp	r7, #120	@ 0x78
 80083b2:	4691      	mov	r9, r2
 80083b4:	4680      	mov	r8, r0
 80083b6:	460c      	mov	r4, r1
 80083b8:	469a      	mov	sl, r3
 80083ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083be:	d807      	bhi.n	80083d0 <_printf_i+0x28>
 80083c0:	2f62      	cmp	r7, #98	@ 0x62
 80083c2:	d80a      	bhi.n	80083da <_printf_i+0x32>
 80083c4:	2f00      	cmp	r7, #0
 80083c6:	f000 80d1 	beq.w	800856c <_printf_i+0x1c4>
 80083ca:	2f58      	cmp	r7, #88	@ 0x58
 80083cc:	f000 80b8 	beq.w	8008540 <_printf_i+0x198>
 80083d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083d8:	e03a      	b.n	8008450 <_printf_i+0xa8>
 80083da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083de:	2b15      	cmp	r3, #21
 80083e0:	d8f6      	bhi.n	80083d0 <_printf_i+0x28>
 80083e2:	a101      	add	r1, pc, #4	@ (adr r1, 80083e8 <_printf_i+0x40>)
 80083e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083e8:	08008441 	.word	0x08008441
 80083ec:	08008455 	.word	0x08008455
 80083f0:	080083d1 	.word	0x080083d1
 80083f4:	080083d1 	.word	0x080083d1
 80083f8:	080083d1 	.word	0x080083d1
 80083fc:	080083d1 	.word	0x080083d1
 8008400:	08008455 	.word	0x08008455
 8008404:	080083d1 	.word	0x080083d1
 8008408:	080083d1 	.word	0x080083d1
 800840c:	080083d1 	.word	0x080083d1
 8008410:	080083d1 	.word	0x080083d1
 8008414:	08008553 	.word	0x08008553
 8008418:	0800847f 	.word	0x0800847f
 800841c:	0800850d 	.word	0x0800850d
 8008420:	080083d1 	.word	0x080083d1
 8008424:	080083d1 	.word	0x080083d1
 8008428:	08008575 	.word	0x08008575
 800842c:	080083d1 	.word	0x080083d1
 8008430:	0800847f 	.word	0x0800847f
 8008434:	080083d1 	.word	0x080083d1
 8008438:	080083d1 	.word	0x080083d1
 800843c:	08008515 	.word	0x08008515
 8008440:	6833      	ldr	r3, [r6, #0]
 8008442:	1d1a      	adds	r2, r3, #4
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	6032      	str	r2, [r6, #0]
 8008448:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800844c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008450:	2301      	movs	r3, #1
 8008452:	e09c      	b.n	800858e <_printf_i+0x1e6>
 8008454:	6833      	ldr	r3, [r6, #0]
 8008456:	6820      	ldr	r0, [r4, #0]
 8008458:	1d19      	adds	r1, r3, #4
 800845a:	6031      	str	r1, [r6, #0]
 800845c:	0606      	lsls	r6, r0, #24
 800845e:	d501      	bpl.n	8008464 <_printf_i+0xbc>
 8008460:	681d      	ldr	r5, [r3, #0]
 8008462:	e003      	b.n	800846c <_printf_i+0xc4>
 8008464:	0645      	lsls	r5, r0, #25
 8008466:	d5fb      	bpl.n	8008460 <_printf_i+0xb8>
 8008468:	f9b3 5000 	ldrsh.w	r5, [r3]
 800846c:	2d00      	cmp	r5, #0
 800846e:	da03      	bge.n	8008478 <_printf_i+0xd0>
 8008470:	232d      	movs	r3, #45	@ 0x2d
 8008472:	426d      	negs	r5, r5
 8008474:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008478:	4858      	ldr	r0, [pc, #352]	@ (80085dc <_printf_i+0x234>)
 800847a:	230a      	movs	r3, #10
 800847c:	e011      	b.n	80084a2 <_printf_i+0xfa>
 800847e:	6821      	ldr	r1, [r4, #0]
 8008480:	6833      	ldr	r3, [r6, #0]
 8008482:	0608      	lsls	r0, r1, #24
 8008484:	f853 5b04 	ldr.w	r5, [r3], #4
 8008488:	d402      	bmi.n	8008490 <_printf_i+0xe8>
 800848a:	0649      	lsls	r1, r1, #25
 800848c:	bf48      	it	mi
 800848e:	b2ad      	uxthmi	r5, r5
 8008490:	2f6f      	cmp	r7, #111	@ 0x6f
 8008492:	4852      	ldr	r0, [pc, #328]	@ (80085dc <_printf_i+0x234>)
 8008494:	6033      	str	r3, [r6, #0]
 8008496:	bf14      	ite	ne
 8008498:	230a      	movne	r3, #10
 800849a:	2308      	moveq	r3, #8
 800849c:	2100      	movs	r1, #0
 800849e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80084a2:	6866      	ldr	r6, [r4, #4]
 80084a4:	60a6      	str	r6, [r4, #8]
 80084a6:	2e00      	cmp	r6, #0
 80084a8:	db05      	blt.n	80084b6 <_printf_i+0x10e>
 80084aa:	6821      	ldr	r1, [r4, #0]
 80084ac:	432e      	orrs	r6, r5
 80084ae:	f021 0104 	bic.w	r1, r1, #4
 80084b2:	6021      	str	r1, [r4, #0]
 80084b4:	d04b      	beq.n	800854e <_printf_i+0x1a6>
 80084b6:	4616      	mov	r6, r2
 80084b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80084bc:	fb03 5711 	mls	r7, r3, r1, r5
 80084c0:	5dc7      	ldrb	r7, [r0, r7]
 80084c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084c6:	462f      	mov	r7, r5
 80084c8:	42bb      	cmp	r3, r7
 80084ca:	460d      	mov	r5, r1
 80084cc:	d9f4      	bls.n	80084b8 <_printf_i+0x110>
 80084ce:	2b08      	cmp	r3, #8
 80084d0:	d10b      	bne.n	80084ea <_printf_i+0x142>
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	07df      	lsls	r7, r3, #31
 80084d6:	d508      	bpl.n	80084ea <_printf_i+0x142>
 80084d8:	6923      	ldr	r3, [r4, #16]
 80084da:	6861      	ldr	r1, [r4, #4]
 80084dc:	4299      	cmp	r1, r3
 80084de:	bfde      	ittt	le
 80084e0:	2330      	movle	r3, #48	@ 0x30
 80084e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084ea:	1b92      	subs	r2, r2, r6
 80084ec:	6122      	str	r2, [r4, #16]
 80084ee:	f8cd a000 	str.w	sl, [sp]
 80084f2:	464b      	mov	r3, r9
 80084f4:	aa03      	add	r2, sp, #12
 80084f6:	4621      	mov	r1, r4
 80084f8:	4640      	mov	r0, r8
 80084fa:	f7ff fee7 	bl	80082cc <_printf_common>
 80084fe:	3001      	adds	r0, #1
 8008500:	d14a      	bne.n	8008598 <_printf_i+0x1f0>
 8008502:	f04f 30ff 	mov.w	r0, #4294967295
 8008506:	b004      	add	sp, #16
 8008508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	f043 0320 	orr.w	r3, r3, #32
 8008512:	6023      	str	r3, [r4, #0]
 8008514:	4832      	ldr	r0, [pc, #200]	@ (80085e0 <_printf_i+0x238>)
 8008516:	2778      	movs	r7, #120	@ 0x78
 8008518:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	6831      	ldr	r1, [r6, #0]
 8008520:	061f      	lsls	r7, r3, #24
 8008522:	f851 5b04 	ldr.w	r5, [r1], #4
 8008526:	d402      	bmi.n	800852e <_printf_i+0x186>
 8008528:	065f      	lsls	r7, r3, #25
 800852a:	bf48      	it	mi
 800852c:	b2ad      	uxthmi	r5, r5
 800852e:	6031      	str	r1, [r6, #0]
 8008530:	07d9      	lsls	r1, r3, #31
 8008532:	bf44      	itt	mi
 8008534:	f043 0320 	orrmi.w	r3, r3, #32
 8008538:	6023      	strmi	r3, [r4, #0]
 800853a:	b11d      	cbz	r5, 8008544 <_printf_i+0x19c>
 800853c:	2310      	movs	r3, #16
 800853e:	e7ad      	b.n	800849c <_printf_i+0xf4>
 8008540:	4826      	ldr	r0, [pc, #152]	@ (80085dc <_printf_i+0x234>)
 8008542:	e7e9      	b.n	8008518 <_printf_i+0x170>
 8008544:	6823      	ldr	r3, [r4, #0]
 8008546:	f023 0320 	bic.w	r3, r3, #32
 800854a:	6023      	str	r3, [r4, #0]
 800854c:	e7f6      	b.n	800853c <_printf_i+0x194>
 800854e:	4616      	mov	r6, r2
 8008550:	e7bd      	b.n	80084ce <_printf_i+0x126>
 8008552:	6833      	ldr	r3, [r6, #0]
 8008554:	6825      	ldr	r5, [r4, #0]
 8008556:	6961      	ldr	r1, [r4, #20]
 8008558:	1d18      	adds	r0, r3, #4
 800855a:	6030      	str	r0, [r6, #0]
 800855c:	062e      	lsls	r6, r5, #24
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	d501      	bpl.n	8008566 <_printf_i+0x1be>
 8008562:	6019      	str	r1, [r3, #0]
 8008564:	e002      	b.n	800856c <_printf_i+0x1c4>
 8008566:	0668      	lsls	r0, r5, #25
 8008568:	d5fb      	bpl.n	8008562 <_printf_i+0x1ba>
 800856a:	8019      	strh	r1, [r3, #0]
 800856c:	2300      	movs	r3, #0
 800856e:	6123      	str	r3, [r4, #16]
 8008570:	4616      	mov	r6, r2
 8008572:	e7bc      	b.n	80084ee <_printf_i+0x146>
 8008574:	6833      	ldr	r3, [r6, #0]
 8008576:	1d1a      	adds	r2, r3, #4
 8008578:	6032      	str	r2, [r6, #0]
 800857a:	681e      	ldr	r6, [r3, #0]
 800857c:	6862      	ldr	r2, [r4, #4]
 800857e:	2100      	movs	r1, #0
 8008580:	4630      	mov	r0, r6
 8008582:	f7f7 fe35 	bl	80001f0 <memchr>
 8008586:	b108      	cbz	r0, 800858c <_printf_i+0x1e4>
 8008588:	1b80      	subs	r0, r0, r6
 800858a:	6060      	str	r0, [r4, #4]
 800858c:	6863      	ldr	r3, [r4, #4]
 800858e:	6123      	str	r3, [r4, #16]
 8008590:	2300      	movs	r3, #0
 8008592:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008596:	e7aa      	b.n	80084ee <_printf_i+0x146>
 8008598:	6923      	ldr	r3, [r4, #16]
 800859a:	4632      	mov	r2, r6
 800859c:	4649      	mov	r1, r9
 800859e:	4640      	mov	r0, r8
 80085a0:	47d0      	blx	sl
 80085a2:	3001      	adds	r0, #1
 80085a4:	d0ad      	beq.n	8008502 <_printf_i+0x15a>
 80085a6:	6823      	ldr	r3, [r4, #0]
 80085a8:	079b      	lsls	r3, r3, #30
 80085aa:	d413      	bmi.n	80085d4 <_printf_i+0x22c>
 80085ac:	68e0      	ldr	r0, [r4, #12]
 80085ae:	9b03      	ldr	r3, [sp, #12]
 80085b0:	4298      	cmp	r0, r3
 80085b2:	bfb8      	it	lt
 80085b4:	4618      	movlt	r0, r3
 80085b6:	e7a6      	b.n	8008506 <_printf_i+0x15e>
 80085b8:	2301      	movs	r3, #1
 80085ba:	4632      	mov	r2, r6
 80085bc:	4649      	mov	r1, r9
 80085be:	4640      	mov	r0, r8
 80085c0:	47d0      	blx	sl
 80085c2:	3001      	adds	r0, #1
 80085c4:	d09d      	beq.n	8008502 <_printf_i+0x15a>
 80085c6:	3501      	adds	r5, #1
 80085c8:	68e3      	ldr	r3, [r4, #12]
 80085ca:	9903      	ldr	r1, [sp, #12]
 80085cc:	1a5b      	subs	r3, r3, r1
 80085ce:	42ab      	cmp	r3, r5
 80085d0:	dcf2      	bgt.n	80085b8 <_printf_i+0x210>
 80085d2:	e7eb      	b.n	80085ac <_printf_i+0x204>
 80085d4:	2500      	movs	r5, #0
 80085d6:	f104 0619 	add.w	r6, r4, #25
 80085da:	e7f5      	b.n	80085c8 <_printf_i+0x220>
 80085dc:	080089e9 	.word	0x080089e9
 80085e0:	080089fa 	.word	0x080089fa

080085e4 <__sflush_r>:
 80085e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ec:	0716      	lsls	r6, r2, #28
 80085ee:	4605      	mov	r5, r0
 80085f0:	460c      	mov	r4, r1
 80085f2:	d454      	bmi.n	800869e <__sflush_r+0xba>
 80085f4:	684b      	ldr	r3, [r1, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	dc02      	bgt.n	8008600 <__sflush_r+0x1c>
 80085fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	dd48      	ble.n	8008692 <__sflush_r+0xae>
 8008600:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008602:	2e00      	cmp	r6, #0
 8008604:	d045      	beq.n	8008692 <__sflush_r+0xae>
 8008606:	2300      	movs	r3, #0
 8008608:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800860c:	682f      	ldr	r7, [r5, #0]
 800860e:	6a21      	ldr	r1, [r4, #32]
 8008610:	602b      	str	r3, [r5, #0]
 8008612:	d030      	beq.n	8008676 <__sflush_r+0x92>
 8008614:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008616:	89a3      	ldrh	r3, [r4, #12]
 8008618:	0759      	lsls	r1, r3, #29
 800861a:	d505      	bpl.n	8008628 <__sflush_r+0x44>
 800861c:	6863      	ldr	r3, [r4, #4]
 800861e:	1ad2      	subs	r2, r2, r3
 8008620:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008622:	b10b      	cbz	r3, 8008628 <__sflush_r+0x44>
 8008624:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008626:	1ad2      	subs	r2, r2, r3
 8008628:	2300      	movs	r3, #0
 800862a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800862c:	6a21      	ldr	r1, [r4, #32]
 800862e:	4628      	mov	r0, r5
 8008630:	47b0      	blx	r6
 8008632:	1c43      	adds	r3, r0, #1
 8008634:	89a3      	ldrh	r3, [r4, #12]
 8008636:	d106      	bne.n	8008646 <__sflush_r+0x62>
 8008638:	6829      	ldr	r1, [r5, #0]
 800863a:	291d      	cmp	r1, #29
 800863c:	d82b      	bhi.n	8008696 <__sflush_r+0xb2>
 800863e:	4a2a      	ldr	r2, [pc, #168]	@ (80086e8 <__sflush_r+0x104>)
 8008640:	40ca      	lsrs	r2, r1
 8008642:	07d6      	lsls	r6, r2, #31
 8008644:	d527      	bpl.n	8008696 <__sflush_r+0xb2>
 8008646:	2200      	movs	r2, #0
 8008648:	6062      	str	r2, [r4, #4]
 800864a:	04d9      	lsls	r1, r3, #19
 800864c:	6922      	ldr	r2, [r4, #16]
 800864e:	6022      	str	r2, [r4, #0]
 8008650:	d504      	bpl.n	800865c <__sflush_r+0x78>
 8008652:	1c42      	adds	r2, r0, #1
 8008654:	d101      	bne.n	800865a <__sflush_r+0x76>
 8008656:	682b      	ldr	r3, [r5, #0]
 8008658:	b903      	cbnz	r3, 800865c <__sflush_r+0x78>
 800865a:	6560      	str	r0, [r4, #84]	@ 0x54
 800865c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800865e:	602f      	str	r7, [r5, #0]
 8008660:	b1b9      	cbz	r1, 8008692 <__sflush_r+0xae>
 8008662:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008666:	4299      	cmp	r1, r3
 8008668:	d002      	beq.n	8008670 <__sflush_r+0x8c>
 800866a:	4628      	mov	r0, r5
 800866c:	f7ff fbf4 	bl	8007e58 <_free_r>
 8008670:	2300      	movs	r3, #0
 8008672:	6363      	str	r3, [r4, #52]	@ 0x34
 8008674:	e00d      	b.n	8008692 <__sflush_r+0xae>
 8008676:	2301      	movs	r3, #1
 8008678:	4628      	mov	r0, r5
 800867a:	47b0      	blx	r6
 800867c:	4602      	mov	r2, r0
 800867e:	1c50      	adds	r0, r2, #1
 8008680:	d1c9      	bne.n	8008616 <__sflush_r+0x32>
 8008682:	682b      	ldr	r3, [r5, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d0c6      	beq.n	8008616 <__sflush_r+0x32>
 8008688:	2b1d      	cmp	r3, #29
 800868a:	d001      	beq.n	8008690 <__sflush_r+0xac>
 800868c:	2b16      	cmp	r3, #22
 800868e:	d11e      	bne.n	80086ce <__sflush_r+0xea>
 8008690:	602f      	str	r7, [r5, #0]
 8008692:	2000      	movs	r0, #0
 8008694:	e022      	b.n	80086dc <__sflush_r+0xf8>
 8008696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800869a:	b21b      	sxth	r3, r3
 800869c:	e01b      	b.n	80086d6 <__sflush_r+0xf2>
 800869e:	690f      	ldr	r7, [r1, #16]
 80086a0:	2f00      	cmp	r7, #0
 80086a2:	d0f6      	beq.n	8008692 <__sflush_r+0xae>
 80086a4:	0793      	lsls	r3, r2, #30
 80086a6:	680e      	ldr	r6, [r1, #0]
 80086a8:	bf08      	it	eq
 80086aa:	694b      	ldreq	r3, [r1, #20]
 80086ac:	600f      	str	r7, [r1, #0]
 80086ae:	bf18      	it	ne
 80086b0:	2300      	movne	r3, #0
 80086b2:	eba6 0807 	sub.w	r8, r6, r7
 80086b6:	608b      	str	r3, [r1, #8]
 80086b8:	f1b8 0f00 	cmp.w	r8, #0
 80086bc:	dde9      	ble.n	8008692 <__sflush_r+0xae>
 80086be:	6a21      	ldr	r1, [r4, #32]
 80086c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80086c2:	4643      	mov	r3, r8
 80086c4:	463a      	mov	r2, r7
 80086c6:	4628      	mov	r0, r5
 80086c8:	47b0      	blx	r6
 80086ca:	2800      	cmp	r0, #0
 80086cc:	dc08      	bgt.n	80086e0 <__sflush_r+0xfc>
 80086ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086d6:	81a3      	strh	r3, [r4, #12]
 80086d8:	f04f 30ff 	mov.w	r0, #4294967295
 80086dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086e0:	4407      	add	r7, r0
 80086e2:	eba8 0800 	sub.w	r8, r8, r0
 80086e6:	e7e7      	b.n	80086b8 <__sflush_r+0xd4>
 80086e8:	20400001 	.word	0x20400001

080086ec <_fflush_r>:
 80086ec:	b538      	push	{r3, r4, r5, lr}
 80086ee:	690b      	ldr	r3, [r1, #16]
 80086f0:	4605      	mov	r5, r0
 80086f2:	460c      	mov	r4, r1
 80086f4:	b913      	cbnz	r3, 80086fc <_fflush_r+0x10>
 80086f6:	2500      	movs	r5, #0
 80086f8:	4628      	mov	r0, r5
 80086fa:	bd38      	pop	{r3, r4, r5, pc}
 80086fc:	b118      	cbz	r0, 8008706 <_fflush_r+0x1a>
 80086fe:	6a03      	ldr	r3, [r0, #32]
 8008700:	b90b      	cbnz	r3, 8008706 <_fflush_r+0x1a>
 8008702:	f7ff f9af 	bl	8007a64 <__sinit>
 8008706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d0f3      	beq.n	80086f6 <_fflush_r+0xa>
 800870e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008710:	07d0      	lsls	r0, r2, #31
 8008712:	d404      	bmi.n	800871e <_fflush_r+0x32>
 8008714:	0599      	lsls	r1, r3, #22
 8008716:	d402      	bmi.n	800871e <_fflush_r+0x32>
 8008718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800871a:	f7ff fb9a 	bl	8007e52 <__retarget_lock_acquire_recursive>
 800871e:	4628      	mov	r0, r5
 8008720:	4621      	mov	r1, r4
 8008722:	f7ff ff5f 	bl	80085e4 <__sflush_r>
 8008726:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008728:	07da      	lsls	r2, r3, #31
 800872a:	4605      	mov	r5, r0
 800872c:	d4e4      	bmi.n	80086f8 <_fflush_r+0xc>
 800872e:	89a3      	ldrh	r3, [r4, #12]
 8008730:	059b      	lsls	r3, r3, #22
 8008732:	d4e1      	bmi.n	80086f8 <_fflush_r+0xc>
 8008734:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008736:	f7ff fb8d 	bl	8007e54 <__retarget_lock_release_recursive>
 800873a:	e7dd      	b.n	80086f8 <_fflush_r+0xc>

0800873c <__swhatbuf_r>:
 800873c:	b570      	push	{r4, r5, r6, lr}
 800873e:	460c      	mov	r4, r1
 8008740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008744:	2900      	cmp	r1, #0
 8008746:	b096      	sub	sp, #88	@ 0x58
 8008748:	4615      	mov	r5, r2
 800874a:	461e      	mov	r6, r3
 800874c:	da0d      	bge.n	800876a <__swhatbuf_r+0x2e>
 800874e:	89a3      	ldrh	r3, [r4, #12]
 8008750:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008754:	f04f 0100 	mov.w	r1, #0
 8008758:	bf14      	ite	ne
 800875a:	2340      	movne	r3, #64	@ 0x40
 800875c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008760:	2000      	movs	r0, #0
 8008762:	6031      	str	r1, [r6, #0]
 8008764:	602b      	str	r3, [r5, #0]
 8008766:	b016      	add	sp, #88	@ 0x58
 8008768:	bd70      	pop	{r4, r5, r6, pc}
 800876a:	466a      	mov	r2, sp
 800876c:	f000 f848 	bl	8008800 <_fstat_r>
 8008770:	2800      	cmp	r0, #0
 8008772:	dbec      	blt.n	800874e <__swhatbuf_r+0x12>
 8008774:	9901      	ldr	r1, [sp, #4]
 8008776:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800877a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800877e:	4259      	negs	r1, r3
 8008780:	4159      	adcs	r1, r3
 8008782:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008786:	e7eb      	b.n	8008760 <__swhatbuf_r+0x24>

08008788 <__smakebuf_r>:
 8008788:	898b      	ldrh	r3, [r1, #12]
 800878a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800878c:	079d      	lsls	r5, r3, #30
 800878e:	4606      	mov	r6, r0
 8008790:	460c      	mov	r4, r1
 8008792:	d507      	bpl.n	80087a4 <__smakebuf_r+0x1c>
 8008794:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008798:	6023      	str	r3, [r4, #0]
 800879a:	6123      	str	r3, [r4, #16]
 800879c:	2301      	movs	r3, #1
 800879e:	6163      	str	r3, [r4, #20]
 80087a0:	b003      	add	sp, #12
 80087a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087a4:	ab01      	add	r3, sp, #4
 80087a6:	466a      	mov	r2, sp
 80087a8:	f7ff ffc8 	bl	800873c <__swhatbuf_r>
 80087ac:	9f00      	ldr	r7, [sp, #0]
 80087ae:	4605      	mov	r5, r0
 80087b0:	4639      	mov	r1, r7
 80087b2:	4630      	mov	r0, r6
 80087b4:	f7ff fbbc 	bl	8007f30 <_malloc_r>
 80087b8:	b948      	cbnz	r0, 80087ce <__smakebuf_r+0x46>
 80087ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087be:	059a      	lsls	r2, r3, #22
 80087c0:	d4ee      	bmi.n	80087a0 <__smakebuf_r+0x18>
 80087c2:	f023 0303 	bic.w	r3, r3, #3
 80087c6:	f043 0302 	orr.w	r3, r3, #2
 80087ca:	81a3      	strh	r3, [r4, #12]
 80087cc:	e7e2      	b.n	8008794 <__smakebuf_r+0xc>
 80087ce:	89a3      	ldrh	r3, [r4, #12]
 80087d0:	6020      	str	r0, [r4, #0]
 80087d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087d6:	81a3      	strh	r3, [r4, #12]
 80087d8:	9b01      	ldr	r3, [sp, #4]
 80087da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80087de:	b15b      	cbz	r3, 80087f8 <__smakebuf_r+0x70>
 80087e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087e4:	4630      	mov	r0, r6
 80087e6:	f000 f81d 	bl	8008824 <_isatty_r>
 80087ea:	b128      	cbz	r0, 80087f8 <__smakebuf_r+0x70>
 80087ec:	89a3      	ldrh	r3, [r4, #12]
 80087ee:	f023 0303 	bic.w	r3, r3, #3
 80087f2:	f043 0301 	orr.w	r3, r3, #1
 80087f6:	81a3      	strh	r3, [r4, #12]
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	431d      	orrs	r5, r3
 80087fc:	81a5      	strh	r5, [r4, #12]
 80087fe:	e7cf      	b.n	80087a0 <__smakebuf_r+0x18>

08008800 <_fstat_r>:
 8008800:	b538      	push	{r3, r4, r5, lr}
 8008802:	4d07      	ldr	r5, [pc, #28]	@ (8008820 <_fstat_r+0x20>)
 8008804:	2300      	movs	r3, #0
 8008806:	4604      	mov	r4, r0
 8008808:	4608      	mov	r0, r1
 800880a:	4611      	mov	r1, r2
 800880c:	602b      	str	r3, [r5, #0]
 800880e:	f7f9 fc19 	bl	8002044 <_fstat>
 8008812:	1c43      	adds	r3, r0, #1
 8008814:	d102      	bne.n	800881c <_fstat_r+0x1c>
 8008816:	682b      	ldr	r3, [r5, #0]
 8008818:	b103      	cbz	r3, 800881c <_fstat_r+0x1c>
 800881a:	6023      	str	r3, [r4, #0]
 800881c:	bd38      	pop	{r3, r4, r5, pc}
 800881e:	bf00      	nop
 8008820:	20000854 	.word	0x20000854

08008824 <_isatty_r>:
 8008824:	b538      	push	{r3, r4, r5, lr}
 8008826:	4d06      	ldr	r5, [pc, #24]	@ (8008840 <_isatty_r+0x1c>)
 8008828:	2300      	movs	r3, #0
 800882a:	4604      	mov	r4, r0
 800882c:	4608      	mov	r0, r1
 800882e:	602b      	str	r3, [r5, #0]
 8008830:	f7f9 fc18 	bl	8002064 <_isatty>
 8008834:	1c43      	adds	r3, r0, #1
 8008836:	d102      	bne.n	800883e <_isatty_r+0x1a>
 8008838:	682b      	ldr	r3, [r5, #0]
 800883a:	b103      	cbz	r3, 800883e <_isatty_r+0x1a>
 800883c:	6023      	str	r3, [r4, #0]
 800883e:	bd38      	pop	{r3, r4, r5, pc}
 8008840:	20000854 	.word	0x20000854

08008844 <_sbrk_r>:
 8008844:	b538      	push	{r3, r4, r5, lr}
 8008846:	4d06      	ldr	r5, [pc, #24]	@ (8008860 <_sbrk_r+0x1c>)
 8008848:	2300      	movs	r3, #0
 800884a:	4604      	mov	r4, r0
 800884c:	4608      	mov	r0, r1
 800884e:	602b      	str	r3, [r5, #0]
 8008850:	f7f9 fc20 	bl	8002094 <_sbrk>
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	d102      	bne.n	800885e <_sbrk_r+0x1a>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	b103      	cbz	r3, 800885e <_sbrk_r+0x1a>
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	bd38      	pop	{r3, r4, r5, pc}
 8008860:	20000854 	.word	0x20000854

08008864 <_init>:
 8008864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008866:	bf00      	nop
 8008868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800886a:	bc08      	pop	{r3}
 800886c:	469e      	mov	lr, r3
 800886e:	4770      	bx	lr

08008870 <_fini>:
 8008870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008872:	bf00      	nop
 8008874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008876:	bc08      	pop	{r3}
 8008878:	469e      	mov	lr, r3
 800887a:	4770      	bx	lr
