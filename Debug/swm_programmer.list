
swm_programmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089b4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08008b64  08008b64  00009b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cf4  08008cf4  0000a0c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008cf4  08008cf4  00009cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cfc  08008cfc  0000a0c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cfc  08008cfc  00009cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d00  08008d00  00009d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  08008d04  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0c0  2**0
                  CONTENTS
 10 .bss          000007fc  200000c0  200000c0  0000a0c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008bc  200008bc  0000a0c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001da90  00000000  00000000  0000a0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040ad  00000000  00000000  00027b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ba0  00000000  00000000  0002bc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000294d7  00000000  00000000  0002d7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000229d9  00000000  00000000  00056ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb857  00000000  00000000  00079680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00164ed7  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00001565  00000000  00000000  00164f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007ce4  00000000  00000000  00166480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0016e164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000c0 	.word	0x200000c0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008b4c 	.word	0x08008b4c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c4 	.word	0x200000c4
 80001ec:	08008b4c 	.word	0x08008b4c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f001 ff4e 	bl	8002460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f84c 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 fae6 	bl	8000b98 <MX_GPIO_Init>
  MX_CRC_Init();
 80005cc:	f000 f8b2 	bl	8000734 <MX_CRC_Init>
  MX_DMA2D_Init();
 80005d0:	f000 f8c4 	bl	800075c <MX_DMA2D_Init>
  MX_FMC_Init();
 80005d4:	f000 fa90 	bl	8000af8 <MX_FMC_Init>
  MX_I2C3_Init();
 80005d8:	f000 f8f2 	bl	80007c0 <MX_I2C3_Init>
  MX_LTDC_Init();
 80005dc:	f000 f930 	bl	8000840 <MX_LTDC_Init>
  MX_SPI5_Init();
 80005e0:	f000 f9ae 	bl	8000940 <MX_SPI5_Init>
  MX_TIM1_Init();
 80005e4:	f000 f9e2 	bl	80009ac <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005e8:	f000 fa30 	bl	8000a4c <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 80005ec:	f000 fa58 	bl	8000aa0 <MX_USB_OTG_HS_HCD_Init>
  /* USER CODE BEGIN 2 */

  //-----------------------------MY CODE ----------------------------------------
  if (SWD_Init() != SWD_ERROR_OK)
 80005f0:	f001 f932 	bl	8001858 <SWD_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <main+0x42>
      Error_Handler(); /* failed at low-level init */
 80005fa:	f000 fbef 	bl	8000ddc <Error_Handler>


  /* Halt, unlock, erase-range, program, verify, lock */
  SWD_Halt_Target();
 80005fe:	f001 f8e5 	bl	80017cc <SWD_Halt_Target>


  if (SWD_Unlock_Flash() != SWD_ERROR_OK || SWD_Erase_Range(FLASH_BASE, firmware_size * 4) != SWD_ERROR_OK || SWD_Write_Firmware() != SWD_ERROR_OK ){
 8000602:	f001 fa73 	bl	8001aec <SWD_Unlock_Flash>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d110      	bne.n	800062e <main+0x72>
 800060c:	4b12      	ldr	r3, [pc, #72]	@ (8000658 <main+0x9c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	089b      	lsrs	r3, r3, #2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	4619      	mov	r1, r3
 8000616:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800061a:	f001 fa39 	bl	8001a90 <SWD_Erase_Range>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d104      	bne.n	800062e <main+0x72>
 8000624:	f001 fadc 	bl	8001be0 <SWD_Write_Firmware>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <main+0x76>
      Error_Handler(); /* any step failed */
 800062e:	f000 fbd5 	bl	8000ddc <Error_Handler>
  }

  if (SWD_Verify_Firmware() == SWD_ERROR_OK) {
 8000632:	f001 fb01 	bl	8001c38 <SWD_Verify_Firmware>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d106      	bne.n	800064a <main+0x8e>
      SWD_Lock_Flash();
 800063c:	f001 fb4a 	bl	8001cd4 <SWD_Lock_Flash>
      SWD_Target_HW_Reset();   /* Drive nRESET low → high to reset the target*/
 8000640:	f001 f8e0 	bl	8001804 <SWD_Target_HW_Reset>
      SWD_Run_Target();        /* Release halt to let target CPU run normally  */
 8000644:	f001 f8d0 	bl	80017e8 <SWD_Run_Target>
 8000648:	e003      	b.n	8000652 <main+0x96>
  } else {
      SWD_LOG("Firmware verification failed. Lock skipped.\n");
 800064a:	4804      	ldr	r0, [pc, #16]	@ (800065c <main+0xa0>)
 800064c:	f007 fc1c 	bl	8007e88 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000650:	bf00      	nop
 8000652:	bf00      	nop
 8000654:	e7fd      	b.n	8000652 <main+0x96>
 8000656:	bf00      	nop
 8000658:	20000054 	.word	0x20000054
 800065c:	08008b64 	.word	0x08008b64

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	@ 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	@ 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f007 fcea 	bl	8008048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b28      	ldr	r3, [pc, #160]	@ (800072c <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	4a27      	ldr	r2, [pc, #156]	@ (800072c <SystemClock_Config+0xcc>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	@ 0x40
 8000694:	4b25      	ldr	r3, [pc, #148]	@ (800072c <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b22      	ldr	r3, [pc, #136]	@ (8000730 <SystemClock_Config+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006ac:	4a20      	ldr	r2, [pc, #128]	@ (8000730 <SystemClock_Config+0xd0>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000730 <SystemClock_Config+0xd0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c0:	2301      	movs	r3, #1
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006d8:	2348      	movs	r3, #72	@ 0x48
 80006da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006e0:	2303      	movs	r3, #3
 80006e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0320 	add.w	r3, r7, #32
 80006e8:	4618      	mov	r0, r3
 80006ea:	f004 ff3f 	bl	800556c <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006f4:	f000 fb72 	bl	8000ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2302      	movs	r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000704:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2102      	movs	r1, #2
 8000714:	4618      	mov	r0, r3
 8000716:	f005 f9a1 	bl	8005a5c <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000720:	f000 fb5c 	bl	8000ddc <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3750      	adds	r7, #80	@ 0x50
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_CRC_Init+0x20>)
 800073a:	4a07      	ldr	r2, [pc, #28]	@ (8000758 <MX_CRC_Init+0x24>)
 800073c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	@ (8000754 <MX_CRC_Init+0x20>)
 8000740:	f001 ffd6 	bl	80026f0 <HAL_CRC_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800074a:	f000 fb47 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200000dc 	.word	0x200000dc
 8000758:	40023000 	.word	0x40023000

0800075c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000760:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <MX_DMA2D_Init+0x5c>)
 8000762:	4a16      	ldr	r2, [pc, #88]	@ (80007bc <MX_DMA2D_Init+0x60>)
 8000764:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000766:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <MX_DMA2D_Init+0x5c>)
 8000768:	2200      	movs	r2, #0
 800076a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <MX_DMA2D_Init+0x5c>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <MX_DMA2D_Init+0x5c>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000778:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <MX_DMA2D_Init+0x5c>)
 800077a:	2200      	movs	r2, #0
 800077c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_DMA2D_Init+0x5c>)
 8000780:	2200      	movs	r2, #0
 8000782:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000784:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <MX_DMA2D_Init+0x5c>)
 8000786:	2200      	movs	r2, #0
 8000788:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800078a:	4b0b      	ldr	r3, [pc, #44]	@ (80007b8 <MX_DMA2D_Init+0x5c>)
 800078c:	2200      	movs	r2, #0
 800078e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000790:	4809      	ldr	r0, [pc, #36]	@ (80007b8 <MX_DMA2D_Init+0x5c>)
 8000792:	f001 ffc9 	bl	8002728 <HAL_DMA2D_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800079c:	f000 fb1e 	bl	8000ddc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80007a0:	2101      	movs	r1, #1
 80007a2:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <MX_DMA2D_Init+0x5c>)
 80007a4:	f002 f91a 	bl	80029dc <HAL_DMA2D_ConfigLayer>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80007ae:	f000 fb15 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000e4 	.word	0x200000e4
 80007bc:	4002b000 	.word	0x4002b000

080007c0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <MX_I2C3_Init+0x74>)
 80007c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000838 <MX_I2C3_Init+0x78>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <MX_I2C3_Init+0x74>)
 80007cc:	4a1b      	ldr	r2, [pc, #108]	@ (800083c <MX_I2C3_Init+0x7c>)
 80007ce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d0:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <MX_I2C3_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80007d6:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <MX_I2C3_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007dc:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <MX_I2C3_Init+0x74>)
 80007de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007e2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e4:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <MX_I2C3_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80007ea:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <MX_I2C3_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f0:	4b10      	ldr	r3, [pc, #64]	@ (8000834 <MX_I2C3_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_I2C3_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007fc:	480d      	ldr	r0, [pc, #52]	@ (8000834 <MX_I2C3_Init+0x74>)
 80007fe:	f004 f98d 	bl	8004b1c <HAL_I2C_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000808:	f000 fae8 	bl	8000ddc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080c:	2100      	movs	r1, #0
 800080e:	4809      	ldr	r0, [pc, #36]	@ (8000834 <MX_I2C3_Init+0x74>)
 8000810:	f004 fac8 	bl	8004da4 <HAL_I2CEx_ConfigAnalogFilter>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800081a:	f000 fadf 	bl	8000ddc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800081e:	2100      	movs	r1, #0
 8000820:	4804      	ldr	r0, [pc, #16]	@ (8000834 <MX_I2C3_Init+0x74>)
 8000822:	f004 fafb 	bl	8004e1c <HAL_I2CEx_ConfigDigitalFilter>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800082c:	f000 fad6 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000124 	.word	0x20000124
 8000838:	40005c00 	.word	0x40005c00
 800083c:	000186a0 	.word	0x000186a0

08000840 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08e      	sub	sp, #56	@ 0x38
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2234      	movs	r2, #52	@ 0x34
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f007 fbfb 	bl	8008048 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000852:	4b39      	ldr	r3, [pc, #228]	@ (8000938 <MX_LTDC_Init+0xf8>)
 8000854:	4a39      	ldr	r2, [pc, #228]	@ (800093c <MX_LTDC_Init+0xfc>)
 8000856:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000858:	4b37      	ldr	r3, [pc, #220]	@ (8000938 <MX_LTDC_Init+0xf8>)
 800085a:	2200      	movs	r2, #0
 800085c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800085e:	4b36      	ldr	r3, [pc, #216]	@ (8000938 <MX_LTDC_Init+0xf8>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000864:	4b34      	ldr	r3, [pc, #208]	@ (8000938 <MX_LTDC_Init+0xf8>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800086a:	4b33      	ldr	r3, [pc, #204]	@ (8000938 <MX_LTDC_Init+0xf8>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000870:	4b31      	ldr	r3, [pc, #196]	@ (8000938 <MX_LTDC_Init+0xf8>)
 8000872:	2209      	movs	r2, #9
 8000874:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000876:	4b30      	ldr	r3, [pc, #192]	@ (8000938 <MX_LTDC_Init+0xf8>)
 8000878:	2201      	movs	r2, #1
 800087a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800087c:	4b2e      	ldr	r3, [pc, #184]	@ (8000938 <MX_LTDC_Init+0xf8>)
 800087e:	221d      	movs	r2, #29
 8000880:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000882:	4b2d      	ldr	r3, [pc, #180]	@ (8000938 <MX_LTDC_Init+0xf8>)
 8000884:	2203      	movs	r2, #3
 8000886:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000888:	4b2b      	ldr	r3, [pc, #172]	@ (8000938 <MX_LTDC_Init+0xf8>)
 800088a:	f240 120d 	movw	r2, #269	@ 0x10d
 800088e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000890:	4b29      	ldr	r3, [pc, #164]	@ (8000938 <MX_LTDC_Init+0xf8>)
 8000892:	f240 1243 	movw	r2, #323	@ 0x143
 8000896:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8000898:	4b27      	ldr	r3, [pc, #156]	@ (8000938 <MX_LTDC_Init+0xf8>)
 800089a:	f240 1217 	movw	r2, #279	@ 0x117
 800089e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 80008a0:	4b25      	ldr	r3, [pc, #148]	@ (8000938 <MX_LTDC_Init+0xf8>)
 80008a2:	f240 1247 	movw	r2, #327	@ 0x147
 80008a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80008a8:	4b23      	ldr	r3, [pc, #140]	@ (8000938 <MX_LTDC_Init+0xf8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80008b0:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <MX_LTDC_Init+0xf8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <MX_LTDC_Init+0xf8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008c0:	481d      	ldr	r0, [pc, #116]	@ (8000938 <MX_LTDC_Init+0xf8>)
 80008c2:	f004 faeb 	bl	8004e9c <HAL_LTDC_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80008cc:	f000 fa86 	bl	8000ddc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80008d4:	23f0      	movs	r3, #240	@ 0xf0
 80008d6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80008dc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80008e0:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80008e2:	2302      	movs	r3, #2
 80008e4:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80008e6:	23ff      	movs	r3, #255	@ 0xff
 80008e8:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80008ee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008f2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80008f4:	2307      	movs	r3, #7
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80008f8:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 80008fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 80008fe:	23f0      	movs	r3, #240	@ 0xf0
 8000900:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000902:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000906:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2200      	movs	r2, #0
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_LTDC_Init+0xf8>)
 8000922:	f004 fc4d 	bl	80051c0 <HAL_LTDC_ConfigLayer>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800092c:	f000 fa56 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	3738      	adds	r7, #56	@ 0x38
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000178 	.word	0x20000178
 800093c:	40016800 	.word	0x40016800

08000940 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000944:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <MX_SPI5_Init+0x64>)
 8000946:	4a18      	ldr	r2, [pc, #96]	@ (80009a8 <MX_SPI5_Init+0x68>)
 8000948:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800094a:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <MX_SPI5_Init+0x64>)
 800094c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000950:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000952:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <MX_SPI5_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000958:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <MX_SPI5_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <MX_SPI5_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000964:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <MX_SPI5_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <MX_SPI5_Init+0x64>)
 800096c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000970:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <MX_SPI5_Init+0x64>)
 8000974:	2218      	movs	r2, #24
 8000976:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000978:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <MX_SPI5_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <MX_SPI5_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000984:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <MX_SPI5_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <MX_SPI5_Init+0x64>)
 800098c:	220a      	movs	r2, #10
 800098e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	@ (80009a4 <MX_SPI5_Init+0x64>)
 8000992:	f005 fca9 	bl	80062e8 <HAL_SPI_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800099c:	f000 fa1e 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000220 	.word	0x20000220
 80009a8:	40015000 	.word	0x40015000

080009ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c0:	463b      	mov	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a44 <MX_TIM1_Init+0x98>)
 80009ca:	4a1f      	ldr	r2, [pc, #124]	@ (8000a48 <MX_TIM1_Init+0x9c>)
 80009cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000a44 <MX_TIM1_Init+0x98>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a44 <MX_TIM1_Init+0x98>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009da:	4b1a      	ldr	r3, [pc, #104]	@ (8000a44 <MX_TIM1_Init+0x98>)
 80009dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e2:	4b18      	ldr	r3, [pc, #96]	@ (8000a44 <MX_TIM1_Init+0x98>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009e8:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <MX_TIM1_Init+0x98>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ee:	4b15      	ldr	r3, [pc, #84]	@ (8000a44 <MX_TIM1_Init+0x98>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009f4:	4813      	ldr	r0, [pc, #76]	@ (8000a44 <MX_TIM1_Init+0x98>)
 80009f6:	f005 fd00 	bl	80063fa <HAL_TIM_Base_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a00:	f000 f9ec 	bl	8000ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480c      	ldr	r0, [pc, #48]	@ (8000a44 <MX_TIM1_Init+0x98>)
 8000a12:	f005 fea1 	bl	8006758 <HAL_TIM_ConfigClockSource>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a1c:	f000 f9de 	bl	8000ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a20:	2300      	movs	r3, #0
 8000a22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a28:	463b      	mov	r3, r7
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <MX_TIM1_Init+0x98>)
 8000a2e:	f006 f8c9 	bl	8006bc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a38:	f000 f9d0 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000278 	.word	0x20000278
 8000a48:	40010000 	.word	0x40010000

08000a4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a50:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	@ (8000a9c <MX_USART1_UART_Init+0x50>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a56:	4b10      	ldr	r3, [pc, #64]	@ (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a84:	f006 f92e 	bl	8006ce4 <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a8e:	f000 f9a5 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200002c0 	.word	0x200002c0
 8000a9c:	40011000 	.word	0x40011000

08000aa0 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000aa6:	4a13      	ldr	r2, [pc, #76]	@ (8000af4 <MX_USB_OTG_HS_HCD_Init+0x54>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000aac:	220c      	movs	r2, #12
 8000aae:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000abe:	2202      	movs	r2, #2
 8000ac0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000adc:	f002 f9ed 	bl	8002eba <HAL_HCD_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8000ae6:	f000 f979 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000308 	.word	0x20000308
 8000af4:	40040000 	.word	0x40040000

08000af8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
 8000b0c:	615a      	str	r2, [r3, #20]
 8000b0e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b10:	4b1f      	ldr	r3, [pc, #124]	@ (8000b90 <MX_FMC_Init+0x98>)
 8000b12:	4a20      	ldr	r2, [pc, #128]	@ (8000b94 <MX_FMC_Init+0x9c>)
 8000b14:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000b16:	4b1e      	ldr	r3, [pc, #120]	@ (8000b90 <MX_FMC_Init+0x98>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <MX_FMC_Init+0x98>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b22:	4b1b      	ldr	r3, [pc, #108]	@ (8000b90 <MX_FMC_Init+0x98>)
 8000b24:	2204      	movs	r2, #4
 8000b26:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b28:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <MX_FMC_Init+0x98>)
 8000b2a:	2210      	movs	r2, #16
 8000b2c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b2e:	4b18      	ldr	r3, [pc, #96]	@ (8000b90 <MX_FMC_Init+0x98>)
 8000b30:	2240      	movs	r2, #64	@ 0x40
 8000b32:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b34:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <MX_FMC_Init+0x98>)
 8000b36:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000b3a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <MX_FMC_Init+0x98>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b42:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <MX_FMC_Init+0x98>)
 8000b44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b48:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <MX_FMC_Init+0x98>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <MX_FMC_Init+0x98>)
 8000b52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b56:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b5c:	2307      	movs	r3, #7
 8000b5e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b60:	2304      	movs	r3, #4
 8000b62:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b64:	2307      	movs	r3, #7
 8000b66:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <MX_FMC_Init+0x98>)
 8000b7a:	f005 fb81 	bl	8006280 <HAL_SDRAM_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b84:	f000 f92a 	bl	8000ddc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b88:	bf00      	nop
 8000b8a:	3720      	adds	r7, #32
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200006e8 	.word	0x200006e8
 8000b94:	a0000140 	.word	0xa0000140

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08e      	sub	sp, #56	@ 0x38
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
 8000bb2:	4b7b      	ldr	r3, [pc, #492]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a7a      	ldr	r2, [pc, #488]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b78      	ldr	r3, [pc, #480]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	623b      	str	r3, [r7, #32]
 8000bc8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
 8000bce:	4b74      	ldr	r3, [pc, #464]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a73      	ldr	r2, [pc, #460]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000bd4:	f043 0320 	orr.w	r3, r3, #32
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b71      	ldr	r3, [pc, #452]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0320 	and.w	r3, r3, #32
 8000be2:	61fb      	str	r3, [r7, #28]
 8000be4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
 8000bea:	4b6d      	ldr	r3, [pc, #436]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a6c      	ldr	r2, [pc, #432]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000bf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b6a      	ldr	r3, [pc, #424]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	4b66      	ldr	r3, [pc, #408]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a65      	ldr	r2, [pc, #404]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b63      	ldr	r3, [pc, #396]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b5f      	ldr	r3, [pc, #380]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a5e      	ldr	r2, [pc, #376]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b5c      	ldr	r3, [pc, #368]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b58      	ldr	r3, [pc, #352]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a57      	ldr	r2, [pc, #348]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000c44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b55      	ldr	r3, [pc, #340]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	4b51      	ldr	r3, [pc, #324]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a50      	ldr	r2, [pc, #320]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000c60:	f043 0310 	orr.w	r3, r3, #16
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b4e      	ldr	r3, [pc, #312]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0310 	and.w	r3, r3, #16
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	4b4a      	ldr	r3, [pc, #296]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a49      	ldr	r2, [pc, #292]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000c7c:	f043 0308 	orr.w	r3, r3, #8
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b47      	ldr	r3, [pc, #284]	@ (8000da0 <MX_GPIO_Init+0x208>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f003 0308 	and.w	r3, r3, #8
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2116      	movs	r1, #22
 8000c92:	4844      	ldr	r0, [pc, #272]	@ (8000da4 <MX_GPIO_Init+0x20c>)
 8000c94:	f002 f8f8 	bl	8002e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2180      	movs	r1, #128	@ 0x80
 8000c9c:	4842      	ldr	r0, [pc, #264]	@ (8000da8 <MX_GPIO_Init+0x210>)
 8000c9e:	f002 f8f3 	bl	8002e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000ca8:	4840      	ldr	r0, [pc, #256]	@ (8000dac <MX_GPIO_Init+0x214>)
 8000caa:	f002 f8ed 	bl	8002e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000cb4:	483e      	ldr	r0, [pc, #248]	@ (8000db0 <MX_GPIO_Init+0x218>)
 8000cb6:	f002 f8e7 	bl	8002e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000cba:	2316      	movs	r3, #22
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4834      	ldr	r0, [pc, #208]	@ (8000da4 <MX_GPIO_Init+0x20c>)
 8000cd2:	f001 ff15 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000cd6:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cdc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	482e      	ldr	r0, [pc, #184]	@ (8000da8 <MX_GPIO_Init+0x210>)
 8000cee:	f001 ff07 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000cf2:	2380      	movs	r3, #128	@ 0x80
 8000cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d06:	4619      	mov	r1, r3
 8000d08:	4827      	ldr	r0, [pc, #156]	@ (8000da8 <MX_GPIO_Init+0x210>)
 8000d0a:	f001 fef9 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d0e:	2320      	movs	r3, #32
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d12:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d20:	4619      	mov	r1, r3
 8000d22:	4820      	ldr	r0, [pc, #128]	@ (8000da4 <MX_GPIO_Init+0x20c>)
 8000d24:	f001 feec 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	481e      	ldr	r0, [pc, #120]	@ (8000db4 <MX_GPIO_Init+0x21c>)
 8000d3c:	f001 fee0 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000d40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d52:	4619      	mov	r1, r3
 8000d54:	4815      	ldr	r0, [pc, #84]	@ (8000dac <MX_GPIO_Init+0x214>)
 8000d56:	f001 fed3 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000d5a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d70:	4619      	mov	r1, r3
 8000d72:	480e      	ldr	r0, [pc, #56]	@ (8000dac <MX_GPIO_Init+0x214>)
 8000d74:	f001 fec4 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d78:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4807      	ldr	r0, [pc, #28]	@ (8000db0 <MX_GPIO_Init+0x218>)
 8000d92:	f001 feb5 	bl	8002b00 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d96:	bf00      	nop
 8000d98:	3738      	adds	r7, #56	@ 0x38
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020800 	.word	0x40020800
 8000da8:	40020000 	.word	0x40020000
 8000dac:	40020c00 	.word	0x40020c00
 8000db0:	40021800 	.word	0x40021800
 8000db4:	40020400 	.word	0x40020400

08000db8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a04      	ldr	r2, [pc, #16]	@ (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d101      	bne.n	8000dce <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000dca:	f001 fb6b 	bl	80024a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40001000 	.word	0x40001000

08000ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de0:	b672      	cpsid	i
}
 8000de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <Error_Handler+0x8>

08000de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b10      	ldr	r3, [pc, #64]	@ (8000e34 <HAL_MspInit+0x4c>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df6:	4a0f      	ldr	r2, [pc, #60]	@ (8000e34 <HAL_MspInit+0x4c>)
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000e34 <HAL_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <HAL_MspInit+0x4c>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	4a08      	ldr	r2, [pc, #32]	@ (8000e34 <HAL_MspInit+0x4c>)
 8000e14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <HAL_MspInit+0x4c>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800

08000e38 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0b      	ldr	r2, [pc, #44]	@ (8000e74 <HAL_CRC_MspInit+0x3c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d10d      	bne.n	8000e66 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <HAL_CRC_MspInit+0x40>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	4a09      	ldr	r2, [pc, #36]	@ (8000e78 <HAL_CRC_MspInit+0x40>)
 8000e54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5a:	4b07      	ldr	r3, [pc, #28]	@ (8000e78 <HAL_CRC_MspInit+0x40>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000e66:	bf00      	nop
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40023000 	.word	0x40023000
 8000e78:	40023800 	.word	0x40023800

08000e7c <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec4 <HAL_DMA2D_MspInit+0x48>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d115      	bne.n	8000eba <HAL_DMA2D_MspInit+0x3e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <HAL_DMA2D_MspInit+0x4c>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec8 <HAL_DMA2D_MspInit+0x4c>)
 8000e98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <HAL_DMA2D_MspInit+0x4c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2105      	movs	r1, #5
 8000eae:	205a      	movs	r0, #90	@ 0x5a
 8000eb0:	f001 fbf4 	bl	800269c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000eb4:	205a      	movs	r0, #90	@ 0x5a
 8000eb6:	f001 fc0d 	bl	80026d4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	4002b000 	.word	0x4002b000
 8000ec8:	40023800 	.word	0x40023800

08000ecc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	@ 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a29      	ldr	r2, [pc, #164]	@ (8000f90 <HAL_I2C_MspInit+0xc4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d14b      	bne.n	8000f86 <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	4b28      	ldr	r3, [pc, #160]	@ (8000f94 <HAL_I2C_MspInit+0xc8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	4a27      	ldr	r2, [pc, #156]	@ (8000f94 <HAL_I2C_MspInit+0xc8>)
 8000ef8:	f043 0304 	orr.w	r3, r3, #4
 8000efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efe:	4b25      	ldr	r3, [pc, #148]	@ (8000f94 <HAL_I2C_MspInit+0xc8>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	f003 0304 	and.w	r3, r3, #4
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <HAL_I2C_MspInit+0xc8>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a20      	ldr	r2, [pc, #128]	@ (8000f94 <HAL_I2C_MspInit+0xc8>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f94 <HAL_I2C_MspInit+0xc8>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f2c:	2312      	movs	r3, #18
 8000f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	4815      	ldr	r0, [pc, #84]	@ (8000f98 <HAL_I2C_MspInit+0xcc>)
 8000f44:	f001 fddc 	bl	8002b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f4e:	2312      	movs	r3, #18
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <HAL_I2C_MspInit+0xd0>)
 8000f66:	f001 fdcb 	bl	8002b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <HAL_I2C_MspInit+0xc8>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f72:	4a08      	ldr	r2, [pc, #32]	@ (8000f94 <HAL_I2C_MspInit+0xc8>)
 8000f74:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <HAL_I2C_MspInit+0xc8>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	@ 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40005c00 	.word	0x40005c00
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	40020000 	.word	0x40020000

08000fa0 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b09a      	sub	sp, #104	@ 0x68
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fbc:	2230      	movs	r2, #48	@ 0x30
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f007 f841 	bl	8008048 <memset>
  if(hltdc->Instance==LTDC)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a85      	ldr	r2, [pc, #532]	@ (80011e0 <HAL_LTDC_MspInit+0x240>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	f040 8102 	bne.w	80011d6 <HAL_LTDC_MspInit+0x236>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000fd2:	2308      	movs	r3, #8
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000fd6:	2332      	movs	r3, #50	@ 0x32
 8000fd8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f004 ff8a 	bl	8005f00 <HAL_RCCEx_PeriphCLKConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000ff2:	f7ff fef3 	bl	8000ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
 8000ffa:	4b7a      	ldr	r3, [pc, #488]	@ (80011e4 <HAL_LTDC_MspInit+0x244>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	4a79      	ldr	r2, [pc, #484]	@ (80011e4 <HAL_LTDC_MspInit+0x244>)
 8001000:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001004:	6453      	str	r3, [r2, #68]	@ 0x44
 8001006:	4b77      	ldr	r3, [pc, #476]	@ (80011e4 <HAL_LTDC_MspInit+0x244>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800100e:	623b      	str	r3, [r7, #32]
 8001010:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
 8001016:	4b73      	ldr	r3, [pc, #460]	@ (80011e4 <HAL_LTDC_MspInit+0x244>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	4a72      	ldr	r2, [pc, #456]	@ (80011e4 <HAL_LTDC_MspInit+0x244>)
 800101c:	f043 0320 	orr.w	r3, r3, #32
 8001020:	6313      	str	r3, [r2, #48]	@ 0x30
 8001022:	4b70      	ldr	r3, [pc, #448]	@ (80011e4 <HAL_LTDC_MspInit+0x244>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	f003 0320 	and.w	r3, r3, #32
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
 8001032:	4b6c      	ldr	r3, [pc, #432]	@ (80011e4 <HAL_LTDC_MspInit+0x244>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4a6b      	ldr	r2, [pc, #428]	@ (80011e4 <HAL_LTDC_MspInit+0x244>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4b69      	ldr	r3, [pc, #420]	@ (80011e4 <HAL_LTDC_MspInit+0x244>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	61bb      	str	r3, [r7, #24]
 8001048:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	4b65      	ldr	r3, [pc, #404]	@ (80011e4 <HAL_LTDC_MspInit+0x244>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	4a64      	ldr	r2, [pc, #400]	@ (80011e4 <HAL_LTDC_MspInit+0x244>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	6313      	str	r3, [r2, #48]	@ 0x30
 800105a:	4b62      	ldr	r3, [pc, #392]	@ (80011e4 <HAL_LTDC_MspInit+0x244>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	4b5e      	ldr	r3, [pc, #376]	@ (80011e4 <HAL_LTDC_MspInit+0x244>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	4a5d      	ldr	r2, [pc, #372]	@ (80011e4 <HAL_LTDC_MspInit+0x244>)
 8001070:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001074:	6313      	str	r3, [r2, #48]	@ 0x30
 8001076:	4b5b      	ldr	r3, [pc, #364]	@ (80011e4 <HAL_LTDC_MspInit+0x244>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b57      	ldr	r3, [pc, #348]	@ (80011e4 <HAL_LTDC_MspInit+0x244>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a56      	ldr	r2, [pc, #344]	@ (80011e4 <HAL_LTDC_MspInit+0x244>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b54      	ldr	r3, [pc, #336]	@ (80011e4 <HAL_LTDC_MspInit+0x244>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	4b50      	ldr	r3, [pc, #320]	@ (80011e4 <HAL_LTDC_MspInit+0x244>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a4f      	ldr	r2, [pc, #316]	@ (80011e4 <HAL_LTDC_MspInit+0x244>)
 80010a8:	f043 0308 	orr.w	r3, r3, #8
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b4d      	ldr	r3, [pc, #308]	@ (80011e4 <HAL_LTDC_MspInit+0x244>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80010ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010be:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010cc:	230e      	movs	r3, #14
 80010ce:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010d4:	4619      	mov	r1, r3
 80010d6:	4844      	ldr	r0, [pc, #272]	@ (80011e8 <HAL_LTDC_MspInit+0x248>)
 80010d8:	f001 fd12 	bl	8002b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80010dc:	f641 0358 	movw	r3, #6232	@ 0x1858
 80010e0:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010ee:	230e      	movs	r3, #14
 80010f0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010f6:	4619      	mov	r1, r3
 80010f8:	483c      	ldr	r0, [pc, #240]	@ (80011ec <HAL_LTDC_MspInit+0x24c>)
 80010fa:	f001 fd01 	bl	8002b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80010fe:	2303      	movs	r3, #3
 8001100:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800110e:	2309      	movs	r3, #9
 8001110:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001116:	4619      	mov	r1, r3
 8001118:	4835      	ldr	r0, [pc, #212]	@ (80011f0 <HAL_LTDC_MspInit+0x250>)
 800111a:	f001 fcf1 	bl	8002b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800111e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001122:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001130:	230e      	movs	r3, #14
 8001132:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001138:	4619      	mov	r1, r3
 800113a:	482d      	ldr	r0, [pc, #180]	@ (80011f0 <HAL_LTDC_MspInit+0x250>)
 800113c:	f001 fce0 	bl	8002b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001140:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001144:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001152:	230e      	movs	r3, #14
 8001154:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001156:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800115a:	4619      	mov	r1, r3
 800115c:	4825      	ldr	r0, [pc, #148]	@ (80011f4 <HAL_LTDC_MspInit+0x254>)
 800115e:	f001 fccf 	bl	8002b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001162:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001166:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001174:	230e      	movs	r3, #14
 8001176:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001178:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800117c:	4619      	mov	r1, r3
 800117e:	481e      	ldr	r0, [pc, #120]	@ (80011f8 <HAL_LTDC_MspInit+0x258>)
 8001180:	f001 fcbe 	bl	8002b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001184:	2348      	movs	r3, #72	@ 0x48
 8001186:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001194:	230e      	movs	r3, #14
 8001196:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001198:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800119c:	4619      	mov	r1, r3
 800119e:	4817      	ldr	r0, [pc, #92]	@ (80011fc <HAL_LTDC_MspInit+0x25c>)
 80011a0:	f001 fcae 	bl	8002b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80011a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011a8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011b6:	2309      	movs	r3, #9
 80011b8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011be:	4619      	mov	r1, r3
 80011c0:	480c      	ldr	r0, [pc, #48]	@ (80011f4 <HAL_LTDC_MspInit+0x254>)
 80011c2:	f001 fc9d 	bl	8002b00 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2105      	movs	r1, #5
 80011ca:	2058      	movs	r0, #88	@ 0x58
 80011cc:	f001 fa66 	bl	800269c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011d0:	2058      	movs	r0, #88	@ 0x58
 80011d2:	f001 fa7f 	bl	80026d4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 80011d6:	bf00      	nop
 80011d8:	3768      	adds	r7, #104	@ 0x68
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40016800 	.word	0x40016800
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40021400 	.word	0x40021400
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40021800 	.word	0x40021800
 80011f8:	40020800 	.word	0x40020800
 80011fc:	40020c00 	.word	0x40020c00

08001200 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	@ 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a19      	ldr	r2, [pc, #100]	@ (8001284 <HAL_SPI_MspInit+0x84>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d12c      	bne.n	800127c <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <HAL_SPI_MspInit+0x88>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	4a17      	ldr	r2, [pc, #92]	@ (8001288 <HAL_SPI_MspInit+0x88>)
 800122c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001230:	6453      	str	r3, [r2, #68]	@ 0x44
 8001232:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <HAL_SPI_MspInit+0x88>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001236:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <HAL_SPI_MspInit+0x88>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a10      	ldr	r2, [pc, #64]	@ (8001288 <HAL_SPI_MspInit+0x88>)
 8001248:	f043 0320 	orr.w	r3, r3, #32
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <HAL_SPI_MspInit+0x88>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0320 	and.w	r3, r3, #32
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800125a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800125e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800126c:	2305      	movs	r3, #5
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	4805      	ldr	r0, [pc, #20]	@ (800128c <HAL_SPI_MspInit+0x8c>)
 8001278:	f001 fc42 	bl	8002b00 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	@ 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40015000 	.word	0x40015000
 8001288:	40023800 	.word	0x40023800
 800128c:	40021400 	.word	0x40021400

08001290 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a0b      	ldr	r2, [pc, #44]	@ (80012cc <HAL_TIM_Base_MspInit+0x3c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d10d      	bne.n	80012be <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <HAL_TIM_Base_MspInit+0x40>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012aa:	4a09      	ldr	r2, [pc, #36]	@ (80012d0 <HAL_TIM_Base_MspInit+0x40>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012b2:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <HAL_TIM_Base_MspInit+0x40>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40010000 	.word	0x40010000
 80012d0:	40023800 	.word	0x40023800

080012d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	@ 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a19      	ldr	r2, [pc, #100]	@ (8001358 <HAL_UART_MspInit+0x84>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d12c      	bne.n	8001350 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	4b18      	ldr	r3, [pc, #96]	@ (800135c <HAL_UART_MspInit+0x88>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	4a17      	ldr	r2, [pc, #92]	@ (800135c <HAL_UART_MspInit+0x88>)
 8001300:	f043 0310 	orr.w	r3, r3, #16
 8001304:	6453      	str	r3, [r2, #68]	@ 0x44
 8001306:	4b15      	ldr	r3, [pc, #84]	@ (800135c <HAL_UART_MspInit+0x88>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	f003 0310 	and.w	r3, r3, #16
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b11      	ldr	r3, [pc, #68]	@ (800135c <HAL_UART_MspInit+0x88>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a10      	ldr	r2, [pc, #64]	@ (800135c <HAL_UART_MspInit+0x88>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <HAL_UART_MspInit+0x88>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800132e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133c:	2303      	movs	r3, #3
 800133e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001340:	2307      	movs	r3, #7
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4619      	mov	r1, r3
 800134a:	4805      	ldr	r0, [pc, #20]	@ (8001360 <HAL_UART_MspInit+0x8c>)
 800134c:	f001 fbd8 	bl	8002b00 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001350:	bf00      	nop
 8001352:	3728      	adds	r7, #40	@ 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40011000 	.word	0x40011000
 800135c:	40023800 	.word	0x40023800
 8001360:	40020000 	.word	0x40020000

08001364 <HAL_HCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhcd: HCD handle pointer
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	@ 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_HS)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a24      	ldr	r2, [pc, #144]	@ (8001414 <HAL_HCD_MspInit+0xb0>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d141      	bne.n	800140a <HAL_HCD_MspInit+0xa6>
  {
    /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <HAL_HCD_MspInit+0xb4>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a22      	ldr	r2, [pc, #136]	@ (8001418 <HAL_HCD_MspInit+0xb4>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <HAL_HCD_MspInit+0xb4>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80013a2:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80013a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80013b4:	230c      	movs	r3, #12
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	4817      	ldr	r0, [pc, #92]	@ (800141c <HAL_HCD_MspInit+0xb8>)
 80013c0:	f001 fb9e 	bl	8002b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80013c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	4810      	ldr	r0, [pc, #64]	@ (800141c <HAL_HCD_MspInit+0xb8>)
 80013da:	f001 fb91 	bl	8002b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001418 <HAL_HCD_MspInit+0xb4>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001418 <HAL_HCD_MspInit+0xb4>)
 80013e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80013ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <HAL_HCD_MspInit+0xb4>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	204d      	movs	r0, #77	@ 0x4d
 8001400:	f001 f94c 	bl	800269c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8001404:	204d      	movs	r0, #77	@ 0x4d
 8001406:	f001 f965 	bl	80026d4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 800140a:	bf00      	nop
 800140c:	3728      	adds	r7, #40	@ 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40040000 	.word	0x40040000
 8001418:	40023800 	.word	0x40023800
 800141c:	40020400 	.word	0x40020400

08001420 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001434:	4b3b      	ldr	r3, [pc, #236]	@ (8001524 <HAL_FMC_MspInit+0x104>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d16f      	bne.n	800151c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800143c:	4b39      	ldr	r3, [pc, #228]	@ (8001524 <HAL_FMC_MspInit+0x104>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	4b38      	ldr	r3, [pc, #224]	@ (8001528 <HAL_FMC_MspInit+0x108>)
 8001448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800144a:	4a37      	ldr	r2, [pc, #220]	@ (8001528 <HAL_FMC_MspInit+0x108>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6393      	str	r3, [r2, #56]	@ 0x38
 8001452:	4b35      	ldr	r3, [pc, #212]	@ (8001528 <HAL_FMC_MspInit+0x108>)
 8001454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800145e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001462:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001470:	230c      	movs	r3, #12
 8001472:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	4619      	mov	r1, r3
 8001478:	482c      	ldr	r0, [pc, #176]	@ (800152c <HAL_FMC_MspInit+0x10c>)
 800147a:	f001 fb41 	bl	8002b00 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800147e:	2301      	movs	r3, #1
 8001480:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	2303      	movs	r3, #3
 800148c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800148e:	230c      	movs	r3, #12
 8001490:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	4619      	mov	r1, r3
 8001496:	4826      	ldr	r0, [pc, #152]	@ (8001530 <HAL_FMC_MspInit+0x110>)
 8001498:	f001 fb32 	bl	8002b00 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800149c:	f248 1333 	movw	r3, #33075	@ 0x8133
 80014a0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014ae:	230c      	movs	r3, #12
 80014b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	4619      	mov	r1, r3
 80014b6:	481f      	ldr	r0, [pc, #124]	@ (8001534 <HAL_FMC_MspInit+0x114>)
 80014b8:	f001 fb22 	bl	8002b00 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80014bc:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80014c0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014ce:	230c      	movs	r3, #12
 80014d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	4619      	mov	r1, r3
 80014d6:	4818      	ldr	r0, [pc, #96]	@ (8001538 <HAL_FMC_MspInit+0x118>)
 80014d8:	f001 fb12 	bl	8002b00 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80014dc:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80014e0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014ee:	230c      	movs	r3, #12
 80014f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	4619      	mov	r1, r3
 80014f6:	4811      	ldr	r0, [pc, #68]	@ (800153c <HAL_FMC_MspInit+0x11c>)
 80014f8:	f001 fb02 	bl	8002b00 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80014fc:	2360      	movs	r3, #96	@ 0x60
 80014fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800150c:	230c      	movs	r3, #12
 800150e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	4619      	mov	r1, r3
 8001514:	480a      	ldr	r0, [pc, #40]	@ (8001540 <HAL_FMC_MspInit+0x120>)
 8001516:	f001 faf3 	bl	8002b00 <HAL_GPIO_Init>
 800151a:	e000      	b.n	800151e <HAL_FMC_MspInit+0xfe>
    return;
 800151c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2000071c 	.word	0x2000071c
 8001528:	40023800 	.word	0x40023800
 800152c:	40021400 	.word	0x40021400
 8001530:	40020800 	.word	0x40020800
 8001534:	40021800 	.word	0x40021800
 8001538:	40021000 	.word	0x40021000
 800153c:	40020c00 	.word	0x40020c00
 8001540:	40020400 	.word	0x40020400

08001544 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800154c:	f7ff ff68 	bl	8001420 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08e      	sub	sp, #56	@ 0x38
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	4b33      	ldr	r3, [pc, #204]	@ (800163c <HAL_InitTick+0xe4>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001570:	4a32      	ldr	r2, [pc, #200]	@ (800163c <HAL_InitTick+0xe4>)
 8001572:	f043 0310 	orr.w	r3, r3, #16
 8001576:	6413      	str	r3, [r2, #64]	@ 0x40
 8001578:	4b30      	ldr	r3, [pc, #192]	@ (800163c <HAL_InitTick+0xe4>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157c:	f003 0310 	and.w	r3, r3, #16
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001584:	f107 0210 	add.w	r2, r7, #16
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4611      	mov	r1, r2
 800158e:	4618      	mov	r0, r3
 8001590:	f004 fc84 	bl	8005e9c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800159a:	2b00      	cmp	r3, #0
 800159c:	d103      	bne.n	80015a6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800159e:	f004 fc55 	bl	8005e4c <HAL_RCC_GetPCLK1Freq>
 80015a2:	6378      	str	r0, [r7, #52]	@ 0x34
 80015a4:	e004      	b.n	80015b0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015a6:	f004 fc51 	bl	8005e4c <HAL_RCC_GetPCLK1Freq>
 80015aa:	4603      	mov	r3, r0
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015b2:	4a23      	ldr	r2, [pc, #140]	@ (8001640 <HAL_InitTick+0xe8>)
 80015b4:	fba2 2303 	umull	r2, r3, r2, r3
 80015b8:	0c9b      	lsrs	r3, r3, #18
 80015ba:	3b01      	subs	r3, #1
 80015bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015be:	4b21      	ldr	r3, [pc, #132]	@ (8001644 <HAL_InitTick+0xec>)
 80015c0:	4a21      	ldr	r2, [pc, #132]	@ (8001648 <HAL_InitTick+0xf0>)
 80015c2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001644 <HAL_InitTick+0xec>)
 80015c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015ca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001644 <HAL_InitTick+0xec>)
 80015ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015d0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001644 <HAL_InitTick+0xec>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001644 <HAL_InitTick+0xec>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015de:	4b19      	ldr	r3, [pc, #100]	@ (8001644 <HAL_InitTick+0xec>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80015e4:	4817      	ldr	r0, [pc, #92]	@ (8001644 <HAL_InitTick+0xec>)
 80015e6:	f004 ff08 	bl	80063fa <HAL_TIM_Base_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80015f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d11b      	bne.n	8001630 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015f8:	4812      	ldr	r0, [pc, #72]	@ (8001644 <HAL_InitTick+0xec>)
 80015fa:	f004 ff4d 	bl	8006498 <HAL_TIM_Base_Start_IT>
 80015fe:	4603      	mov	r3, r0
 8001600:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001604:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001608:	2b00      	cmp	r3, #0
 800160a:	d111      	bne.n	8001630 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800160c:	2036      	movs	r0, #54	@ 0x36
 800160e:	f001 f861 	bl	80026d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d808      	bhi.n	800162a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	2036      	movs	r0, #54	@ 0x36
 800161e:	f001 f83d 	bl	800269c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001622:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <HAL_InitTick+0xf4>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	e002      	b.n	8001630 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001630:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001634:	4618      	mov	r0, r3
 8001636:	3738      	adds	r7, #56	@ 0x38
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40023800 	.word	0x40023800
 8001640:	431bde83 	.word	0x431bde83
 8001644:	20000720 	.word	0x20000720
 8001648:	40001000 	.word	0x40001000
 800164c:	2000005c 	.word	0x2000005c

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <NMI_Handler+0x4>

08001658 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <HardFault_Handler+0x4>

08001660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <MemManage_Handler+0x4>

08001668 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <UsageFault_Handler+0x4>

08001678 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016b4:	4802      	ldr	r0, [pc, #8]	@ (80016c0 <TIM6_DAC_IRQHandler+0x10>)
 80016b6:	f004 ff5f 	bl	8006578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000720 	.word	0x20000720

080016c4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80016c8:	4802      	ldr	r0, [pc, #8]	@ (80016d4 <OTG_HS_IRQHandler+0x10>)
 80016ca:	f001 fc5d 	bl	8002f88 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000308 	.word	0x20000308

080016d8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80016dc:	4802      	ldr	r0, [pc, #8]	@ (80016e8 <LTDC_IRQHandler+0x10>)
 80016de:	f003 fcad 	bl	800503c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000178 	.word	0x20000178

080016ec <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80016f0:	4802      	ldr	r0, [pc, #8]	@ (80016fc <DMA2D_IRQHandler+0x10>)
 80016f2:	f001 f862 	bl	80027ba <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200000e4 	.word	0x200000e4

08001700 <SWD_Write_Bit>:
 * SWD_Write_Bit
 * Writes a single bit to the SWDIO line and toggles SWCLK.
 * Parameters:
 *   bit – the bit value (0 or 1) to send.
 */
void SWD_Write_Bit(uint8_t bit) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(PORT_SWD, PIN_SWDIO, bit ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf14      	ite	ne
 8001710:	2301      	movne	r3, #1
 8001712:	2300      	moveq	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	461a      	mov	r2, r3
 8001718:	2180      	movs	r1, #128	@ 0x80
 800171a:	4804      	ldr	r0, [pc, #16]	@ (800172c <SWD_Write_Bit+0x2c>)
 800171c:	f001 fbb4 	bl	8002e88 <HAL_GPIO_WritePin>
    SWCLK_Cycle();
 8001720:	f000 fbb2 	bl	8001e88 <SWCLK_Cycle>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40020400 	.word	0x40020400

08001730 <SWD_Write_DP>:
swd_error_t SWD_WriteReg(bool ap, uint8_t reg, uint32_t data, bool ignore_ack);
swd_error_t SWD_ReadReg (bool ap, uint8_t reg, uint32_t *data, bool ignore_ack);

/* Convenience wrappers (ignore_ack = false) */
static inline swd_error_t SWD_Write_DP(uint8_t reg, uint32_t data)
{ return SWD_WriteReg(false, reg, data, false); }
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	71fb      	strb	r3, [r7, #7]
 800173c:	79f9      	ldrb	r1, [r7, #7]
 800173e:	2300      	movs	r3, #0
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	2000      	movs	r0, #0
 8001744:	f000 fbee 	bl	8001f24 <SWD_WriteReg>
 8001748:	4603      	mov	r3, r0
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <SWD_Read_DP>:

static inline swd_error_t SWD_Read_DP(uint8_t reg, uint32_t *data)
{ return SWD_ReadReg(false, reg, data, false); }
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	6039      	str	r1, [r7, #0]
 800175c:	71fb      	strb	r3, [r7, #7]
 800175e:	79f9      	ldrb	r1, [r7, #7]
 8001760:	2300      	movs	r3, #0
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	2000      	movs	r0, #0
 8001766:	f000 fcbb 	bl	80020e0 <SWD_ReadReg>
 800176a:	4603      	mov	r3, r0
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <SWD_Send_SwitchSequence>:
#include <stdio.h>
/* -----------------------------------------------------------------------------
 *  Send 16 bit SWJ sequence 0xE79E  (switch JTAG ➜ SWD)
 * --------------------------------------------------------------------------*/
static void SWD_Send_SwitchSequence(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
    const uint16_t seq = 0xE79E;
 800177a:	f24e 739e 	movw	r3, #59294	@ 0xe79e
 800177e:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < 16; ++i)
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	e00d      	b.n	80017a2 <SWD_Send_SwitchSequence+0x2e>
    	SWD_Write_Bit((seq >> i) & 1);
 8001786:	887a      	ldrh	r2, [r7, #2]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	fa42 f303 	asr.w	r3, r2, r3
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	b2db      	uxtb	r3, r3
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ffb2 	bl	8001700 <SWD_Write_Bit>
    for (int i = 0; i < 16; ++i)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3301      	adds	r3, #1
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b0f      	cmp	r3, #15
 80017a6:	ddee      	ble.n	8001786 <SWD_Send_SwitchSequence+0x12>
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <SWD_Read_IDCODE>:

/* -----------------------------------------------------------------------------
 *  Read 32 bit IDCODE (DP register 0x00)
 * --------------------------------------------------------------------------*/
static swd_error_t SWD_Read_IDCODE(uint32_t *idcode)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
    return SWD_Read_DP(0x0, idcode);   /* A3:A2 = 00b */
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff ffc8 	bl	8001752 <SWD_Read_DP>
 80017c2:	4603      	mov	r3, r0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <SWD_Halt_Target>:

/* -----------------------------------------------------------------------------
 *  Halt target core via DHCSR (0xE000EDF0)
 * --------------------------------------------------------------------------*/
void SWD_Halt_Target(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
    SWD_Write_TAR(0xE000EDF0);           /* DHCSR address */
 80017d0:	4803      	ldr	r0, [pc, #12]	@ (80017e0 <SWD_Halt_Target+0x14>)
 80017d2:	f000 f935 	bl	8001a40 <SWD_Write_TAR>
    SWD_Write_DRW(0xA05F0003);           /* HALT + DBGKEY */
 80017d6:	4803      	ldr	r0, [pc, #12]	@ (80017e4 <SWD_Halt_Target+0x18>)
 80017d8:	f000 f93f 	bl	8001a5a <SWD_Write_DRW>
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	e000edf0 	.word	0xe000edf0
 80017e4:	a05f0003 	.word	0xa05f0003

080017e8 <SWD_Run_Target>:


/* --------------------------------------------------------------- */
void SWD_Run_Target(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
    /* DHCSR address = 0xE000EDF0 ; value = DBGKEY | C_DEBUGEN */
    SWD_Write_TAR(0xE000EDF0);
 80017ec:	4803      	ldr	r0, [pc, #12]	@ (80017fc <SWD_Run_Target+0x14>)
 80017ee:	f000 f927 	bl	8001a40 <SWD_Write_TAR>
    SWD_Write_DRW(0xA05F0001);          /* clear C_HALT, keep DEBUGEN */
 80017f2:	4803      	ldr	r0, [pc, #12]	@ (8001800 <SWD_Run_Target+0x18>)
 80017f4:	f000 f931 	bl	8001a5a <SWD_Write_DRW>
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	e000edf0 	.word	0xe000edf0
 8001800:	a05f0001 	.word	0xa05f0001

08001804 <SWD_Target_HW_Reset>:

/* --------------------------------------------------------------- */
void SWD_Target_HW_Reset(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
#ifdef PIN_nRESET
    HAL_GPIO_WritePin(PORT_SWD, PIN_nRESET, GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	2110      	movs	r1, #16
 800180c:	4807      	ldr	r0, [pc, #28]	@ (800182c <SWD_Target_HW_Reset+0x28>)
 800180e:	f001 fb3b 	bl	8002e88 <HAL_GPIO_WritePin>
    HAL_Delay(20);                      /* 20 ms low */
 8001812:	2014      	movs	r0, #20
 8001814:	f000 fe66 	bl	80024e4 <HAL_Delay>
    HAL_GPIO_WritePin(PORT_SWD, PIN_nRESET, GPIO_PIN_SET);
 8001818:	2201      	movs	r2, #1
 800181a:	2110      	movs	r1, #16
 800181c:	4803      	ldr	r0, [pc, #12]	@ (800182c <SWD_Target_HW_Reset+0x28>)
 800181e:	f001 fb33 	bl	8002e88 <HAL_GPIO_WritePin>
    HAL_Delay(20);                      /* allow target boot */
 8001822:	2014      	movs	r0, #20
 8001824:	f000 fe5e 	bl	80024e4 <HAL_Delay>
#endif
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40020400 	.word	0x40020400

08001830 <SWD_PowerUpDebugInterface>:

/* -----------------------------------------------------------------------------
 *  Power up debug interface (CDBGPWRUPREQ | CSYSPWRUPREQ)
 * --------------------------------------------------------------------------*/
static swd_error_t SWD_PowerUpDebugInterface(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
    return SWD_Write_DP(DP_CTRL_STAT, (1u << 28) | (1u << 30));
 8001834:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8001838:	2001      	movs	r0, #1
 800183a:	f7ff ff79 	bl	8001730 <SWD_Write_DP>
 800183e:	4603      	mov	r3, r0
}
 8001840:	4618      	mov	r0, r3
 8001842:	bd80      	pop	{r7, pc}

08001844 <SWD_Select_AHB_AP>:

/* -----------------------------------------------------------------------------
 *  Select default AHB AP  (APSEL = 0, APBANKSEL = 0)
 * --------------------------------------------------------------------------*/
static swd_error_t SWD_Select_AHB_AP(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
    return SWD_Write_DP(DP_SELECT, 0x00000000);
 8001848:	2100      	movs	r1, #0
 800184a:	2002      	movs	r0, #2
 800184c:	f7ff ff70 	bl	8001730 <SWD_Write_DP>
 8001850:	4603      	mov	r3, r0
}
 8001852:	4618      	mov	r0, r3
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <SWD_Init>:

/* -----------------------------------------------------------------------------
 *  Public init sequence – returns swd_error_t
 * --------------------------------------------------------------------------*/
swd_error_t SWD_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
    SWD_GPIO_Init();
 800185e:	f000 facb 	bl	8001df8 <SWD_GPIO_Init>
    HAL_Delay(10);
 8001862:	200a      	movs	r0, #10
 8001864:	f000 fe3e 	bl	80024e4 <HAL_Delay>

    /* Line reset and switch JTAG ➜ SWD */
    SWD_LineReset();
 8001868:	f000 fb24 	bl	8001eb4 <SWD_LineReset>
    SWD_Send_SwitchSequence();
 800186c:	f7ff ff82 	bl	8001774 <SWD_Send_SwitchSequence>
    SWD_LineReset();
 8001870:	f000 fb20 	bl	8001eb4 <SWD_LineReset>

    /* Read IDCODE */
    uint32_t id;
    if (SWD_Read_IDCODE(&id) != SWD_ERROR_OK) {
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff9b 	bl	80017b2 <SWD_Read_IDCODE>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d004      	beq.n	800188c <SWD_Init+0x34>
        printf("[SWD] Failed to read IDCODE\n");
 8001882:	481f      	ldr	r0, [pc, #124]	@ (8001900 <SWD_Init+0xa8>)
 8001884:	f006 fb00 	bl	8007e88 <puts>
        return SWD_ERROR_FAULT;
 8001888:	2302      	movs	r3, #2
 800188a:	e035      	b.n	80018f8 <SWD_Init+0xa0>
    }
    printf("[SWD] IDCODE = 0x%08lX\n", id);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4619      	mov	r1, r3
 8001890:	481c      	ldr	r0, [pc, #112]	@ (8001904 <SWD_Init+0xac>)
 8001892:	f006 fa91 	bl	8007db8 <iprintf>

    /* Request debug power up */
    if (SWD_PowerUpDebugInterface() != SWD_ERROR_OK) {
 8001896:	f7ff ffcb 	bl	8001830 <SWD_PowerUpDebugInterface>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d004      	beq.n	80018aa <SWD_Init+0x52>
        printf("[SWD] CTRL/STAT write failed\n");
 80018a0:	4819      	ldr	r0, [pc, #100]	@ (8001908 <SWD_Init+0xb0>)
 80018a2:	f006 faf1 	bl	8007e88 <puts>
        return SWD_ERROR_FAULT;
 80018a6:	2302      	movs	r3, #2
 80018a8:	e026      	b.n	80018f8 <SWD_Init+0xa0>
    }

    /* Wait for power up ACK */
    if (!SWD_PollPowerUp(1000)) {
 80018aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018ae:	f000 f89f 	bl	80019f0 <SWD_PollPowerUp>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f083 0301 	eor.w	r3, r3, #1
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d004      	beq.n	80018c8 <SWD_Init+0x70>
        printf("[SWD] Power‑up timeout\n");
 80018be:	4813      	ldr	r0, [pc, #76]	@ (800190c <SWD_Init+0xb4>)
 80018c0:	f006 fae2 	bl	8007e88 <puts>
        return SWD_ERROR_WAIT;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e017      	b.n	80018f8 <SWD_Init+0xa0>
    }

    if (SWD_ClearSticky() != SWD_ERROR_OK) {
 80018c8:	f000 f8d4 	bl	8001a74 <SWD_ClearSticky>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d004      	beq.n	80018dc <SWD_Init+0x84>
        printf("[SWD] Failed to clear sticky flags\\n");
 80018d2:	480f      	ldr	r0, [pc, #60]	@ (8001910 <SWD_Init+0xb8>)
 80018d4:	f006 fa70 	bl	8007db8 <iprintf>
        return SWD_ERROR_FAULT;
 80018d8:	2302      	movs	r3, #2
 80018da:	e00d      	b.n	80018f8 <SWD_Init+0xa0>
    }

    /* Default AP selection */
    if (SWD_Select_AHB_AP() != SWD_ERROR_OK) {
 80018dc:	f7ff ffb2 	bl	8001844 <SWD_Select_AHB_AP>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d004      	beq.n	80018f0 <SWD_Init+0x98>
        printf("[SWD] SELECT write failed\n");
 80018e6:	480b      	ldr	r0, [pc, #44]	@ (8001914 <SWD_Init+0xbc>)
 80018e8:	f006 face 	bl	8007e88 <puts>
        return SWD_ERROR_FAULT;
 80018ec:	2302      	movs	r3, #2
 80018ee:	e003      	b.n	80018f8 <SWD_Init+0xa0>
    }

    HAL_Delay(10);
 80018f0:	200a      	movs	r0, #10
 80018f2:	f000 fdf7 	bl	80024e4 <HAL_Delay>
    return SWD_ERROR_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	08008b90 	.word	0x08008b90
 8001904:	08008bac 	.word	0x08008bac
 8001908:	08008bc4 	.word	0x08008bc4
 800190c:	08008be4 	.word	0x08008be4
 8001910:	08008c00 	.word	0x08008c00
 8001914:	08008c28 	.word	0x08008c28

08001918 <SWD_Write_DP>:
{ return SWD_WriteReg(false, reg, data, false); }
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
 8001924:	79f9      	ldrb	r1, [r7, #7]
 8001926:	2300      	movs	r3, #0
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	2000      	movs	r0, #0
 800192c:	f000 fafa 	bl	8001f24 <SWD_WriteReg>
 8001930:	4603      	mov	r3, r0
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <SWD_Read_DP>:
{ return SWD_ReadReg(false, reg, data, false); }
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	6039      	str	r1, [r7, #0]
 8001944:	71fb      	strb	r3, [r7, #7]
 8001946:	79f9      	ldrb	r1, [r7, #7]
 8001948:	2300      	movs	r3, #0
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	2000      	movs	r0, #0
 800194e:	f000 fbc7 	bl	80020e0 <SWD_ReadReg>
 8001952:	4603      	mov	r3, r0
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <SWD_Write_AP>:

static inline swd_error_t SWD_Write_AP(uint8_t reg, uint32_t data)
{ return SWD_WriteReg(true,  reg, data, false); }
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
 8001968:	79f9      	ldrb	r1, [r7, #7]
 800196a:	2300      	movs	r3, #0
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	2001      	movs	r0, #1
 8001970:	f000 fad8 	bl	8001f24 <SWD_WriteReg>
 8001974:	4603      	mov	r3, r0
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <SWD_Read_AP>:

static inline swd_error_t SWD_Read_AP(uint8_t reg, uint32_t *data)
{ return SWD_ReadReg(true,  reg, data, false); }
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	6039      	str	r1, [r7, #0]
 8001988:	71fb      	strb	r3, [r7, #7]
 800198a:	79f9      	ldrb	r1, [r7, #7]
 800198c:	2300      	movs	r3, #0
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	2001      	movs	r0, #1
 8001992:	f000 fba5 	bl	80020e0 <SWD_ReadReg>
 8001996:	4603      	mov	r3, r0
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <SWD_Read_AP_Retry>:
    }
    return SWD_ERROR_WAIT;
}

swd_error_t SWD_Read_AP_Retry(uint8_t reg, uint32_t *data, int tries)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	73fb      	strb	r3, [r7, #15]
    while (tries--) {
 80019ae:	e015      	b.n	80019dc <SWD_Read_AP_Retry+0x3c>
        swd_error_t e = SWD_Read_AP(reg, data);
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	68b9      	ldr	r1, [r7, #8]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ffe2 	bl	800197e <SWD_Read_AP>
 80019ba:	4603      	mov	r3, r0
 80019bc:	75fb      	strb	r3, [r7, #23]
        if (e == SWD_ERROR_OK)   return e;
 80019be:	7dfb      	ldrb	r3, [r7, #23]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <SWD_Read_AP_Retry+0x28>
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
 80019c6:	e00f      	b.n	80019e8 <SWD_Read_AP_Retry+0x48>
        if (e == SWD_ERROR_FAULT) SWD_ClearSticky();
 80019c8:	7dfb      	ldrb	r3, [r7, #23]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d101      	bne.n	80019d2 <SWD_Read_AP_Retry+0x32>
 80019ce:	f000 f851 	bl	8001a74 <SWD_ClearSticky>
        if (e != SWD_ERROR_WAIT) return e;
 80019d2:	7dfb      	ldrb	r3, [r7, #23]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d001      	beq.n	80019dc <SWD_Read_AP_Retry+0x3c>
 80019d8:	7dfb      	ldrb	r3, [r7, #23]
 80019da:	e005      	b.n	80019e8 <SWD_Read_AP_Retry+0x48>
    while (tries--) {
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	1e5a      	subs	r2, r3, #1
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1e4      	bne.n	80019b0 <SWD_Read_AP_Retry+0x10>
    }
    return SWD_ERROR_WAIT;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <SWD_PollPowerUp>:

/* ---------------------------------------------------------------------------
 *  Poll DP_CTRL_STAT for power-up acknowledge
 *---------------------------------------------------------------------------*/
bool SWD_PollPowerUp(uint32_t timeout_ms)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
    uint32_t stat;

    while (timeout_ms--)
 80019f8:	e018      	b.n	8001a2c <SWD_PollPowerUp+0x3c>
    {
        if (SWD_Read_DP(DP_CTRL_STAT, &stat) != SWD_ERROR_OK)
 80019fa:	f107 030c 	add.w	r3, r7, #12
 80019fe:	4619      	mov	r1, r3
 8001a00:	2001      	movs	r0, #1
 8001a02:	f7ff ff9a 	bl	800193a <SWD_Read_DP>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10e      	bne.n	8001a2a <SWD_PollPowerUp+0x3a>
            continue;                       /* retry on WAIT / FAULT */

        /* CDBGPWRUPACK (bit 29) && CSYSPWRUPACK (bit 31) */
        if ( (stat & (1u << 29)) && (stat & (1u << 31)) )
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d004      	beq.n	8001a20 <SWD_PollPowerUp+0x30>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	da01      	bge.n	8001a20 <SWD_PollPowerUp+0x30>
            return true;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e00b      	b.n	8001a38 <SWD_PollPowerUp+0x48>

        delay_us(1000);                     /* ~1 ms back-off   */
 8001a20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a24:	f000 f988 	bl	8001d38 <delay_us>
 8001a28:	e000      	b.n	8001a2c <SWD_PollPowerUp+0x3c>
            continue;                       /* retry on WAIT / FAULT */
 8001a2a:	bf00      	nop
    while (timeout_ms--)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	1e5a      	subs	r2, r3, #1
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1e1      	bne.n	80019fa <SWD_PollPowerUp+0xa>
    }
    return false;                            /* timeout          */
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <SWD_Write_TAR>:

/* ---------------------------------------------------------------------------
 *  Write Target Address Register (AP-TAR)
 *---------------------------------------------------------------------------*/
swd_error_t SWD_Write_TAR(uint32_t addr)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
    return SWD_Write_AP(AP_TAR, addr);       /* returns SWD_ERROR_* */
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f7ff ff86 	bl	800195c <SWD_Write_AP>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <SWD_Write_DRW>:

/* ---------------------------------------------------------------------------
 *  Write Data Read/Write register (AP-DRW)
 *---------------------------------------------------------------------------*/
swd_error_t SWD_Write_DRW(uint32_t data)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
    return SWD_Write_AP(AP_DRW, data);
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	2003      	movs	r0, #3
 8001a66:	f7ff ff79 	bl	800195c <SWD_Write_AP>
 8001a6a:	4603      	mov	r3, r0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <SWD_ClearSticky>:
/* -----------------  Clear sticky error flags in DP --------------------
 *  Must be called after any transaction that returns ACK_FAULT,
 *  OR once straight after power-up (recommended).
 * -------------------------------------------------------------------*/
swd_error_t SWD_ClearSticky(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
    /* DP_ABORT is register index 0 (A3:A2 = 00b)                        *
     * We write a 1 to every “*_CLR” bit we want to clear.                */
    uint32_t value = DP_ABORT_STKERRCLR |
 8001a7a:	2338      	movs	r3, #56	@ 0x38
 8001a7c:	607b      	str	r3, [r7, #4]
                     DP_ABORT_WDERRCLR  |
                     DP_ABORT_ORUNERRCLR;

    return SWD_Write_DP(/*reg=*/0, value);
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	2000      	movs	r0, #0
 8001a82:	f7ff ff49 	bl	8001918 <SWD_Write_DP>
 8001a86:	4603      	mov	r3, r0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <SWD_Erase_Range>:



/* Erase_Range – wipes every page that overlaps the requested span -------------------------------------------------------------*/
swd_error_t SWD_Erase_Range(uint32_t start_addr, uint32_t num_bytes)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
    uint32_t first_page = start_addr & ~(MSC_PAGE_SIZE - 1UL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001aa0:	f023 0307 	bic.w	r3, r3, #7
 8001aa4:	613b      	str	r3, [r7, #16]
    uint32_t last_byte  = start_addr + num_bytes - 1UL;
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	3b01      	subs	r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
    uint32_t last_page  = last_byte & ~(MSC_PAGE_SIZE - 1UL);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001ab6:	f023 0307 	bic.w	r3, r3, #7
 8001aba:	60bb      	str	r3, [r7, #8]

    for (uint32_t addr = first_page; addr <= last_page; addr += MSC_PAGE_SIZE) {
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	e00b      	b.n	8001ada <SWD_Erase_Range+0x4a>
        if (SWD_Erase_Page(addr) != SWD_ERROR_OK)
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f000 f824 	bl	8001b10 <SWD_Erase_Page>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <SWD_Erase_Range+0x42>
            return SWD_ERROR_FAULT;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e008      	b.n	8001ae4 <SWD_Erase_Range+0x54>
    for (uint32_t addr = first_page; addr <= last_page; addr += MSC_PAGE_SIZE) {
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d9ef      	bls.n	8001ac2 <SWD_Erase_Range+0x32>
    }
    return SWD_ERROR_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <SWD_Unlock_Flash>:

/* Unlock flash controller ------------------------------------------------*/
swd_error_t SWD_Unlock_Flash(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
    if (SWD_Write_TAR(MSC_WRITECTRL) != SWD_ERROR_OK)
 8001af0:	4806      	ldr	r0, [pc, #24]	@ (8001b0c <SWD_Unlock_Flash+0x20>)
 8001af2:	f7ff ffa5 	bl	8001a40 <SWD_Write_TAR>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <SWD_Unlock_Flash+0x14>
        return SWD_ERROR_FAULT;
 8001afc:	2302      	movs	r3, #2
 8001afe:	e003      	b.n	8001b08 <SWD_Unlock_Flash+0x1c>
    return SWD_Write_DRW(MSC_WRITECTRL_WREN);
 8001b00:	2001      	movs	r0, #1
 8001b02:	f7ff ffaa 	bl	8001a5a <SWD_Write_DRW>
 8001b06:	4603      	mov	r3, r0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	400e0000 	.word	0x400e0000

08001b10 <SWD_Erase_Page>:

/* Erase single flash page ------------------------------------------------*/
swd_error_t SWD_Erase_Page(uint32_t page_address)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
    uint32_t status;

    SWD_Write_TAR(MSC_ADDRB);
 8001b18:	4812      	ldr	r0, [pc, #72]	@ (8001b64 <SWD_Erase_Page+0x54>)
 8001b1a:	f7ff ff91 	bl	8001a40 <SWD_Write_TAR>
    SWD_Write_DRW(page_address); // page i want to erase
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ff9b 	bl	8001a5a <SWD_Write_DRW>

    SWD_Write_TAR(MSC_WRITECMD);
 8001b24:	4810      	ldr	r0, [pc, #64]	@ (8001b68 <SWD_Erase_Page+0x58>)
 8001b26:	f7ff ff8b 	bl	8001a40 <SWD_Write_TAR>
    SWD_Write_DRW(MSC_WRITECMD_ERASEPAGE);
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	f7ff ff95 	bl	8001a5a <SWD_Write_DRW>

    /* poll BUSY, retry on ACK WAIT */
    do {
        SWD_Write_TAR(MSC_STATUS);
 8001b30:	480e      	ldr	r0, [pc, #56]	@ (8001b6c <SWD_Erase_Page+0x5c>)
 8001b32:	f7ff ff85 	bl	8001a40 <SWD_Write_TAR>
        if (SWD_Read_AP_Retry(AP_DRW, &status, SWD_WAIT_RETRIES_DEFAULT) != SWD_ERROR_OK)
 8001b36:	f107 030c 	add.w	r3, r7, #12
 8001b3a:	2232      	movs	r2, #50	@ 0x32
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	2003      	movs	r0, #3
 8001b40:	f7ff ff2e 	bl	80019a0 <SWD_Read_AP_Retry>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <SWD_Erase_Page+0x3e>
            return SWD_ERROR_FAULT;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e005      	b.n	8001b5a <SWD_Erase_Page+0x4a>
    } while (status & MSC_STATUS_BUSY);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1eb      	bne.n	8001b30 <SWD_Erase_Page+0x20>

    return SWD_ERROR_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	400e0004 	.word	0x400e0004
 8001b68:	400e0008 	.word	0x400e0008
 8001b6c:	400e000c 	.word	0x400e000c

08001b70 <SWD_Write_Word>:

/* Write one 32 bit word --------------------------------------------------*/
swd_error_t SWD_Write_Word(uint32_t addr, uint32_t data)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
    uint32_t status;

    SWD_Write_TAR(MSC_ADDRB);     SWD_Write_DRW(addr);
 8001b7a:	4815      	ldr	r0, [pc, #84]	@ (8001bd0 <SWD_Write_Word+0x60>)
 8001b7c:	f7ff ff60 	bl	8001a40 <SWD_Write_TAR>
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ff6a 	bl	8001a5a <SWD_Write_DRW>
    SWD_Write_TAR(MSC_WDATA);     SWD_Write_DRW(data);
 8001b86:	4813      	ldr	r0, [pc, #76]	@ (8001bd4 <SWD_Write_Word+0x64>)
 8001b88:	f7ff ff5a 	bl	8001a40 <SWD_Write_TAR>
 8001b8c:	6838      	ldr	r0, [r7, #0]
 8001b8e:	f7ff ff64 	bl	8001a5a <SWD_Write_DRW>
    SWD_Write_TAR(MSC_WRITECMD);  SWD_Write_DRW(MSC_WRITECMD_WRITEWORD);
 8001b92:	4811      	ldr	r0, [pc, #68]	@ (8001bd8 <SWD_Write_Word+0x68>)
 8001b94:	f7ff ff54 	bl	8001a40 <SWD_Write_TAR>
 8001b98:	2004      	movs	r0, #4
 8001b9a:	f7ff ff5e 	bl	8001a5a <SWD_Write_DRW>

    do {
        SWD_Write_TAR(MSC_STATUS);
 8001b9e:	480f      	ldr	r0, [pc, #60]	@ (8001bdc <SWD_Write_Word+0x6c>)
 8001ba0:	f7ff ff4e 	bl	8001a40 <SWD_Write_TAR>
        if (SWD_Read_AP_Retry(AP_DRW, &status, SWD_WAIT_RETRIES_DEFAULT) != SWD_ERROR_OK)
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	2232      	movs	r2, #50	@ 0x32
 8001baa:	4619      	mov	r1, r3
 8001bac:	2003      	movs	r0, #3
 8001bae:	f7ff fef7 	bl	80019a0 <SWD_Read_AP_Retry>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <SWD_Write_Word+0x4c>
            return SWD_ERROR_FAULT;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e005      	b.n	8001bc8 <SWD_Write_Word+0x58>
    } while (status & MSC_STATUS_BUSY);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1eb      	bne.n	8001b9e <SWD_Write_Word+0x2e>

    return SWD_ERROR_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	400e0004 	.word	0x400e0004
 8001bd4:	400e0010 	.word	0x400e0010
 8001bd8:	400e0008 	.word	0x400e0008
 8001bdc:	400e000c 	.word	0x400e000c

08001be0 <SWD_Write_Firmware>:

/* Bulk program firmware --------------------------------------------------*/
swd_error_t SWD_Write_Firmware(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
    for (uint32_t i = 0; i < firmware_size; ++i) {
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	e015      	b.n	8001c18 <SWD_Write_Firmware+0x38>
        uint32_t addr = FLASH_BASE + (i * 4);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	603b      	str	r3, [r7, #0]
        if (SWD_Write_Word(addr, firmware_bin[i]) != SWD_ERROR_OK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <SWD_Write_Firmware+0x50>)
 8001bfc:	4413      	add	r3, r2
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	6838      	ldr	r0, [r7, #0]
 8001c04:	f7ff ffb4 	bl	8001b70 <SWD_Write_Word>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <SWD_Write_Firmware+0x32>
            return SWD_ERROR_FAULT;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e009      	b.n	8001c26 <SWD_Write_Firmware+0x46>
    for (uint32_t i = 0; i < firmware_size; ++i) {
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3301      	adds	r3, #1
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <SWD_Write_Firmware+0x54>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	089b      	lsrs	r3, r3, #2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d3e3      	bcc.n	8001bec <SWD_Write_Firmware+0xc>
    }
    return SWD_ERROR_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000054 	.word	0x20000054

08001c38 <SWD_Verify_Firmware>:

/* Verify programmed image ------------------------------------------------*/
swd_error_t SWD_Verify_Firmware(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
    for (uint32_t i = 0; i < firmware_size; ++i) {
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	e02f      	b.n	8001ca4 <SWD_Verify_Firmware+0x6c>
        uint32_t addr  = FLASH_BASE + (i * 4);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	60bb      	str	r3, [r7, #8]
        uint32_t value = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]

        SWD_Write_TAR(addr);
 8001c52:	68b8      	ldr	r0, [r7, #8]
 8001c54:	f7ff fef4 	bl	8001a40 <SWD_Write_TAR>
        if (SWD_Read_AP_Retry(AP_DRW, &value, SWD_WAIT_RETRIES_DEFAULT) != SWD_ERROR_OK) {
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	2232      	movs	r2, #50	@ 0x32
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	2003      	movs	r0, #3
 8001c60:	f7ff fe9e 	bl	80019a0 <SWD_Read_AP_Retry>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d005      	beq.n	8001c76 <SWD_Verify_Firmware+0x3e>
            printf("Read error @ 0x%08lX\n", addr);
 8001c6a:	68b9      	ldr	r1, [r7, #8]
 8001c6c:	4814      	ldr	r0, [pc, #80]	@ (8001cc0 <SWD_Verify_Firmware+0x88>)
 8001c6e:	f006 f8a3 	bl	8007db8 <iprintf>
            return SWD_ERROR_FAULT;
 8001c72:	2302      	movs	r3, #2
 8001c74:	e020      	b.n	8001cb8 <SWD_Verify_Firmware+0x80>
        }

        if (value != firmware_bin[i]) {
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4a12      	ldr	r2, [pc, #72]	@ (8001cc4 <SWD_Verify_Firmware+0x8c>)
 8001c7c:	4413      	add	r3, r2
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d00b      	beq.n	8001c9e <SWD_Verify_Firmware+0x66>
            printf("Mismatch @ 0x%08lX: exp 0x%08lX, got 0x%08lX\n", addr, firmware_bin[i], value);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc4 <SWD_Verify_Firmware+0x8c>)
 8001c8c:	4413      	add	r3, r2
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68b9      	ldr	r1, [r7, #8]
 8001c94:	480c      	ldr	r0, [pc, #48]	@ (8001cc8 <SWD_Verify_Firmware+0x90>)
 8001c96:	f006 f88f 	bl	8007db8 <iprintf>
            return SWD_ERROR_PARITY;
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	e00c      	b.n	8001cb8 <SWD_Verify_Firmware+0x80>
    for (uint32_t i = 0; i < firmware_size; ++i) {
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <SWD_Verify_Firmware+0x94>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	089b      	lsrs	r3, r3, #2
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d3c9      	bcc.n	8001c44 <SWD_Verify_Firmware+0xc>
        }
    }
    printf("[SWD] Firmware verified OK\n");
 8001cb0:	4807      	ldr	r0, [pc, #28]	@ (8001cd0 <SWD_Verify_Firmware+0x98>)
 8001cb2:	f006 f8e9 	bl	8007e88 <puts>
    return SWD_ERROR_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	08008c44 	.word	0x08008c44
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	08008c5c 	.word	0x08008c5c
 8001ccc:	20000054 	.word	0x20000054
 8001cd0:	08008c8c 	.word	0x08008c8c

08001cd4 <SWD_Lock_Flash>:

/* Relock flash controller ------------------------------------------------*/
swd_error_t SWD_Lock_Flash(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
    if (SWD_Write_TAR(MSC_LOCK) != SWD_ERROR_OK)
 8001cd8:	4806      	ldr	r0, [pc, #24]	@ (8001cf4 <SWD_Lock_Flash+0x20>)
 8001cda:	f7ff feb1 	bl	8001a40 <SWD_Write_TAR>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <SWD_Lock_Flash+0x14>
        return SWD_ERROR_FAULT;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e003      	b.n	8001cf0 <SWD_Lock_Flash+0x1c>
    return SWD_Write_DRW(MSC_LOCK_LOCKKEY);
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f7ff feb6 	bl	8001a5a <SWD_Write_DRW>
 8001cee:	4603      	mov	r3, r0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	400e0020 	.word	0x400e0020

08001cf8 <enable_dwt_cycle_counter>:

/* -----------------------------------------------------------------------------
 *  DWT based micro second delay
 * --------------------------------------------------------------------------*/
static void enable_dwt_cycle_counter(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
    /* Enable DWT CYCCNT for high resolution timing */
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <enable_dwt_cycle_counter+0x38>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d105      	bne.n	8001d14 <enable_dwt_cycle_counter+0x1c>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001d08:	4b09      	ldr	r3, [pc, #36]	@ (8001d30 <enable_dwt_cycle_counter+0x38>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4a08      	ldr	r2, [pc, #32]	@ (8001d30 <enable_dwt_cycle_counter+0x38>)
 8001d0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d12:	60d3      	str	r3, [r2, #12]

    DWT->CYCCNT = 0;
 8001d14:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <enable_dwt_cycle_counter+0x3c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	605a      	str	r2, [r3, #4]
    DWT->CTRL  |= DWT_CTRL_CYCCNTENA_Msk;
 8001d1a:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <enable_dwt_cycle_counter+0x3c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a05      	ldr	r2, [pc, #20]	@ (8001d34 <enable_dwt_cycle_counter+0x3c>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6013      	str	r3, [r2, #0]
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000edf0 	.word	0xe000edf0
 8001d34:	e0001000 	.word	0xe0001000

08001d38 <delay_us>:

void delay_us(uint32_t us)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
    const uint32_t hclk   = HAL_RCC_GetHCLKFreq();     /* Core frequency (Hz)   */
 8001d40:	f004 f878 	bl	8005e34 <HAL_RCC_GetHCLKFreq>
 8001d44:	6178      	str	r0, [r7, #20]
    const uint32_t cycles = (hclk / 1000000UL) * us;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	4a0c      	ldr	r2, [pc, #48]	@ (8001d7c <delay_us+0x44>)
 8001d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4e:	0c9a      	lsrs	r2, r3, #18
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	fb02 f303 	mul.w	r3, r2, r3
 8001d56:	613b      	str	r3, [r7, #16]
    uint32_t start = DWT->CYCCNT;
 8001d58:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <delay_us+0x48>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < cycles) __NOP();
 8001d5e:	e000      	b.n	8001d62 <delay_us+0x2a>
 8001d60:	bf00      	nop
 8001d62:	4b07      	ldr	r3, [pc, #28]	@ (8001d80 <delay_us+0x48>)
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d8f7      	bhi.n	8001d60 <delay_us+0x28>
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	431bde83 	.word	0x431bde83
 8001d80:	e0001000 	.word	0xe0001000

08001d84 <SWD_Set_IO_Mode_Output>:

/* -----------------------------------------------------------------------------
 *  GPIO configuration helpers
 * --------------------------------------------------------------------------*/
void SWD_Set_IO_Mode_Output(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin   = PIN_SWDIO;
 8001d98:	2380      	movs	r3, #128	@ 0x80
 8001d9a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da4:	2303      	movs	r3, #3
 8001da6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(PORT_SWD, &GPIO_InitStruct);
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	4619      	mov	r1, r3
 8001dac:	4803      	ldr	r0, [pc, #12]	@ (8001dbc <SWD_Set_IO_Mode_Output+0x38>)
 8001dae:	f000 fea7 	bl	8002b00 <HAL_GPIO_Init>
}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40020400 	.word	0x40020400

08001dc0 <SWD_Set_IO_Mode_Input>:

void SWD_Set_IO_Mode_Input(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin  = PIN_SWDIO;
 8001dd4:	2380      	movs	r3, #128	@ 0x80
 8001dd6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PORT_SWD, &GPIO_InitStruct);
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	4619      	mov	r1, r3
 8001de4:	4803      	ldr	r0, [pc, #12]	@ (8001df4 <SWD_Set_IO_Mode_Input+0x34>)
 8001de6:	f000 fe8b 	bl	8002b00 <HAL_GPIO_Init>
}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40020400 	.word	0x40020400

08001df8 <SWD_GPIO_Init>:

void SWD_GPIO_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
    /* Enable GPIO clock (change port if PORT_SWD != GPIOB) */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	4b1f      	ldr	r3, [pc, #124]	@ (8001e80 <SWD_GPIO_Init+0x88>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	4a1e      	ldr	r2, [pc, #120]	@ (8001e80 <SWD_GPIO_Init+0x88>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e80 <SWD_GPIO_Init+0x88>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]

    /* SWCLK configured as push pull output */
    GPIO_InitStruct.Pin   = PIN_SWCLK;
 8001e28:	2340      	movs	r3, #64	@ 0x40
 8001e2a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e34:	2303      	movs	r3, #3
 8001e36:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(PORT_SWD, &GPIO_InitStruct);
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4811      	ldr	r0, [pc, #68]	@ (8001e84 <SWD_GPIO_Init+0x8c>)
 8001e3e:	f000 fe5f 	bl	8002b00 <HAL_GPIO_Init>

    /* SWDIO default high (line idle) */
    SWD_Set_IO_Mode_Output();
 8001e42:	f7ff ff9f 	bl	8001d84 <SWD_Set_IO_Mode_Output>
    HAL_GPIO_WritePin(PORT_SWD, PIN_SWDIO, GPIO_PIN_SET);
 8001e46:	2201      	movs	r2, #1
 8001e48:	2180      	movs	r1, #128	@ 0x80
 8001e4a:	480e      	ldr	r0, [pc, #56]	@ (8001e84 <SWD_GPIO_Init+0x8c>)
 8001e4c:	f001 f81c 	bl	8002e88 <HAL_GPIO_WritePin>

#ifdef PIN_nRESET
    /* nRESET as open-drain output, start HIGH (released) */
    GPIO_InitStruct.Pin   = PIN_nRESET;
 8001e50:	2310      	movs	r3, #16
 8001e52:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 8001e54:	2311      	movs	r3, #17
 8001e56:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(PORT_SWD, &GPIO_InitStruct);
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	4619      	mov	r1, r3
 8001e64:	4807      	ldr	r0, [pc, #28]	@ (8001e84 <SWD_GPIO_Init+0x8c>)
 8001e66:	f000 fe4b 	bl	8002b00 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PORT_SWD, PIN_nRESET, GPIO_PIN_SET);
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	2110      	movs	r1, #16
 8001e6e:	4805      	ldr	r0, [pc, #20]	@ (8001e84 <SWD_GPIO_Init+0x8c>)
 8001e70:	f001 f80a 	bl	8002e88 <HAL_GPIO_WritePin>
#endif

    enable_dwt_cycle_counter();
 8001e74:	f7ff ff40 	bl	8001cf8 <enable_dwt_cycle_counter>
}
 8001e78:	bf00      	nop
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40020400 	.word	0x40020400

08001e88 <SWCLK_Cycle>:

/* -----------------------------------------------------------------------------
 *  SWCLK pulse helper (high → low)
 * --------------------------------------------------------------------------*/
void SWCLK_Cycle(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PORT_SWD, PIN_SWCLK, GPIO_PIN_SET);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	2140      	movs	r1, #64	@ 0x40
 8001e90:	4807      	ldr	r0, [pc, #28]	@ (8001eb0 <SWCLK_Cycle+0x28>)
 8001e92:	f000 fff9 	bl	8002e88 <HAL_GPIO_WritePin>
    delay_us(1);                   /* ≈500 kHz clock (2 µs period) */
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7ff ff4e 	bl	8001d38 <delay_us>
    HAL_GPIO_WritePin(PORT_SWD, PIN_SWCLK, GPIO_PIN_RESET);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2140      	movs	r1, #64	@ 0x40
 8001ea0:	4803      	ldr	r0, [pc, #12]	@ (8001eb0 <SWCLK_Cycle+0x28>)
 8001ea2:	f000 fff1 	bl	8002e88 <HAL_GPIO_WritePin>
    delay_us(1);
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	f7ff ff46 	bl	8001d38 <delay_us>
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40020400 	.word	0x40020400

08001eb4 <SWD_LineReset>:

/* -----------------------------------------------------------------------------
 *  Line reset: 60 clock cycles, SWDIO kept high
 * --------------------------------------------------------------------------*/
void SWD_LineReset(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
    SWD_Set_IO_Mode_Output();
 8001eba:	f7ff ff63 	bl	8001d84 <SWD_Set_IO_Mode_Output>
    HAL_GPIO_WritePin(PORT_SWD, PIN_SWDIO, GPIO_PIN_SET);
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	2180      	movs	r1, #128	@ 0x80
 8001ec2:	4809      	ldr	r0, [pc, #36]	@ (8001ee8 <SWD_LineReset+0x34>)
 8001ec4:	f000 ffe0 	bl	8002e88 <HAL_GPIO_WritePin>

    for (uint8_t i = 0; i < 60; ++i)
 8001ec8:	2300      	movs	r3, #0
 8001eca:	71fb      	strb	r3, [r7, #7]
 8001ecc:	e004      	b.n	8001ed8 <SWD_LineReset+0x24>
        SWCLK_Cycle();
 8001ece:	f7ff ffdb 	bl	8001e88 <SWCLK_Cycle>
    for (uint8_t i = 0; i < 60; ++i)
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	71fb      	strb	r3, [r7, #7]
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	2b3b      	cmp	r3, #59	@ 0x3b
 8001edc:	d9f7      	bls.n	8001ece <SWD_LineReset+0x1a>
}
 8001ede:	bf00      	nop
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40020400 	.word	0x40020400

08001eec <idle_cycles>:
        SWCLK_Cycle(); \
        bit_var = HAL_GPIO_ReadPin(PORT_SWD, PIN_SWDIO); \
    } while (0)

static inline void idle_cycles(uint8_t n)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
    SWD_Set_IO_Mode_Output();
 8001ef6:	f7ff ff45 	bl	8001d84 <SWD_Set_IO_Mode_Output>
    while (n--) SWD_WRITE_BIT(0);
 8001efa:	e006      	b.n	8001f0a <idle_cycles+0x1e>
 8001efc:	2200      	movs	r2, #0
 8001efe:	2180      	movs	r1, #128	@ 0x80
 8001f00:	4807      	ldr	r0, [pc, #28]	@ (8001f20 <idle_cycles+0x34>)
 8001f02:	f000 ffc1 	bl	8002e88 <HAL_GPIO_WritePin>
 8001f06:	f7ff ffbf 	bl	8001e88 <SWCLK_Cycle>
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	1e5a      	subs	r2, r3, #1
 8001f0e:	71fa      	strb	r2, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f3      	bne.n	8001efc <idle_cycles+0x10>
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40020400 	.word	0x40020400

08001f24 <SWD_WriteReg>:

/* -----------------------------------------------------------------------------
 *  Generic write (AP/DP) – returns swd_error_t
 * --------------------------------------------------------------------------*/
swd_error_t SWD_WriteReg(bool ap, uint8_t reg, uint32_t data, bool ignore_ack)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	603a      	str	r2, [r7, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
 8001f32:	460b      	mov	r3, r1
 8001f34:	71bb      	strb	r3, [r7, #6]
 8001f36:	4613      	mov	r3, r2
 8001f38:	717b      	strb	r3, [r7, #5]
    uint8_t A2 =  reg       & 1;
 8001f3a:	79bb      	ldrb	r3, [r7, #6]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	73fb      	strb	r3, [r7, #15]
    uint8_t A3 = (reg >> 1) & 1;
 8001f42:	79bb      	ldrb	r3, [r7, #6]
 8001f44:	085b      	lsrs	r3, r3, #1
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	73bb      	strb	r3, [r7, #14]
    uint8_t head_parity = (ap + /*RnW=*/0 + A2 + A3) & 1; // if sum of bit 1-4 is even it will be 0 otherwise it will be 1
 8001f4e:	79fa      	ldrb	r2, [r7, #7]
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	4413      	add	r3, r2
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	7bbb      	ldrb	r3, [r7, #14]
 8001f58:	4413      	add	r3, r2
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	737b      	strb	r3, [r7, #13]

    /* Header (host ➜ target) */
    SWD_Set_IO_Mode_Output();
 8001f62:	f7ff ff0f 	bl	8001d84 <SWD_Set_IO_Mode_Output>
    SWD_WRITE_BIT(START_BIT);
 8001f66:	2201      	movs	r2, #1
 8001f68:	2180      	movs	r1, #128	@ 0x80
 8001f6a:	485c      	ldr	r0, [pc, #368]	@ (80020dc <SWD_WriteReg+0x1b8>)
 8001f6c:	f000 ff8c 	bl	8002e88 <HAL_GPIO_WritePin>
 8001f70:	f7ff ff8a 	bl	8001e88 <SWCLK_Cycle>
    SWD_WRITE_BIT(ap);
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	461a      	mov	r2, r3
 8001f78:	2180      	movs	r1, #128	@ 0x80
 8001f7a:	4858      	ldr	r0, [pc, #352]	@ (80020dc <SWD_WriteReg+0x1b8>)
 8001f7c:	f000 ff84 	bl	8002e88 <HAL_GPIO_WritePin>
 8001f80:	f7ff ff82 	bl	8001e88 <SWCLK_Cycle>
    SWD_WRITE_BIT(0);            /* RnW = 0 */
 8001f84:	2200      	movs	r2, #0
 8001f86:	2180      	movs	r1, #128	@ 0x80
 8001f88:	4854      	ldr	r0, [pc, #336]	@ (80020dc <SWD_WriteReg+0x1b8>)
 8001f8a:	f000 ff7d 	bl	8002e88 <HAL_GPIO_WritePin>
 8001f8e:	f7ff ff7b 	bl	8001e88 <SWCLK_Cycle>
    SWD_WRITE_BIT(A2);
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf14      	ite	ne
 8001f98:	2301      	movne	r3, #1
 8001f9a:	2300      	moveq	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	2180      	movs	r1, #128	@ 0x80
 8001fa2:	484e      	ldr	r0, [pc, #312]	@ (80020dc <SWD_WriteReg+0x1b8>)
 8001fa4:	f000 ff70 	bl	8002e88 <HAL_GPIO_WritePin>
 8001fa8:	f7ff ff6e 	bl	8001e88 <SWCLK_Cycle>
    SWD_WRITE_BIT(A3);
 8001fac:	7bbb      	ldrb	r3, [r7, #14]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	bf14      	ite	ne
 8001fb2:	2301      	movne	r3, #1
 8001fb4:	2300      	moveq	r3, #0
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	2180      	movs	r1, #128	@ 0x80
 8001fbc:	4847      	ldr	r0, [pc, #284]	@ (80020dc <SWD_WriteReg+0x1b8>)
 8001fbe:	f000 ff63 	bl	8002e88 <HAL_GPIO_WritePin>
 8001fc2:	f7ff ff61 	bl	8001e88 <SWCLK_Cycle>
    SWD_WRITE_BIT(head_parity);
 8001fc6:	7b7b      	ldrb	r3, [r7, #13]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	bf14      	ite	ne
 8001fcc:	2301      	movne	r3, #1
 8001fce:	2300      	moveq	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	2180      	movs	r1, #128	@ 0x80
 8001fd6:	4841      	ldr	r0, [pc, #260]	@ (80020dc <SWD_WriteReg+0x1b8>)
 8001fd8:	f000 ff56 	bl	8002e88 <HAL_GPIO_WritePin>
 8001fdc:	f7ff ff54 	bl	8001e88 <SWCLK_Cycle>
    SWD_WRITE_BIT(STOP_BIT);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2180      	movs	r1, #128	@ 0x80
 8001fe4:	483d      	ldr	r0, [pc, #244]	@ (80020dc <SWD_WriteReg+0x1b8>)
 8001fe6:	f000 ff4f 	bl	8002e88 <HAL_GPIO_WritePin>
 8001fea:	f7ff ff4d 	bl	8001e88 <SWCLK_Cycle>
    SWD_WRITE_BIT(PARK_BIT);
 8001fee:	2201      	movs	r2, #1
 8001ff0:	2180      	movs	r1, #128	@ 0x80
 8001ff2:	483a      	ldr	r0, [pc, #232]	@ (80020dc <SWD_WriteReg+0x1b8>)
 8001ff4:	f000 ff48 	bl	8002e88 <HAL_GPIO_WritePin>
 8001ff8:	f7ff ff46 	bl	8001e88 <SWCLK_Cycle>

    /* Turn around (host→target) */
    SWD_Set_IO_Mode_Input();
 8001ffc:	f7ff fee0 	bl	8001dc0 <SWD_Set_IO_Mode_Input>
    SWCLK_Cycle();
 8002000:	f7ff ff42 	bl	8001e88 <SWCLK_Cycle>

    /* Read ACK */
    uint32_t ack = 0, bit;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 3; ++i) { SWD_READ_BIT(bit); ack |= bit << i; }
 8002008:	2300      	movs	r3, #0
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	e011      	b.n	8002032 <SWD_WriteReg+0x10e>
 800200e:	f7ff ff3b 	bl	8001e88 <SWCLK_Cycle>
 8002012:	2180      	movs	r1, #128	@ 0x80
 8002014:	4831      	ldr	r0, [pc, #196]	@ (80020dc <SWD_WriteReg+0x1b8>)
 8002016:	f000 ff1f 	bl	8002e58 <HAL_GPIO_ReadPin>
 800201a:	4603      	mov	r3, r0
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	4313      	orrs	r3, r2
 800202a:	61fb      	str	r3, [r7, #28]
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	3301      	adds	r3, #1
 8002030:	61bb      	str	r3, [r7, #24]
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	2b02      	cmp	r3, #2
 8002036:	ddea      	ble.n	800200e <SWD_WriteReg+0xea>

    if (ack != ACK_OK && !ignore_ack) {
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d011      	beq.n	8002062 <SWD_WriteReg+0x13e>
 800203e:	797b      	ldrb	r3, [r7, #5]
 8002040:	f083 0301 	eor.w	r3, r3, #1
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00b      	beq.n	8002062 <SWD_WriteReg+0x13e>
        return (ack == ACK_WAIT)  ? SWD_ERROR_WAIT   :
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d006      	beq.n	800205e <SWD_WriteReg+0x13a>
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	2b04      	cmp	r3, #4
 8002054:	d101      	bne.n	800205a <SWD_WriteReg+0x136>
 8002056:	2302      	movs	r3, #2
 8002058:	e03c      	b.n	80020d4 <SWD_WriteReg+0x1b0>
 800205a:	2303      	movs	r3, #3
 800205c:	e03a      	b.n	80020d4 <SWD_WriteReg+0x1b0>
 800205e:	2301      	movs	r3, #1
 8002060:	e038      	b.n	80020d4 <SWD_WriteReg+0x1b0>
               (ack == ACK_FAULT) ? SWD_ERROR_FAULT  : SWD_ERROR_PROTOCOL;
    }

    /* Turn around (target→host) */
    SWCLK_Cycle();
 8002062:	f7ff ff11 	bl	8001e88 <SWCLK_Cycle>
    SWD_Set_IO_Mode_Output();
 8002066:	f7ff fe8d 	bl	8001d84 <SWD_Set_IO_Mode_Output>

    /* Send data + parity */
    uint8_t parity = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 32; ++i) {
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	e01b      	b.n	80020ac <SWD_WriteReg+0x188>
    	bit = (data >> i) & 1;
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	60bb      	str	r3, [r7, #8]
        SWD_WRITE_BIT(bit);
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf14      	ite	ne
 8002088:	2301      	movne	r3, #1
 800208a:	2300      	moveq	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	2180      	movs	r1, #128	@ 0x80
 8002092:	4812      	ldr	r0, [pc, #72]	@ (80020dc <SWD_WriteReg+0x1b8>)
 8002094:	f000 fef8 	bl	8002e88 <HAL_GPIO_WritePin>
 8002098:	f7ff fef6 	bl	8001e88 <SWCLK_Cycle>
        parity ^= bit;
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
 80020a2:	4053      	eors	r3, r2
 80020a4:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 32; ++i) {
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	3301      	adds	r3, #1
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	2b1f      	cmp	r3, #31
 80020b0:	dde0      	ble.n	8002074 <SWD_WriteReg+0x150>
    }
    SWD_WRITE_BIT(parity);
 80020b2:	7dfb      	ldrb	r3, [r7, #23]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bf14      	ite	ne
 80020b8:	2301      	movne	r3, #1
 80020ba:	2300      	moveq	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	2180      	movs	r1, #128	@ 0x80
 80020c2:	4806      	ldr	r0, [pc, #24]	@ (80020dc <SWD_WriteReg+0x1b8>)
 80020c4:	f000 fee0 	bl	8002e88 <HAL_GPIO_WritePin>
 80020c8:	f7ff fede 	bl	8001e88 <SWCLK_Cycle>

    idle_cycles(8);
 80020cc:	2008      	movs	r0, #8
 80020ce:	f7ff ff0d 	bl	8001eec <idle_cycles>
    return SWD_ERROR_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3720      	adds	r7, #32
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40020400 	.word	0x40020400

080020e0 <SWD_ReadReg>:

/* -----------------------------------------------------------------------------
 *  Generic read (AP/DP)
 * --------------------------------------------------------------------------*/
swd_error_t SWD_ReadReg(bool ap, uint8_t reg, uint32_t *data, bool ignore_ack)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	@ 0x28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	603a      	str	r2, [r7, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
 80020ee:	460b      	mov	r3, r1
 80020f0:	71bb      	strb	r3, [r7, #6]
 80020f2:	4613      	mov	r3, r2
 80020f4:	717b      	strb	r3, [r7, #5]
    uint8_t A2 =  reg       & 1;
 80020f6:	79bb      	ldrb	r3, [r7, #6]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	74fb      	strb	r3, [r7, #19]
    uint8_t A3 = (reg >> 1) & 1;
 80020fe:	79bb      	ldrb	r3, [r7, #6]
 8002100:	085b      	lsrs	r3, r3, #1
 8002102:	b2db      	uxtb	r3, r3
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	74bb      	strb	r3, [r7, #18]
    uint8_t head_parity = (ap + /*RnW=*/1 + A2 + A3) & 1;
 800210a:	79fa      	ldrb	r2, [r7, #7]
 800210c:	7cfb      	ldrb	r3, [r7, #19]
 800210e:	4413      	add	r3, r2
 8002110:	b2da      	uxtb	r2, r3
 8002112:	7cbb      	ldrb	r3, [r7, #18]
 8002114:	4413      	add	r3, r2
 8002116:	b2db      	uxtb	r3, r3
 8002118:	3301      	adds	r3, #1
 800211a:	b2db      	uxtb	r3, r3
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	747b      	strb	r3, [r7, #17]

    SWD_Set_IO_Mode_Output();
 8002122:	f7ff fe2f 	bl	8001d84 <SWD_Set_IO_Mode_Output>
    SWD_WRITE_BIT(START_BIT);
 8002126:	2201      	movs	r2, #1
 8002128:	2180      	movs	r1, #128	@ 0x80
 800212a:	485c      	ldr	r0, [pc, #368]	@ (800229c <SWD_ReadReg+0x1bc>)
 800212c:	f000 feac 	bl	8002e88 <HAL_GPIO_WritePin>
 8002130:	f7ff feaa 	bl	8001e88 <SWCLK_Cycle>
    SWD_WRITE_BIT(ap);
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	461a      	mov	r2, r3
 8002138:	2180      	movs	r1, #128	@ 0x80
 800213a:	4858      	ldr	r0, [pc, #352]	@ (800229c <SWD_ReadReg+0x1bc>)
 800213c:	f000 fea4 	bl	8002e88 <HAL_GPIO_WritePin>
 8002140:	f7ff fea2 	bl	8001e88 <SWCLK_Cycle>
    SWD_WRITE_BIT(1);            /* RnW = 1 */
 8002144:	2201      	movs	r2, #1
 8002146:	2180      	movs	r1, #128	@ 0x80
 8002148:	4854      	ldr	r0, [pc, #336]	@ (800229c <SWD_ReadReg+0x1bc>)
 800214a:	f000 fe9d 	bl	8002e88 <HAL_GPIO_WritePin>
 800214e:	f7ff fe9b 	bl	8001e88 <SWCLK_Cycle>
    SWD_WRITE_BIT(A2);
 8002152:	7cfb      	ldrb	r3, [r7, #19]
 8002154:	2b00      	cmp	r3, #0
 8002156:	bf14      	ite	ne
 8002158:	2301      	movne	r3, #1
 800215a:	2300      	moveq	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	2180      	movs	r1, #128	@ 0x80
 8002162:	484e      	ldr	r0, [pc, #312]	@ (800229c <SWD_ReadReg+0x1bc>)
 8002164:	f000 fe90 	bl	8002e88 <HAL_GPIO_WritePin>
 8002168:	f7ff fe8e 	bl	8001e88 <SWCLK_Cycle>
    SWD_WRITE_BIT(A3);
 800216c:	7cbb      	ldrb	r3, [r7, #18]
 800216e:	2b00      	cmp	r3, #0
 8002170:	bf14      	ite	ne
 8002172:	2301      	movne	r3, #1
 8002174:	2300      	moveq	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	2180      	movs	r1, #128	@ 0x80
 800217c:	4847      	ldr	r0, [pc, #284]	@ (800229c <SWD_ReadReg+0x1bc>)
 800217e:	f000 fe83 	bl	8002e88 <HAL_GPIO_WritePin>
 8002182:	f7ff fe81 	bl	8001e88 <SWCLK_Cycle>
    SWD_WRITE_BIT(head_parity);
 8002186:	7c7b      	ldrb	r3, [r7, #17]
 8002188:	2b00      	cmp	r3, #0
 800218a:	bf14      	ite	ne
 800218c:	2301      	movne	r3, #1
 800218e:	2300      	moveq	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	2180      	movs	r1, #128	@ 0x80
 8002196:	4841      	ldr	r0, [pc, #260]	@ (800229c <SWD_ReadReg+0x1bc>)
 8002198:	f000 fe76 	bl	8002e88 <HAL_GPIO_WritePin>
 800219c:	f7ff fe74 	bl	8001e88 <SWCLK_Cycle>
    SWD_WRITE_BIT(STOP_BIT);
 80021a0:	2200      	movs	r2, #0
 80021a2:	2180      	movs	r1, #128	@ 0x80
 80021a4:	483d      	ldr	r0, [pc, #244]	@ (800229c <SWD_ReadReg+0x1bc>)
 80021a6:	f000 fe6f 	bl	8002e88 <HAL_GPIO_WritePin>
 80021aa:	f7ff fe6d 	bl	8001e88 <SWCLK_Cycle>
    SWD_WRITE_BIT(PARK_BIT);
 80021ae:	2201      	movs	r2, #1
 80021b0:	2180      	movs	r1, #128	@ 0x80
 80021b2:	483a      	ldr	r0, [pc, #232]	@ (800229c <SWD_ReadReg+0x1bc>)
 80021b4:	f000 fe68 	bl	8002e88 <HAL_GPIO_WritePin>
 80021b8:	f7ff fe66 	bl	8001e88 <SWCLK_Cycle>

    /* Turn‑around */
    SWD_Set_IO_Mode_Input();
 80021bc:	f7ff fe00 	bl	8001dc0 <SWD_Set_IO_Mode_Input>
    SWCLK_Cycle();
 80021c0:	f7ff fe62 	bl	8001e88 <SWCLK_Cycle>

    uint32_t ack = 0, bit;
 80021c4:	2300      	movs	r3, #0
 80021c6:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < 3; ++i) { SWD_READ_BIT(bit); ack |= bit << i; }
 80021c8:	2300      	movs	r3, #0
 80021ca:	623b      	str	r3, [r7, #32]
 80021cc:	e011      	b.n	80021f2 <SWD_ReadReg+0x112>
 80021ce:	f7ff fe5b 	bl	8001e88 <SWCLK_Cycle>
 80021d2:	2180      	movs	r1, #128	@ 0x80
 80021d4:	4831      	ldr	r0, [pc, #196]	@ (800229c <SWD_ReadReg+0x1bc>)
 80021d6:	f000 fe3f 	bl	8002e58 <HAL_GPIO_ReadPin>
 80021da:	4603      	mov	r3, r0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021e8:	4313      	orrs	r3, r2
 80021ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	3301      	adds	r3, #1
 80021f0:	623b      	str	r3, [r7, #32]
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	ddea      	ble.n	80021ce <SWD_ReadReg+0xee>

    if (ack != ACK_OK && !ignore_ack) {
 80021f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d011      	beq.n	8002222 <SWD_ReadReg+0x142>
 80021fe:	797b      	ldrb	r3, [r7, #5]
 8002200:	f083 0301 	eor.w	r3, r3, #1
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <SWD_ReadReg+0x142>
        return (ack == ACK_WAIT)  ? SWD_ERROR_WAIT   :
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	2b02      	cmp	r3, #2
 800220e:	d006      	beq.n	800221e <SWD_ReadReg+0x13e>
 8002210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002212:	2b04      	cmp	r3, #4
 8002214:	d101      	bne.n	800221a <SWD_ReadReg+0x13a>
 8002216:	2302      	movs	r3, #2
 8002218:	e03c      	b.n	8002294 <SWD_ReadReg+0x1b4>
 800221a:	2303      	movs	r3, #3
 800221c:	e03a      	b.n	8002294 <SWD_ReadReg+0x1b4>
 800221e:	2301      	movs	r3, #1
 8002220:	e038      	b.n	8002294 <SWD_ReadReg+0x1b4>
               (ack == ACK_FAULT) ? SWD_ERROR_FAULT  : SWD_ERROR_PROTOCOL;
    }

    /* Read 32‑bit data */
    uint32_t val = 0; uint8_t parity = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
 8002226:	2300      	movs	r3, #0
 8002228:	76fb      	strb	r3, [r7, #27]
    for (int i = 0; i < 32; ++i) { SWD_READ_BIT(bit); val |= bit << i; parity ^= bit; }
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	e016      	b.n	800225e <SWD_ReadReg+0x17e>
 8002230:	f7ff fe2a 	bl	8001e88 <SWCLK_Cycle>
 8002234:	2180      	movs	r1, #128	@ 0x80
 8002236:	4819      	ldr	r0, [pc, #100]	@ (800229c <SWD_ReadReg+0x1bc>)
 8002238:	f000 fe0e 	bl	8002e58 <HAL_GPIO_ReadPin>
 800223c:	4603      	mov	r3, r0
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	4313      	orrs	r3, r2
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	7efb      	ldrb	r3, [r7, #27]
 8002254:	4053      	eors	r3, r2
 8002256:	76fb      	strb	r3, [r7, #27]
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	3301      	adds	r3, #1
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2b1f      	cmp	r3, #31
 8002262:	dde5      	ble.n	8002230 <SWD_ReadReg+0x150>

    /* Parity bit */
    uint8_t parity_bit; SWD_READ_BIT(parity_bit);
 8002264:	f7ff fe10 	bl	8001e88 <SWCLK_Cycle>
 8002268:	2180      	movs	r1, #128	@ 0x80
 800226a:	480c      	ldr	r0, [pc, #48]	@ (800229c <SWD_ReadReg+0x1bc>)
 800226c:	f000 fdf4 	bl	8002e58 <HAL_GPIO_ReadPin>
 8002270:	4603      	mov	r3, r0
 8002272:	743b      	strb	r3, [r7, #16]
    if (parity != parity_bit) { idle_cycles(8); return SWD_ERROR_PARITY; }
 8002274:	7efa      	ldrb	r2, [r7, #27]
 8002276:	7c3b      	ldrb	r3, [r7, #16]
 8002278:	429a      	cmp	r2, r3
 800227a:	d004      	beq.n	8002286 <SWD_ReadReg+0x1a6>
 800227c:	2008      	movs	r0, #8
 800227e:	f7ff fe35 	bl	8001eec <idle_cycles>
 8002282:	2304      	movs	r3, #4
 8002284:	e006      	b.n	8002294 <SWD_ReadReg+0x1b4>

    *data = val;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	601a      	str	r2, [r3, #0]
    idle_cycles(8);
 800228c:	2008      	movs	r0, #8
 800228e:	f7ff fe2d 	bl	8001eec <idle_cycles>
    return SWD_ERROR_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3728      	adds	r7, #40	@ 0x28
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40020400 	.word	0x40020400

080022a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	e00a      	b.n	80022c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022b2:	f3af 8000 	nop.w
 80022b6:	4601      	mov	r1, r0
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	60ba      	str	r2, [r7, #8]
 80022be:	b2ca      	uxtb	r2, r1
 80022c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	3301      	adds	r3, #1
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	dbf0      	blt.n	80022b2 <_read+0x12>
  }

  return len;
 80022d0:	687b      	ldr	r3, [r7, #4]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	e009      	b.n	8002300 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	60ba      	str	r2, [r7, #8]
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	3301      	adds	r3, #1
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	429a      	cmp	r2, r3
 8002306:	dbf1      	blt.n	80022ec <_write+0x12>
  }
  return len;
 8002308:	687b      	ldr	r3, [r7, #4]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <_close>:

int _close(int file)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800231a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800233a:	605a      	str	r2, [r3, #4]
  return 0;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <_isatty>:

int _isatty(int file)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002352:	2301      	movs	r3, #1
}
 8002354:	4618      	mov	r0, r3
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002384:	4a14      	ldr	r2, [pc, #80]	@ (80023d8 <_sbrk+0x5c>)
 8002386:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <_sbrk+0x60>)
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002390:	4b13      	ldr	r3, [pc, #76]	@ (80023e0 <_sbrk+0x64>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002398:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <_sbrk+0x64>)
 800239a:	4a12      	ldr	r2, [pc, #72]	@ (80023e4 <_sbrk+0x68>)
 800239c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800239e:	4b10      	ldr	r3, [pc, #64]	@ (80023e0 <_sbrk+0x64>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d207      	bcs.n	80023bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023ac:	f005 fe9a 	bl	80080e4 <__errno>
 80023b0:	4603      	mov	r3, r0
 80023b2:	220c      	movs	r2, #12
 80023b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ba:	e009      	b.n	80023d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023bc:	4b08      	ldr	r3, [pc, #32]	@ (80023e0 <_sbrk+0x64>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023c2:	4b07      	ldr	r3, [pc, #28]	@ (80023e0 <_sbrk+0x64>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	4a05      	ldr	r2, [pc, #20]	@ (80023e0 <_sbrk+0x64>)
 80023cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ce:	68fb      	ldr	r3, [r7, #12]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20030000 	.word	0x20030000
 80023dc:	00000400 	.word	0x00000400
 80023e0:	20000768 	.word	0x20000768
 80023e4:	200008c0 	.word	0x200008c0

080023e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023ec:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <SystemInit+0x20>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f2:	4a05      	ldr	r2, [pc, #20]	@ (8002408 <SystemInit+0x20>)
 80023f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800240c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002444 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002410:	f7ff ffea 	bl	80023e8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002414:	480c      	ldr	r0, [pc, #48]	@ (8002448 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002416:	490d      	ldr	r1, [pc, #52]	@ (800244c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002418:	4a0d      	ldr	r2, [pc, #52]	@ (8002450 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800241c:	e002      	b.n	8002424 <LoopCopyDataInit>

0800241e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800241e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002422:	3304      	adds	r3, #4

08002424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002428:	d3f9      	bcc.n	800241e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242a:	4a0a      	ldr	r2, [pc, #40]	@ (8002454 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800242c:	4c0a      	ldr	r4, [pc, #40]	@ (8002458 <LoopFillZerobss+0x22>)
  movs r3, #0
 800242e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002430:	e001      	b.n	8002436 <LoopFillZerobss>

08002432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002434:	3204      	adds	r2, #4

08002436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002438:	d3fb      	bcc.n	8002432 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800243a:	f005 fe59 	bl	80080f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800243e:	f7fe f8bd 	bl	80005bc <main>
  bx  lr    
 8002442:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002444:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800244c:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8002450:	08008d04 	.word	0x08008d04
  ldr r2, =_sbss
 8002454:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8002458:	200008bc 	.word	0x200008bc

0800245c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800245c:	e7fe      	b.n	800245c <ADC_IRQHandler>
	...

08002460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002464:	4b0e      	ldr	r3, [pc, #56]	@ (80024a0 <HAL_Init+0x40>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0d      	ldr	r2, [pc, #52]	@ (80024a0 <HAL_Init+0x40>)
 800246a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800246e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002470:	4b0b      	ldr	r3, [pc, #44]	@ (80024a0 <HAL_Init+0x40>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a0a      	ldr	r2, [pc, #40]	@ (80024a0 <HAL_Init+0x40>)
 8002476:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800247a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800247c:	4b08      	ldr	r3, [pc, #32]	@ (80024a0 <HAL_Init+0x40>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a07      	ldr	r2, [pc, #28]	@ (80024a0 <HAL_Init+0x40>)
 8002482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002486:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002488:	2003      	movs	r0, #3
 800248a:	f000 f8fc 	bl	8002686 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800248e:	200f      	movs	r0, #15
 8002490:	f7ff f862 	bl	8001558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002494:	f7fe fca8 	bl	8000de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023c00 	.word	0x40023c00

080024a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024a8:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <HAL_IncTick+0x20>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b06      	ldr	r3, [pc, #24]	@ (80024c8 <HAL_IncTick+0x24>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4413      	add	r3, r2
 80024b4:	4a04      	ldr	r2, [pc, #16]	@ (80024c8 <HAL_IncTick+0x24>)
 80024b6:	6013      	str	r3, [r2, #0]
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	20000060 	.word	0x20000060
 80024c8:	2000076c 	.word	0x2000076c

080024cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return uwTick;
 80024d0:	4b03      	ldr	r3, [pc, #12]	@ (80024e0 <HAL_GetTick+0x14>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	2000076c 	.word	0x2000076c

080024e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024ec:	f7ff ffee 	bl	80024cc <HAL_GetTick>
 80024f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d005      	beq.n	800250a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <HAL_Delay+0x44>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4413      	add	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800250a:	bf00      	nop
 800250c:	f7ff ffde 	bl	80024cc <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	429a      	cmp	r2, r3
 800251a:	d8f7      	bhi.n	800250c <HAL_Delay+0x28>
  {
  }
}
 800251c:	bf00      	nop
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000060 	.word	0x20000060

0800252c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800253c:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <__NVIC_SetPriorityGrouping+0x44>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002548:	4013      	ands	r3, r2
 800254a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002554:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800255c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255e:	4a04      	ldr	r2, [pc, #16]	@ (8002570 <__NVIC_SetPriorityGrouping+0x44>)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	60d3      	str	r3, [r2, #12]
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002578:	4b04      	ldr	r3, [pc, #16]	@ (800258c <__NVIC_GetPriorityGrouping+0x18>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	f003 0307 	and.w	r3, r3, #7
}
 8002582:	4618      	mov	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	db0b      	blt.n	80025ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	f003 021f 	and.w	r2, r3, #31
 80025a8:	4907      	ldr	r1, [pc, #28]	@ (80025c8 <__NVIC_EnableIRQ+0x38>)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	2001      	movs	r0, #1
 80025b2:	fa00 f202 	lsl.w	r2, r0, r2
 80025b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000e100 	.word	0xe000e100

080025cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	6039      	str	r1, [r7, #0]
 80025d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	db0a      	blt.n	80025f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	490c      	ldr	r1, [pc, #48]	@ (8002618 <__NVIC_SetPriority+0x4c>)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	0112      	lsls	r2, r2, #4
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	440b      	add	r3, r1
 80025f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f4:	e00a      	b.n	800260c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4908      	ldr	r1, [pc, #32]	@ (800261c <__NVIC_SetPriority+0x50>)
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	3b04      	subs	r3, #4
 8002604:	0112      	lsls	r2, r2, #4
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	440b      	add	r3, r1
 800260a:	761a      	strb	r2, [r3, #24]
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000e100 	.word	0xe000e100
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002620:	b480      	push	{r7}
 8002622:	b089      	sub	sp, #36	@ 0x24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f1c3 0307 	rsb	r3, r3, #7
 800263a:	2b04      	cmp	r3, #4
 800263c:	bf28      	it	cs
 800263e:	2304      	movcs	r3, #4
 8002640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3304      	adds	r3, #4
 8002646:	2b06      	cmp	r3, #6
 8002648:	d902      	bls.n	8002650 <NVIC_EncodePriority+0x30>
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3b03      	subs	r3, #3
 800264e:	e000      	b.n	8002652 <NVIC_EncodePriority+0x32>
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	f04f 32ff 	mov.w	r2, #4294967295
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43da      	mvns	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	401a      	ands	r2, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002668:	f04f 31ff 	mov.w	r1, #4294967295
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	43d9      	mvns	r1, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	4313      	orrs	r3, r2
         );
}
 800267a:	4618      	mov	r0, r3
 800267c:	3724      	adds	r7, #36	@ 0x24
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff ff4c 	bl	800252c <__NVIC_SetPriorityGrouping>
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026ae:	f7ff ff61 	bl	8002574 <__NVIC_GetPriorityGrouping>
 80026b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	6978      	ldr	r0, [r7, #20]
 80026ba:	f7ff ffb1 	bl	8002620 <NVIC_EncodePriority>
 80026be:	4602      	mov	r2, r0
 80026c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ff80 	bl	80025cc <__NVIC_SetPriority>
}
 80026cc:	bf00      	nop
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff ff54 	bl	8002590 <__NVIC_EnableIRQ>
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e00e      	b.n	8002720 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	795b      	ldrb	r3, [r3, #5]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d105      	bne.n	8002718 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe fb90 	bl	8000e38 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e03b      	b.n	80027b2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d106      	bne.n	8002754 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7fe fb94 	bl	8000e7c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002778:	f023 0107 	bic.w	r1, r3, #7
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002792:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68d1      	ldr	r1, [r2, #12]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	430b      	orrs	r3, r1
 80027a0:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d026      	beq.n	800282a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d021      	beq.n	800282a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027f4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027fa:	f043 0201 	orr.w	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2201      	movs	r2, #1
 8002808:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2204      	movs	r2, #4
 800280e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f003 0320 	and.w	r3, r3, #32
 8002830:	2b00      	cmp	r3, #0
 8002832:	d026      	beq.n	8002882 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d021      	beq.n	8002882 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800284c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2220      	movs	r2, #32
 8002854:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800285a:	f043 0202 	orr.w	r2, r3, #2
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2204      	movs	r2, #4
 8002866:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	d026      	beq.n	80028da <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002892:	2b00      	cmp	r3, #0
 8002894:	d021      	beq.n	80028da <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028a4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2208      	movs	r2, #8
 80028ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b2:	f043 0204 	orr.w	r2, r3, #4
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2204      	movs	r2, #4
 80028be:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00e      	beq.n	800290c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028fc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2204      	movs	r2, #4
 8002904:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f853 	bl	80029b2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d024      	beq.n	8002960 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800291c:	2b00      	cmp	r3, #0
 800291e:	d01f      	beq.n	8002960 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800292e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2202      	movs	r2, #2
 8002936:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b00      	cmp	r3, #0
 8002968:	d01f      	beq.n	80029aa <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01a      	beq.n	80029aa <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002982:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2210      	movs	r2, #16
 800298a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f80e 	bl	80029c6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_DMA2D_ConfigLayer+0x20>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e079      	b.n	8002af0 <HAL_DMA2D_ConfigLayer+0x114>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	3318      	adds	r3, #24
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	041b      	lsls	r3, r3, #16
 8002a22:	4313      	orrs	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002a26:	4b35      	ldr	r3, [pc, #212]	@ (8002afc <HAL_DMA2D_ConfigLayer+0x120>)
 8002a28:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b0a      	cmp	r3, #10
 8002a30:	d003      	beq.n	8002a3a <HAL_DMA2D_ConfigLayer+0x5e>
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b09      	cmp	r3, #9
 8002a38:	d107      	bne.n	8002a4a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	e005      	b.n	8002a56 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	061b      	lsls	r3, r3, #24
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d120      	bne.n	8002a9e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	ea02 0103 	and.w	r1, r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b0a      	cmp	r3, #10
 8002a84:	d003      	beq.n	8002a8e <HAL_DMA2D_ConfigLayer+0xb2>
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b09      	cmp	r3, #9
 8002a8c:	d127      	bne.n	8002ade <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002a9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a9c:	e01f      	b.n	8002ade <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	69da      	ldr	r2, [r3, #28]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	ea02 0103 	and.w	r1, r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b0a      	cmp	r3, #10
 8002ac6:	d003      	beq.n	8002ad0 <HAL_DMA2D_ConfigLayer+0xf4>
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b09      	cmp	r3, #9
 8002ace:	d106      	bne.n	8002ade <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002adc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	371c      	adds	r7, #28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	ff03000f 	.word	0xff03000f

08002b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b089      	sub	sp, #36	@ 0x24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	e177      	b.n	8002e0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	f040 8166 	bne.w	8002e06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d005      	beq.n	8002b52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d130      	bne.n	8002bb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b88:	2201      	movs	r2, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 0201 	and.w	r2, r3, #1
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d017      	beq.n	8002bf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	2203      	movs	r2, #3
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d123      	bne.n	8002c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	08da      	lsrs	r2, r3, #3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3208      	adds	r2, #8
 8002c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	220f      	movs	r2, #15
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	08da      	lsrs	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3208      	adds	r2, #8
 8002c3e:	69b9      	ldr	r1, [r7, #24]
 8002c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	2203      	movs	r2, #3
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0203 	and.w	r2, r3, #3
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80c0 	beq.w	8002e06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	4b66      	ldr	r3, [pc, #408]	@ (8002e24 <HAL_GPIO_Init+0x324>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8e:	4a65      	ldr	r2, [pc, #404]	@ (8002e24 <HAL_GPIO_Init+0x324>)
 8002c90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c96:	4b63      	ldr	r3, [pc, #396]	@ (8002e24 <HAL_GPIO_Init+0x324>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ca2:	4a61      	ldr	r2, [pc, #388]	@ (8002e28 <HAL_GPIO_Init+0x328>)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	3302      	adds	r3, #2
 8002caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	220f      	movs	r2, #15
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a58      	ldr	r2, [pc, #352]	@ (8002e2c <HAL_GPIO_Init+0x32c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d037      	beq.n	8002d3e <HAL_GPIO_Init+0x23e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a57      	ldr	r2, [pc, #348]	@ (8002e30 <HAL_GPIO_Init+0x330>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d031      	beq.n	8002d3a <HAL_GPIO_Init+0x23a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a56      	ldr	r2, [pc, #344]	@ (8002e34 <HAL_GPIO_Init+0x334>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d02b      	beq.n	8002d36 <HAL_GPIO_Init+0x236>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a55      	ldr	r2, [pc, #340]	@ (8002e38 <HAL_GPIO_Init+0x338>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d025      	beq.n	8002d32 <HAL_GPIO_Init+0x232>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a54      	ldr	r2, [pc, #336]	@ (8002e3c <HAL_GPIO_Init+0x33c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d01f      	beq.n	8002d2e <HAL_GPIO_Init+0x22e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a53      	ldr	r2, [pc, #332]	@ (8002e40 <HAL_GPIO_Init+0x340>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d019      	beq.n	8002d2a <HAL_GPIO_Init+0x22a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a52      	ldr	r2, [pc, #328]	@ (8002e44 <HAL_GPIO_Init+0x344>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <HAL_GPIO_Init+0x226>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a51      	ldr	r2, [pc, #324]	@ (8002e48 <HAL_GPIO_Init+0x348>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00d      	beq.n	8002d22 <HAL_GPIO_Init+0x222>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a50      	ldr	r2, [pc, #320]	@ (8002e4c <HAL_GPIO_Init+0x34c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d007      	beq.n	8002d1e <HAL_GPIO_Init+0x21e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a4f      	ldr	r2, [pc, #316]	@ (8002e50 <HAL_GPIO_Init+0x350>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d101      	bne.n	8002d1a <HAL_GPIO_Init+0x21a>
 8002d16:	2309      	movs	r3, #9
 8002d18:	e012      	b.n	8002d40 <HAL_GPIO_Init+0x240>
 8002d1a:	230a      	movs	r3, #10
 8002d1c:	e010      	b.n	8002d40 <HAL_GPIO_Init+0x240>
 8002d1e:	2308      	movs	r3, #8
 8002d20:	e00e      	b.n	8002d40 <HAL_GPIO_Init+0x240>
 8002d22:	2307      	movs	r3, #7
 8002d24:	e00c      	b.n	8002d40 <HAL_GPIO_Init+0x240>
 8002d26:	2306      	movs	r3, #6
 8002d28:	e00a      	b.n	8002d40 <HAL_GPIO_Init+0x240>
 8002d2a:	2305      	movs	r3, #5
 8002d2c:	e008      	b.n	8002d40 <HAL_GPIO_Init+0x240>
 8002d2e:	2304      	movs	r3, #4
 8002d30:	e006      	b.n	8002d40 <HAL_GPIO_Init+0x240>
 8002d32:	2303      	movs	r3, #3
 8002d34:	e004      	b.n	8002d40 <HAL_GPIO_Init+0x240>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e002      	b.n	8002d40 <HAL_GPIO_Init+0x240>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <HAL_GPIO_Init+0x240>
 8002d3e:	2300      	movs	r3, #0
 8002d40:	69fa      	ldr	r2, [r7, #28]
 8002d42:	f002 0203 	and.w	r2, r2, #3
 8002d46:	0092      	lsls	r2, r2, #2
 8002d48:	4093      	lsls	r3, r2
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d50:	4935      	ldr	r1, [pc, #212]	@ (8002e28 <HAL_GPIO_Init+0x328>)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	089b      	lsrs	r3, r3, #2
 8002d56:	3302      	adds	r3, #2
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e54 <HAL_GPIO_Init+0x354>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d82:	4a34      	ldr	r2, [pc, #208]	@ (8002e54 <HAL_GPIO_Init+0x354>)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d88:	4b32      	ldr	r3, [pc, #200]	@ (8002e54 <HAL_GPIO_Init+0x354>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dac:	4a29      	ldr	r2, [pc, #164]	@ (8002e54 <HAL_GPIO_Init+0x354>)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002db2:	4b28      	ldr	r3, [pc, #160]	@ (8002e54 <HAL_GPIO_Init+0x354>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dd6:	4a1f      	ldr	r2, [pc, #124]	@ (8002e54 <HAL_GPIO_Init+0x354>)
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8002e54 <HAL_GPIO_Init+0x354>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e00:	4a14      	ldr	r2, [pc, #80]	@ (8002e54 <HAL_GPIO_Init+0x354>)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	61fb      	str	r3, [r7, #28]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	2b0f      	cmp	r3, #15
 8002e10:	f67f ae84 	bls.w	8002b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop
 8002e18:	3724      	adds	r7, #36	@ 0x24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800
 8002e28:	40013800 	.word	0x40013800
 8002e2c:	40020000 	.word	0x40020000
 8002e30:	40020400 	.word	0x40020400
 8002e34:	40020800 	.word	0x40020800
 8002e38:	40020c00 	.word	0x40020c00
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40021400 	.word	0x40021400
 8002e44:	40021800 	.word	0x40021800
 8002e48:	40021c00 	.word	0x40021c00
 8002e4c:	40022000 	.word	0x40022000
 8002e50:	40022400 	.word	0x40022400
 8002e54:	40013c00 	.word	0x40013c00

08002e58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	887b      	ldrh	r3, [r7, #2]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
 8002e74:	e001      	b.n	8002e7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e76:	2300      	movs	r3, #0
 8002e78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	807b      	strh	r3, [r7, #2]
 8002e94:	4613      	mov	r3, r2
 8002e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e98:	787b      	ldrb	r3, [r7, #1]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e9e:	887a      	ldrh	r2, [r7, #2]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ea4:	e003      	b.n	8002eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ea6:	887b      	ldrh	r3, [r7, #2]
 8002ea8:	041a      	lsls	r2, r3, #16
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	619a      	str	r2, [r3, #24]
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af02      	add	r7, sp, #8
 8002ec0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e059      	b.n	8002f80 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fe fa3c 	bl	8001364 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2203      	movs	r2, #3
 8002ef0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002efa:	d102      	bne.n	8002f02 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f004 fada 	bl	80074c0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	7c1a      	ldrb	r2, [r3, #16]
 8002f14:	f88d 2000 	strb.w	r2, [sp]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f1c:	f004 fa6c 	bl	80073f8 <USB_CoreInit>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d005      	beq.n	8002f32 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2202      	movs	r2, #2
 8002f2a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e026      	b.n	8002f80 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2101      	movs	r1, #1
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f004 fad2 	bl	80074e2 <USB_SetCurrentMode>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e017      	b.n	8002f80 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	7c1a      	ldrb	r2, [r3, #16]
 8002f58:	f88d 2000 	strb.w	r2, [sp]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f60:	f004 fc36 	bl	80077d0 <USB_HostInit>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e004      	b.n	8002f80 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f004 fbd7 	bl	8007752 <USB_GetMode>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	f040 80fb 	bne.w	80031a2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f004 fb9a 	bl	80076ea <USB_ReadInterrupts>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80f1 	beq.w	80031a0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f004 fb91 	bl	80076ea <USB_ReadInterrupts>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fd2:	d104      	bne.n	8002fde <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002fdc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f004 fb81 	bl	80076ea <USB_ReadInterrupts>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ff2:	d104      	bne.n	8002ffe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ffc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f004 fb71 	bl	80076ea <USB_ReadInterrupts>
 8003008:	4603      	mov	r3, r0
 800300a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800300e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003012:	d104      	bne.n	800301e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800301c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f004 fb61 	bl	80076ea <USB_ReadInterrupts>
 8003028:	4603      	mov	r3, r0
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b02      	cmp	r3, #2
 8003030:	d103      	bne.n	800303a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2202      	movs	r2, #2
 8003038:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f004 fb53 	bl	80076ea <USB_ReadInterrupts>
 8003044:	4603      	mov	r3, r0
 8003046:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800304a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800304e:	d120      	bne.n	8003092 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003058:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d113      	bne.n	8003092 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800306a:	2110      	movs	r1, #16
 800306c:	6938      	ldr	r0, [r7, #16]
 800306e:	f004 fa84 	bl	800757a <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003072:	6938      	ldr	r0, [r7, #16]
 8003074:	f004 fab3 	bl	80075de <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	7a5b      	ldrb	r3, [r3, #9]
 800307c:	2b02      	cmp	r3, #2
 800307e:	d105      	bne.n	800308c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2101      	movs	r1, #1
 8003086:	4618      	mov	r0, r3
 8003088:	f004 fc66 	bl	8007958 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f89f 	bl	80031d0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f004 fb27 	bl	80076ea <USB_ReadInterrupts>
 800309c:	4603      	mov	r3, r0
 800309e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030a6:	d102      	bne.n	80030ae <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f001 fcc4 	bl	8004a36 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f004 fb19 	bl	80076ea <USB_ReadInterrupts>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d106      	bne.n	80030d0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f870 	bl	80031a8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2208      	movs	r2, #8
 80030ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f004 fb08 	bl	80076ea <USB_ReadInterrupts>
 80030da:	4603      	mov	r3, r0
 80030dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030e4:	d139      	bne.n	800315a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f004 fc71 	bl	80079d2 <USB_HC_ReadInterrupt>
 80030f0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	e025      	b.n	8003144 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b00      	cmp	r3, #0
 800310a:	d018      	beq.n	800313e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4413      	add	r3, r2
 8003114:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800311e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003122:	d106      	bne.n	8003132 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	4619      	mov	r1, r3
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f87c 	bl	8003228 <HCD_HC_IN_IRQHandler>
 8003130:	e005      	b.n	800313e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	b2db      	uxtb	r3, r3
 8003136:	4619      	mov	r1, r3
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fede 	bl	8003efa <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	3301      	adds	r3, #1
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	795b      	ldrb	r3, [r3, #5]
 8003148:	461a      	mov	r2, r3
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	4293      	cmp	r3, r2
 800314e:	d3d3      	bcc.n	80030f8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003158:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f004 fac3 	bl	80076ea <USB_ReadInterrupts>
 8003164:	4603      	mov	r3, r0
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	2b10      	cmp	r3, #16
 800316c:	d101      	bne.n	8003172 <HAL_HCD_IRQHandler+0x1ea>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_HCD_IRQHandler+0x1ec>
 8003172:	2300      	movs	r3, #0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d014      	beq.n	80031a2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0210 	bic.w	r2, r2, #16
 8003186:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f001 fb75 	bl	8004878 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	699a      	ldr	r2, [r3, #24]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 0210 	orr.w	r2, r2, #16
 800319c:	619a      	str	r2, [r3, #24]
 800319e:	e000      	b.n	80031a2 <HAL_HCD_IRQHandler+0x21a>
      return;
 80031a0:	bf00      	nop
    }
  }
}
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	70fb      	strb	r3, [r7, #3]
 8003218:	4613      	mov	r3, r2
 800321a:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	4611      	mov	r1, r2
 8003246:	4618      	mov	r0, r3
 8003248:	f004 fa62 	bl	8007710 <USB_ReadChInterrupts>
 800324c:	4603      	mov	r3, r0
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b04      	cmp	r3, #4
 8003254:	d11a      	bne.n	800328c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4413      	add	r3, r2
 800325e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003262:	461a      	mov	r2, r3
 8003264:	2304      	movs	r3, #4
 8003266:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003268:	78fa      	ldrb	r2, [r7, #3]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	334d      	adds	r3, #77	@ 0x4d
 8003278:	2207      	movs	r2, #7
 800327a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	4611      	mov	r1, r2
 8003284:	4618      	mov	r0, r3
 8003286:	f004 fbb5 	bl	80079f4 <USB_HC_Halt>
 800328a:	e09e      	b.n	80033ca <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	4611      	mov	r1, r2
 8003294:	4618      	mov	r0, r3
 8003296:	f004 fa3b 	bl	8007710 <USB_ReadChInterrupts>
 800329a:	4603      	mov	r3, r0
 800329c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032a4:	d11b      	bne.n	80032de <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80032a6:	78fb      	ldrb	r3, [r7, #3]
 80032a8:	015a      	lsls	r2, r3, #5
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032b2:	461a      	mov	r2, r3
 80032b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	334d      	adds	r3, #77	@ 0x4d
 80032ca:	2208      	movs	r2, #8
 80032cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f004 fb8c 	bl	80079f4 <USB_HC_Halt>
 80032dc:	e075      	b.n	80033ca <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	78fa      	ldrb	r2, [r7, #3]
 80032e4:	4611      	mov	r1, r2
 80032e6:	4618      	mov	r0, r3
 80032e8:	f004 fa12 	bl	8007710 <USB_ReadChInterrupts>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d11a      	bne.n	800332c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003302:	461a      	mov	r2, r3
 8003304:	2308      	movs	r3, #8
 8003306:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003308:	78fa      	ldrb	r2, [r7, #3]
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	4613      	mov	r3, r2
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	1a9b      	subs	r3, r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	334d      	adds	r3, #77	@ 0x4d
 8003318:	2206      	movs	r2, #6
 800331a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f004 fb65 	bl	80079f4 <USB_HC_Halt>
 800332a:	e04e      	b.n	80033ca <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	78fa      	ldrb	r2, [r7, #3]
 8003332:	4611      	mov	r1, r2
 8003334:	4618      	mov	r0, r3
 8003336:	f004 f9eb 	bl	8007710 <USB_ReadChInterrupts>
 800333a:	4603      	mov	r3, r0
 800333c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003340:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003344:	d11b      	bne.n	800337e <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003346:	78fb      	ldrb	r3, [r7, #3]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003352:	461a      	mov	r2, r3
 8003354:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003358:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	1a9b      	subs	r3, r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	334d      	adds	r3, #77	@ 0x4d
 800336a:	2209      	movs	r2, #9
 800336c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	4611      	mov	r1, r2
 8003376:	4618      	mov	r0, r3
 8003378:	f004 fb3c 	bl	80079f4 <USB_HC_Halt>
 800337c:	e025      	b.n	80033ca <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	4611      	mov	r1, r2
 8003386:	4618      	mov	r0, r3
 8003388:	f004 f9c2 	bl	8007710 <USB_ReadChInterrupts>
 800338c:	4603      	mov	r3, r0
 800338e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003392:	2b80      	cmp	r3, #128	@ 0x80
 8003394:	d119      	bne.n	80033ca <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003396:	78fb      	ldrb	r3, [r7, #3]
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4413      	add	r3, r2
 800339e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033a2:	461a      	mov	r2, r3
 80033a4:	2380      	movs	r3, #128	@ 0x80
 80033a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	334d      	adds	r3, #77	@ 0x4d
 80033b8:	2207      	movs	r2, #7
 80033ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	78fa      	ldrb	r2, [r7, #3]
 80033c2:	4611      	mov	r1, r2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f004 fb15 	bl	80079f4 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	4611      	mov	r1, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f004 f99c 	bl	8007710 <USB_ReadChInterrupts>
 80033d8:	4603      	mov	r3, r0
 80033da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033e2:	d112      	bne.n	800340a <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f004 fb01 	bl	80079f4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033fe:	461a      	mov	r2, r3
 8003400:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003404:	6093      	str	r3, [r2, #8]
 8003406:	f000 bd75 	b.w	8003ef4 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	78fa      	ldrb	r2, [r7, #3]
 8003410:	4611      	mov	r1, r2
 8003412:	4618      	mov	r0, r3
 8003414:	f004 f97c 	bl	8007710 <USB_ReadChInterrupts>
 8003418:	4603      	mov	r3, r0
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b01      	cmp	r3, #1
 8003420:	f040 8128 	bne.w	8003674 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003424:	78fb      	ldrb	r3, [r7, #3]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	4413      	add	r3, r2
 800342c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003430:	461a      	mov	r2, r3
 8003432:	2320      	movs	r3, #32
 8003434:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	331b      	adds	r3, #27
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d119      	bne.n	8003480 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	331b      	adds	r3, #27
 800345c:	2200      	movs	r2, #0
 800345e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4413      	add	r3, r2
 8003468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	0151      	lsls	r1, r2, #5
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	440a      	add	r2, r1
 8003476:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800347a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800347e:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	799b      	ldrb	r3, [r3, #6]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d01b      	beq.n	80034c0 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	3330      	adds	r3, #48	@ 0x30
 8003498:	6819      	ldr	r1, [r3, #0]
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	1ac9      	subs	r1, r1, r3
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4403      	add	r3, r0
 80034bc:	3338      	adds	r3, #56	@ 0x38
 80034be:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	334d      	adds	r3, #77	@ 0x4d
 80034d0:	2201      	movs	r2, #1
 80034d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	3344      	adds	r3, #68	@ 0x44
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034f4:	461a      	mov	r2, r3
 80034f6:	2301      	movs	r3, #1
 80034f8:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034fa:	78fa      	ldrb	r2, [r7, #3]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	3326      	adds	r3, #38	@ 0x26
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	3326      	adds	r3, #38	@ 0x26
 8003520:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003522:	2b02      	cmp	r3, #2
 8003524:	d110      	bne.n	8003548 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	78fa      	ldrb	r2, [r7, #3]
 800352c:	4611      	mov	r1, r2
 800352e:	4618      	mov	r0, r3
 8003530:	f004 fa60 	bl	80079f4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4413      	add	r3, r2
 800353c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003540:	461a      	mov	r2, r3
 8003542:	2310      	movs	r3, #16
 8003544:	6093      	str	r3, [r2, #8]
 8003546:	e03d      	b.n	80035c4 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	3326      	adds	r3, #38	@ 0x26
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b03      	cmp	r3, #3
 800355c:	d00a      	beq.n	8003574 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	3326      	adds	r3, #38	@ 0x26
 800356e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003570:	2b01      	cmp	r3, #1
 8003572:	d127      	bne.n	80035c4 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003574:	78fb      	ldrb	r3, [r7, #3]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4413      	add	r3, r2
 800357c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	78fa      	ldrb	r2, [r7, #3]
 8003584:	0151      	lsls	r1, r2, #5
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	440a      	add	r2, r1
 800358a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800358e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003592:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003594:	78fa      	ldrb	r2, [r7, #3]
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	1a9b      	subs	r3, r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	334c      	adds	r3, #76	@ 0x4c
 80035a4:	2201      	movs	r2, #1
 80035a6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80035a8:	78fa      	ldrb	r2, [r7, #3]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	334c      	adds	r3, #76	@ 0x4c
 80035b8:	781a      	ldrb	r2, [r3, #0]
 80035ba:	78fb      	ldrb	r3, [r7, #3]
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff fe24 	bl	800320c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	799b      	ldrb	r3, [r3, #6]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d13b      	bne.n	8003644 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	3338      	adds	r3, #56	@ 0x38
 80035dc:	6819      	ldr	r1, [r3, #0]
 80035de:	78fa      	ldrb	r2, [r7, #3]
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4403      	add	r3, r0
 80035ec:	3328      	adds	r3, #40	@ 0x28
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	440b      	add	r3, r1
 80035f2:	1e59      	subs	r1, r3, #1
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4403      	add	r3, r0
 8003602:	3328      	adds	r3, #40	@ 0x28
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	fbb1 f3f3 	udiv	r3, r1, r3
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 8470 	beq.w	8003ef4 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003614:	78fa      	ldrb	r2, [r7, #3]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	1a9b      	subs	r3, r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	333c      	adds	r3, #60	@ 0x3c
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	78fa      	ldrb	r2, [r7, #3]
 8003628:	f083 0301 	eor.w	r3, r3, #1
 800362c:	b2d8      	uxtb	r0, r3
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	333c      	adds	r3, #60	@ 0x3c
 800363c:	4602      	mov	r2, r0
 800363e:	701a      	strb	r2, [r3, #0]
 8003640:	f000 bc58 	b.w	8003ef4 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003644:	78fa      	ldrb	r2, [r7, #3]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	333c      	adds	r3, #60	@ 0x3c
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	78fa      	ldrb	r2, [r7, #3]
 8003658:	f083 0301 	eor.w	r3, r3, #1
 800365c:	b2d8      	uxtb	r0, r3
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	333c      	adds	r3, #60	@ 0x3c
 800366c:	4602      	mov	r2, r0
 800366e:	701a      	strb	r2, [r3, #0]
 8003670:	f000 bc40 	b.w	8003ef4 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	4611      	mov	r1, r2
 800367c:	4618      	mov	r0, r3
 800367e:	f004 f847 	bl	8007710 <USB_ReadChInterrupts>
 8003682:	4603      	mov	r3, r0
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b20      	cmp	r3, #32
 800368a:	d131      	bne.n	80036f0 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	4413      	add	r3, r2
 8003694:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003698:	461a      	mov	r2, r3
 800369a:	2320      	movs	r3, #32
 800369c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800369e:	78fa      	ldrb	r2, [r7, #3]
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	1a9b      	subs	r3, r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	331a      	adds	r3, #26
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	f040 841f 	bne.w	8003ef4 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	331b      	adds	r3, #27
 80036c6:	2201      	movs	r2, #1
 80036c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	334d      	adds	r3, #77	@ 0x4d
 80036da:	2203      	movs	r2, #3
 80036dc:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	78fa      	ldrb	r2, [r7, #3]
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f004 f984 	bl	80079f4 <USB_HC_Halt>
 80036ec:	f000 bc02 	b.w	8003ef4 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	78fa      	ldrb	r2, [r7, #3]
 80036f6:	4611      	mov	r1, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f004 f809 	bl	8007710 <USB_ReadChInterrupts>
 80036fe:	4603      	mov	r3, r0
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b02      	cmp	r3, #2
 8003706:	f040 8305 	bne.w	8003d14 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	4413      	add	r3, r2
 8003712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003716:	461a      	mov	r2, r3
 8003718:	2302      	movs	r3, #2
 800371a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	334d      	adds	r3, #77	@ 0x4d
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d114      	bne.n	800375c <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	334d      	adds	r3, #77	@ 0x4d
 8003742:	2202      	movs	r2, #2
 8003744:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	440b      	add	r3, r1
 8003754:	334c      	adds	r3, #76	@ 0x4c
 8003756:	2201      	movs	r2, #1
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	e2cc      	b.n	8003cf6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800375c:	78fa      	ldrb	r2, [r7, #3]
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	4613      	mov	r3, r2
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	334d      	adds	r3, #77	@ 0x4d
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b06      	cmp	r3, #6
 8003770:	d114      	bne.n	800379c <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003772:	78fa      	ldrb	r2, [r7, #3]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	1a9b      	subs	r3, r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	334d      	adds	r3, #77	@ 0x4d
 8003782:	2202      	movs	r2, #2
 8003784:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003786:	78fa      	ldrb	r2, [r7, #3]
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	334c      	adds	r3, #76	@ 0x4c
 8003796:	2205      	movs	r2, #5
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	e2ac      	b.n	8003cf6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800379c:	78fa      	ldrb	r2, [r7, #3]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	334d      	adds	r3, #77	@ 0x4d
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b07      	cmp	r3, #7
 80037b0:	d00b      	beq.n	80037ca <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80037b2:	78fa      	ldrb	r2, [r7, #3]
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	334d      	adds	r3, #77	@ 0x4d
 80037c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80037c4:	2b09      	cmp	r3, #9
 80037c6:	f040 80a6 	bne.w	8003916 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	334d      	adds	r3, #77	@ 0x4d
 80037da:	2202      	movs	r2, #2
 80037dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80037de:	78fa      	ldrb	r2, [r7, #3]
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	4613      	mov	r3, r2
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	1a9b      	subs	r3, r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	3344      	adds	r3, #68	@ 0x44
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	1c59      	adds	r1, r3, #1
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4403      	add	r3, r0
 80037fe:	3344      	adds	r3, #68	@ 0x44
 8003800:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	3344      	adds	r3, #68	@ 0x44
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b02      	cmp	r3, #2
 8003816:	d943      	bls.n	80038a0 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003818:	78fa      	ldrb	r2, [r7, #3]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	3344      	adds	r3, #68	@ 0x44
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800382c:	78fa      	ldrb	r2, [r7, #3]
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	331a      	adds	r3, #26
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d123      	bne.n	800388a <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003842:	78fa      	ldrb	r2, [r7, #3]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	331b      	adds	r3, #27
 8003852:	2200      	movs	r2, #0
 8003854:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003856:	78fa      	ldrb	r2, [r7, #3]
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	331c      	adds	r3, #28
 8003866:	2200      	movs	r2, #0
 8003868:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4413      	add	r3, r2
 8003872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	78fa      	ldrb	r2, [r7, #3]
 800387a:	0151      	lsls	r1, r2, #5
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	440a      	add	r2, r1
 8003880:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003884:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003888:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	334c      	adds	r3, #76	@ 0x4c
 800389a:	2204      	movs	r2, #4
 800389c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800389e:	e229      	b.n	8003cf4 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038a0:	78fa      	ldrb	r2, [r7, #3]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	334c      	adds	r3, #76	@ 0x4c
 80038b0:	2202      	movs	r2, #2
 80038b2:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038b4:	78fa      	ldrb	r2, [r7, #3]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	3326      	adds	r3, #38	@ 0x26
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00b      	beq.n	80038e2 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038ca:	78fa      	ldrb	r2, [r7, #3]
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	3326      	adds	r3, #38	@ 0x26
 80038da:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038dc:	2b02      	cmp	r3, #2
 80038de:	f040 8209 	bne.w	8003cf4 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80038f8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003900:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003902:	78fb      	ldrb	r3, [r7, #3]
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4413      	add	r3, r2
 800390a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800390e:	461a      	mov	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003914:	e1ee      	b.n	8003cf4 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003916:	78fa      	ldrb	r2, [r7, #3]
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	334d      	adds	r3, #77	@ 0x4d
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b05      	cmp	r3, #5
 800392a:	f040 80c8 	bne.w	8003abe <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	334d      	adds	r3, #77	@ 0x4d
 800393e:	2202      	movs	r2, #2
 8003940:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003942:	78fa      	ldrb	r2, [r7, #3]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	331b      	adds	r3, #27
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b01      	cmp	r3, #1
 8003956:	f040 81ce 	bne.w	8003cf6 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800395a:	78fa      	ldrb	r2, [r7, #3]
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	4613      	mov	r3, r2
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	1a9b      	subs	r3, r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	440b      	add	r3, r1
 8003968:	3326      	adds	r3, #38	@ 0x26
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b03      	cmp	r3, #3
 800396e:	d16b      	bne.n	8003a48 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003970:	78fa      	ldrb	r2, [r7, #3]
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	4613      	mov	r3, r2
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	3348      	adds	r3, #72	@ 0x48
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	1c59      	adds	r1, r3, #1
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4403      	add	r3, r0
 8003990:	3348      	adds	r3, #72	@ 0x48
 8003992:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	3348      	adds	r3, #72	@ 0x48
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d943      	bls.n	8003a32 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80039aa:	78fa      	ldrb	r2, [r7, #3]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	1a9b      	subs	r3, r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	3348      	adds	r3, #72	@ 0x48
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80039be:	78fa      	ldrb	r2, [r7, #3]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	1a9b      	subs	r3, r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	331b      	adds	r3, #27
 80039ce:	2200      	movs	r2, #0
 80039d0:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80039d2:	78fa      	ldrb	r2, [r7, #3]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	1a9b      	subs	r3, r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	3344      	adds	r3, #68	@ 0x44
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d809      	bhi.n	80039fc <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80039e8:	78fa      	ldrb	r2, [r7, #3]
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	4613      	mov	r3, r2
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	331c      	adds	r3, #28
 80039f8:	2201      	movs	r2, #1
 80039fa:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	0151      	lsls	r1, r2, #5
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	440a      	add	r2, r1
 8003a12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a1a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	334c      	adds	r3, #76	@ 0x4c
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	701a      	strb	r2, [r3, #0]
 8003a30:	e014      	b.n	8003a5c <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	334c      	adds	r3, #76	@ 0x4c
 8003a42:	2202      	movs	r2, #2
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	e009      	b.n	8003a5c <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	334c      	adds	r3, #76	@ 0x4c
 8003a58:	2202      	movs	r2, #2
 8003a5a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a5c:	78fa      	ldrb	r2, [r7, #3]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	3326      	adds	r3, #38	@ 0x26
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	3326      	adds	r3, #38	@ 0x26
 8003a82:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	f040 8136 	bne.w	8003cf6 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a8a:	78fb      	ldrb	r3, [r7, #3]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003aa0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003aa8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003aaa:	78fb      	ldrb	r3, [r7, #3]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	e11b      	b.n	8003cf6 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003abe:	78fa      	ldrb	r2, [r7, #3]
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	1a9b      	subs	r3, r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	334d      	adds	r3, #77	@ 0x4d
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	f040 8081 	bne.w	8003bd8 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	334d      	adds	r3, #77	@ 0x4d
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003aea:	78fa      	ldrb	r2, [r7, #3]
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	331b      	adds	r3, #27
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	f040 80fa 	bne.w	8003cf6 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b02:	78fa      	ldrb	r2, [r7, #3]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	1a9b      	subs	r3, r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	334c      	adds	r3, #76	@ 0x4c
 8003b12:	2202      	movs	r2, #2
 8003b14:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003b16:	78fb      	ldrb	r3, [r7, #3]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	78fa      	ldrb	r2, [r7, #3]
 8003b26:	0151      	lsls	r1, r2, #5
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	440a      	add	r2, r1
 8003b2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b34:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003b36:	78fb      	ldrb	r3, [r7, #3]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	78fa      	ldrb	r2, [r7, #3]
 8003b46:	0151      	lsls	r1, r2, #5
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	440a      	add	r2, r1
 8003b4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b54:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	78fa      	ldrb	r2, [r7, #3]
 8003b66:	0151      	lsls	r1, r2, #5
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	440a      	add	r2, r1
 8003b6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b70:	f023 0320 	bic.w	r3, r3, #32
 8003b74:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b76:	78fa      	ldrb	r2, [r7, #3]
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	1a9b      	subs	r3, r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	3326      	adds	r3, #38	@ 0x26
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00b      	beq.n	8003ba4 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003b8c:	78fa      	ldrb	r2, [r7, #3]
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	1a9b      	subs	r3, r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	3326      	adds	r3, #38	@ 0x26
 8003b9c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	f040 80a9 	bne.w	8003cf6 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003bba:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bc2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e08e      	b.n	8003cf6 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003bd8:	78fa      	ldrb	r2, [r7, #3]
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	1a9b      	subs	r3, r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	334d      	adds	r3, #77	@ 0x4d
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d143      	bne.n	8003c76 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bee:	78fa      	ldrb	r2, [r7, #3]
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	1a9b      	subs	r3, r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	334d      	adds	r3, #77	@ 0x4d
 8003bfe:	2202      	movs	r2, #2
 8003c00:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c02:	78fa      	ldrb	r2, [r7, #3]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	334c      	adds	r3, #76	@ 0x4c
 8003c12:	2202      	movs	r2, #2
 8003c14:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c16:	78fa      	ldrb	r2, [r7, #3]
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	3326      	adds	r3, #38	@ 0x26
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	3326      	adds	r3, #38	@ 0x26
 8003c3c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d159      	bne.n	8003cf6 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c42:	78fb      	ldrb	r3, [r7, #3]
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c58:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c60:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c62:	78fb      	ldrb	r3, [r7, #3]
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c6e:	461a      	mov	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	e03f      	b.n	8003cf6 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003c76:	78fa      	ldrb	r2, [r7, #3]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	334d      	adds	r3, #77	@ 0x4d
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d126      	bne.n	8003cda <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c8c:	78fa      	ldrb	r2, [r7, #3]
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	4613      	mov	r3, r2
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	1a9b      	subs	r3, r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	334d      	adds	r3, #77	@ 0x4d
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	3344      	adds	r3, #68	@ 0x44
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	1c59      	adds	r1, r3, #1
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	1a9b      	subs	r3, r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4403      	add	r3, r0
 8003cc0:	3344      	adds	r3, #68	@ 0x44
 8003cc2:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003cc4:	78fa      	ldrb	r2, [r7, #3]
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	1a9b      	subs	r3, r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	334c      	adds	r3, #76	@ 0x4c
 8003cd4:	2204      	movs	r2, #4
 8003cd6:	701a      	strb	r2, [r3, #0]
 8003cd8:	e00d      	b.n	8003cf6 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	334d      	adds	r3, #77	@ 0x4d
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	f000 8100 	beq.w	8003ef2 <HCD_HC_IN_IRQHandler+0xcca>
 8003cf2:	e000      	b.n	8003cf6 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003cf4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003cf6:	78fa      	ldrb	r2, [r7, #3]
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	1a9b      	subs	r3, r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	334c      	adds	r3, #76	@ 0x4c
 8003d06:	781a      	ldrb	r2, [r3, #0]
 8003d08:	78fb      	ldrb	r3, [r7, #3]
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff fa7d 	bl	800320c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d12:	e0ef      	b.n	8003ef4 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	78fa      	ldrb	r2, [r7, #3]
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f003 fcf7 	bl	8007710 <USB_ReadChInterrupts>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d28:	2b40      	cmp	r3, #64	@ 0x40
 8003d2a:	d12f      	bne.n	8003d8c <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003d2c:	78fb      	ldrb	r3, [r7, #3]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d38:	461a      	mov	r2, r3
 8003d3a:	2340      	movs	r3, #64	@ 0x40
 8003d3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003d3e:	78fa      	ldrb	r2, [r7, #3]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	1a9b      	subs	r3, r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	334d      	adds	r3, #77	@ 0x4d
 8003d4e:	2205      	movs	r2, #5
 8003d50:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	331a      	adds	r3, #26
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d109      	bne.n	8003d7c <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	3344      	adds	r3, #68	@ 0x44
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	78fa      	ldrb	r2, [r7, #3]
 8003d82:	4611      	mov	r1, r2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f003 fe35 	bl	80079f4 <USB_HC_Halt>
 8003d8a:	e0b3      	b.n	8003ef4 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	78fa      	ldrb	r2, [r7, #3]
 8003d92:	4611      	mov	r1, r2
 8003d94:	4618      	mov	r0, r3
 8003d96:	f003 fcbb 	bl	8007710 <USB_ReadChInterrupts>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	f003 0310 	and.w	r3, r3, #16
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	f040 80a7 	bne.w	8003ef4 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003da6:	78fa      	ldrb	r2, [r7, #3]
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	3326      	adds	r3, #38	@ 0x26
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d11b      	bne.n	8003df4 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003dbc:	78fa      	ldrb	r2, [r7, #3]
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	1a9b      	subs	r3, r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	3344      	adds	r3, #68	@ 0x44
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003dd0:	78fa      	ldrb	r2, [r7, #3]
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	1a9b      	subs	r3, r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	334d      	adds	r3, #77	@ 0x4d
 8003de0:	2204      	movs	r2, #4
 8003de2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	78fa      	ldrb	r2, [r7, #3]
 8003dea:	4611      	mov	r1, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f003 fe01 	bl	80079f4 <USB_HC_Halt>
 8003df2:	e03f      	b.n	8003e74 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	3326      	adds	r3, #38	@ 0x26
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e0a:	78fa      	ldrb	r2, [r7, #3]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	3326      	adds	r3, #38	@ 0x26
 8003e1a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d129      	bne.n	8003e74 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003e20:	78fa      	ldrb	r2, [r7, #3]
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	3344      	adds	r3, #68	@ 0x44
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	799b      	ldrb	r3, [r3, #6]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HCD_HC_IN_IRQHandler+0xc2a>
 8003e3c:	78fa      	ldrb	r2, [r7, #3]
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	331b      	adds	r3, #27
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d110      	bne.n	8003e74 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003e52:	78fa      	ldrb	r2, [r7, #3]
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	1a9b      	subs	r3, r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	334d      	adds	r3, #77	@ 0x4d
 8003e62:	2204      	movs	r2, #4
 8003e64:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	78fa      	ldrb	r2, [r7, #3]
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f003 fdc0 	bl	80079f4 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003e74:	78fa      	ldrb	r2, [r7, #3]
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	331b      	adds	r3, #27
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d129      	bne.n	8003ede <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003e8a:	78fa      	ldrb	r2, [r7, #3]
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	331b      	adds	r3, #27
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	78fa      	ldrb	r2, [r7, #3]
 8003eae:	0151      	lsls	r1, r2, #5
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	440a      	add	r2, r1
 8003eb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003eb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ebc:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003ebe:	78fb      	ldrb	r3, [r7, #3]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	78fa      	ldrb	r2, [r7, #3]
 8003ece:	0151      	lsls	r1, r2, #5
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	440a      	add	r2, r1
 8003ed4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ed8:	f043 0320 	orr.w	r3, r3, #32
 8003edc:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003ede:	78fb      	ldrb	r3, [r7, #3]
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eea:	461a      	mov	r2, r3
 8003eec:	2310      	movs	r3, #16
 8003eee:	6093      	str	r3, [r2, #8]
 8003ef0:	e000      	b.n	8003ef4 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003ef2:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b086      	sub	sp, #24
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	460b      	mov	r3, r1
 8003f04:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	78fa      	ldrb	r2, [r7, #3]
 8003f16:	4611      	mov	r1, r2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f003 fbf9 	bl	8007710 <USB_ReadChInterrupts>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d11b      	bne.n	8003f60 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f34:	461a      	mov	r2, r3
 8003f36:	2304      	movs	r3, #4
 8003f38:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003f3a:	78fa      	ldrb	r2, [r7, #3]
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	440b      	add	r3, r1
 8003f48:	334d      	adds	r3, #77	@ 0x4d
 8003f4a:	2207      	movs	r2, #7
 8003f4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	4611      	mov	r1, r2
 8003f56:	4618      	mov	r0, r3
 8003f58:	f003 fd4c 	bl	80079f4 <USB_HC_Halt>
 8003f5c:	f000 bc89 	b.w	8004872 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	78fa      	ldrb	r2, [r7, #3]
 8003f66:	4611      	mov	r1, r2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f003 fbd1 	bl	8007710 <USB_ReadChInterrupts>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f003 0320 	and.w	r3, r3, #32
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	f040 8082 	bne.w	800407e <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f86:	461a      	mov	r2, r3
 8003f88:	2320      	movs	r3, #32
 8003f8a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003f8c:	78fa      	ldrb	r2, [r7, #3]
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	3319      	adds	r3, #25
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d124      	bne.n	8003fec <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003fa2:	78fa      	ldrb	r2, [r7, #3]
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	1a9b      	subs	r3, r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	3319      	adds	r3, #25
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003fb6:	78fa      	ldrb	r2, [r7, #3]
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	334c      	adds	r3, #76	@ 0x4c
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003fca:	78fa      	ldrb	r2, [r7, #3]
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	1a9b      	subs	r3, r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	334d      	adds	r3, #77	@ 0x4d
 8003fda:	2203      	movs	r2, #3
 8003fdc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	78fa      	ldrb	r2, [r7, #3]
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f003 fd04 	bl	80079f4 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003fec:	78fa      	ldrb	r2, [r7, #3]
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	331a      	adds	r3, #26
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	f040 8437 	bne.w	8004872 <HCD_HC_OUT_IRQHandler+0x978>
 8004004:	78fa      	ldrb	r2, [r7, #3]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	331b      	adds	r3, #27
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f040 842b 	bne.w	8004872 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800401c:	78fa      	ldrb	r2, [r7, #3]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	3326      	adds	r3, #38	@ 0x26
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d009      	beq.n	8004046 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004032:	78fa      	ldrb	r2, [r7, #3]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	331b      	adds	r3, #27
 8004042:	2201      	movs	r2, #1
 8004044:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004046:	78fa      	ldrb	r2, [r7, #3]
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	440b      	add	r3, r1
 8004054:	334d      	adds	r3, #77	@ 0x4d
 8004056:	2203      	movs	r2, #3
 8004058:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	78fa      	ldrb	r2, [r7, #3]
 8004060:	4611      	mov	r1, r2
 8004062:	4618      	mov	r0, r3
 8004064:	f003 fcc6 	bl	80079f4 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004068:	78fa      	ldrb	r2, [r7, #3]
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	4613      	mov	r3, r2
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	3344      	adds	r3, #68	@ 0x44
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	e3f9      	b.n	8004872 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	78fa      	ldrb	r2, [r7, #3]
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f003 fb42 	bl	8007710 <USB_ReadChInterrupts>
 800408c:	4603      	mov	r3, r0
 800408e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004092:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004096:	d111      	bne.n	80040bc <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040a4:	461a      	mov	r2, r3
 80040a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040aa:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	78fa      	ldrb	r2, [r7, #3]
 80040b2:	4611      	mov	r1, r2
 80040b4:	4618      	mov	r0, r3
 80040b6:	f003 fc9d 	bl	80079f4 <USB_HC_Halt>
 80040ba:	e3da      	b.n	8004872 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	78fa      	ldrb	r2, [r7, #3]
 80040c2:	4611      	mov	r1, r2
 80040c4:	4618      	mov	r0, r3
 80040c6:	f003 fb23 	bl	8007710 <USB_ReadChInterrupts>
 80040ca:	4603      	mov	r3, r0
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d168      	bne.n	80041a6 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80040d4:	78fa      	ldrb	r2, [r7, #3]
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	4613      	mov	r3, r2
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	3344      	adds	r3, #68	@ 0x44
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	78fa      	ldrb	r2, [r7, #3]
 80040ee:	4611      	mov	r1, r2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f003 fb0d 	bl	8007710 <USB_ReadChInterrupts>
 80040f6:	4603      	mov	r3, r0
 80040f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040fc:	2b40      	cmp	r3, #64	@ 0x40
 80040fe:	d112      	bne.n	8004126 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004100:	78fa      	ldrb	r2, [r7, #3]
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	3319      	adds	r3, #25
 8004110:	2201      	movs	r2, #1
 8004112:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004114:	78fb      	ldrb	r3, [r7, #3]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	4413      	add	r3, r2
 800411c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004120:	461a      	mov	r2, r3
 8004122:	2340      	movs	r3, #64	@ 0x40
 8004124:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004126:	78fa      	ldrb	r2, [r7, #3]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	331b      	adds	r3, #27
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d019      	beq.n	8004170 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800413c:	78fa      	ldrb	r2, [r7, #3]
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	440b      	add	r3, r1
 800414a:	331b      	adds	r3, #27
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4413      	add	r3, r2
 8004158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	78fa      	ldrb	r2, [r7, #3]
 8004160:	0151      	lsls	r1, r2, #5
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	440a      	add	r2, r1
 8004166:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800416a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800416e:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4413      	add	r3, r2
 8004178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800417c:	461a      	mov	r2, r3
 800417e:	2301      	movs	r3, #1
 8004180:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004182:	78fa      	ldrb	r2, [r7, #3]
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	1a9b      	subs	r3, r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	334d      	adds	r3, #77	@ 0x4d
 8004192:	2201      	movs	r2, #1
 8004194:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	78fa      	ldrb	r2, [r7, #3]
 800419c:	4611      	mov	r1, r2
 800419e:	4618      	mov	r0, r3
 80041a0:	f003 fc28 	bl	80079f4 <USB_HC_Halt>
 80041a4:	e365      	b.n	8004872 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	78fa      	ldrb	r2, [r7, #3]
 80041ac:	4611      	mov	r1, r2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f003 faae 	bl	8007710 <USB_ReadChInterrupts>
 80041b4:	4603      	mov	r3, r0
 80041b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ba:	2b40      	cmp	r3, #64	@ 0x40
 80041bc:	d139      	bne.n	8004232 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80041be:	78fa      	ldrb	r2, [r7, #3]
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	1a9b      	subs	r3, r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	334d      	adds	r3, #77	@ 0x4d
 80041ce:	2205      	movs	r2, #5
 80041d0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80041d2:	78fa      	ldrb	r2, [r7, #3]
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	4613      	mov	r3, r2
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	1a9b      	subs	r3, r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	331a      	adds	r3, #26
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d109      	bne.n	80041fc <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80041e8:	78fa      	ldrb	r2, [r7, #3]
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	4613      	mov	r3, r2
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	1a9b      	subs	r3, r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	3319      	adds	r3, #25
 80041f8:	2201      	movs	r2, #1
 80041fa:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80041fc:	78fa      	ldrb	r2, [r7, #3]
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	1a9b      	subs	r3, r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	3344      	adds	r3, #68	@ 0x44
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	78fa      	ldrb	r2, [r7, #3]
 8004216:	4611      	mov	r1, r2
 8004218:	4618      	mov	r0, r3
 800421a:	f003 fbeb 	bl	80079f4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	4413      	add	r3, r2
 8004226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800422a:	461a      	mov	r2, r3
 800422c:	2340      	movs	r3, #64	@ 0x40
 800422e:	6093      	str	r3, [r2, #8]
 8004230:	e31f      	b.n	8004872 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	4611      	mov	r1, r2
 800423a:	4618      	mov	r0, r3
 800423c:	f003 fa68 	bl	8007710 <USB_ReadChInterrupts>
 8004240:	4603      	mov	r3, r0
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b08      	cmp	r3, #8
 8004248:	d11a      	bne.n	8004280 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	4413      	add	r3, r2
 8004252:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004256:	461a      	mov	r2, r3
 8004258:	2308      	movs	r3, #8
 800425a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800425c:	78fa      	ldrb	r2, [r7, #3]
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	4613      	mov	r3, r2
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	334d      	adds	r3, #77	@ 0x4d
 800426c:	2206      	movs	r2, #6
 800426e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	78fa      	ldrb	r2, [r7, #3]
 8004276:	4611      	mov	r1, r2
 8004278:	4618      	mov	r0, r3
 800427a:	f003 fbbb 	bl	80079f4 <USB_HC_Halt>
 800427e:	e2f8      	b.n	8004872 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	4611      	mov	r1, r2
 8004288:	4618      	mov	r0, r3
 800428a:	f003 fa41 	bl	8007710 <USB_ReadChInterrupts>
 800428e:	4603      	mov	r3, r0
 8004290:	f003 0310 	and.w	r3, r3, #16
 8004294:	2b10      	cmp	r3, #16
 8004296:	d144      	bne.n	8004322 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004298:	78fa      	ldrb	r2, [r7, #3]
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	4613      	mov	r3, r2
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	3344      	adds	r3, #68	@ 0x44
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80042ac:	78fa      	ldrb	r2, [r7, #3]
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	4613      	mov	r3, r2
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	1a9b      	subs	r3, r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	334d      	adds	r3, #77	@ 0x4d
 80042bc:	2204      	movs	r2, #4
 80042be:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80042c0:	78fa      	ldrb	r2, [r7, #3]
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	4613      	mov	r3, r2
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	1a9b      	subs	r3, r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	440b      	add	r3, r1
 80042ce:	3319      	adds	r3, #25
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d114      	bne.n	8004300 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80042d6:	78fa      	ldrb	r2, [r7, #3]
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	3318      	adds	r3, #24
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d109      	bne.n	8004300 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80042ec:	78fa      	ldrb	r2, [r7, #3]
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	3319      	adds	r3, #25
 80042fc:	2201      	movs	r2, #1
 80042fe:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	78fa      	ldrb	r2, [r7, #3]
 8004306:	4611      	mov	r1, r2
 8004308:	4618      	mov	r0, r3
 800430a:	f003 fb73 	bl	80079f4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800430e:	78fb      	ldrb	r3, [r7, #3]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	4413      	add	r3, r2
 8004316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800431a:	461a      	mov	r2, r3
 800431c:	2310      	movs	r3, #16
 800431e:	6093      	str	r3, [r2, #8]
 8004320:	e2a7      	b.n	8004872 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	78fa      	ldrb	r2, [r7, #3]
 8004328:	4611      	mov	r1, r2
 800432a:	4618      	mov	r0, r3
 800432c:	f003 f9f0 	bl	8007710 <USB_ReadChInterrupts>
 8004330:	4603      	mov	r3, r0
 8004332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004336:	2b80      	cmp	r3, #128	@ 0x80
 8004338:	f040 8083 	bne.w	8004442 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	799b      	ldrb	r3, [r3, #6]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d111      	bne.n	8004368 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004344:	78fa      	ldrb	r2, [r7, #3]
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	4613      	mov	r3, r2
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	334d      	adds	r3, #77	@ 0x4d
 8004354:	2207      	movs	r2, #7
 8004356:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	78fa      	ldrb	r2, [r7, #3]
 800435e:	4611      	mov	r1, r2
 8004360:	4618      	mov	r0, r3
 8004362:	f003 fb47 	bl	80079f4 <USB_HC_Halt>
 8004366:	e062      	b.n	800442e <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004368:	78fa      	ldrb	r2, [r7, #3]
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	4613      	mov	r3, r2
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	1a9b      	subs	r3, r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	3344      	adds	r3, #68	@ 0x44
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	1c59      	adds	r1, r3, #1
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4403      	add	r3, r0
 8004388:	3344      	adds	r3, #68	@ 0x44
 800438a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	1a9b      	subs	r3, r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	3344      	adds	r3, #68	@ 0x44
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d922      	bls.n	80043e8 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80043a2:	78fa      	ldrb	r2, [r7, #3]
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	3344      	adds	r3, #68	@ 0x44
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80043b6:	78fa      	ldrb	r2, [r7, #3]
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	334c      	adds	r3, #76	@ 0x4c
 80043c6:	2204      	movs	r2, #4
 80043c8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80043ca:	78fa      	ldrb	r2, [r7, #3]
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	1a9b      	subs	r3, r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	334c      	adds	r3, #76	@ 0x4c
 80043da:	781a      	ldrb	r2, [r3, #0]
 80043dc:	78fb      	ldrb	r3, [r7, #3]
 80043de:	4619      	mov	r1, r3
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7fe ff13 	bl	800320c <HAL_HCD_HC_NotifyURBChange_Callback>
 80043e6:	e022      	b.n	800442e <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043e8:	78fa      	ldrb	r2, [r7, #3]
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	334c      	adds	r3, #76	@ 0x4c
 80043f8:	2202      	movs	r2, #2
 80043fa:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	4413      	add	r3, r2
 8004404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004412:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800441a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4413      	add	r3, r2
 8004424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004428:	461a      	mov	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800442e:	78fb      	ldrb	r3, [r7, #3]
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	4413      	add	r3, r2
 8004436:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800443a:	461a      	mov	r2, r3
 800443c:	2380      	movs	r3, #128	@ 0x80
 800443e:	6093      	str	r3, [r2, #8]
 8004440:	e217      	b.n	8004872 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	78fa      	ldrb	r2, [r7, #3]
 8004448:	4611      	mov	r1, r2
 800444a:	4618      	mov	r0, r3
 800444c:	f003 f960 	bl	8007710 <USB_ReadChInterrupts>
 8004450:	4603      	mov	r3, r0
 8004452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800445a:	d11b      	bne.n	8004494 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800445c:	78fa      	ldrb	r2, [r7, #3]
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	4613      	mov	r3, r2
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	1a9b      	subs	r3, r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	334d      	adds	r3, #77	@ 0x4d
 800446c:	2209      	movs	r2, #9
 800446e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	4611      	mov	r1, r2
 8004478:	4618      	mov	r0, r3
 800447a:	f003 fabb 	bl	80079f4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800447e:	78fb      	ldrb	r3, [r7, #3]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4413      	add	r3, r2
 8004486:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800448a:	461a      	mov	r2, r3
 800448c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004490:	6093      	str	r3, [r2, #8]
 8004492:	e1ee      	b.n	8004872 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	78fa      	ldrb	r2, [r7, #3]
 800449a:	4611      	mov	r1, r2
 800449c:	4618      	mov	r0, r3
 800449e:	f003 f937 	bl	8007710 <USB_ReadChInterrupts>
 80044a2:	4603      	mov	r3, r0
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	f040 81df 	bne.w	800486c <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80044ae:	78fb      	ldrb	r3, [r7, #3]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044ba:	461a      	mov	r2, r3
 80044bc:	2302      	movs	r3, #2
 80044be:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80044c0:	78fa      	ldrb	r2, [r7, #3]
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	1a9b      	subs	r3, r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	334d      	adds	r3, #77	@ 0x4d
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	f040 8093 	bne.w	80045fe <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044d8:	78fa      	ldrb	r2, [r7, #3]
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	4613      	mov	r3, r2
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	1a9b      	subs	r3, r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	334d      	adds	r3, #77	@ 0x4d
 80044e8:	2202      	movs	r2, #2
 80044ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80044ec:	78fa      	ldrb	r2, [r7, #3]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	1a9b      	subs	r3, r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	334c      	adds	r3, #76	@ 0x4c
 80044fc:	2201      	movs	r2, #1
 80044fe:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004500:	78fa      	ldrb	r2, [r7, #3]
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	4613      	mov	r3, r2
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	1a9b      	subs	r3, r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	3326      	adds	r3, #38	@ 0x26
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b02      	cmp	r3, #2
 8004514:	d00b      	beq.n	800452e <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004516:	78fa      	ldrb	r2, [r7, #3]
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	3326      	adds	r3, #38	@ 0x26
 8004526:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004528:	2b03      	cmp	r3, #3
 800452a:	f040 8190 	bne.w	800484e <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	799b      	ldrb	r3, [r3, #6]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d115      	bne.n	8004562 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004536:	78fa      	ldrb	r2, [r7, #3]
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	1a9b      	subs	r3, r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	440b      	add	r3, r1
 8004544:	333d      	adds	r3, #61	@ 0x3d
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	78fa      	ldrb	r2, [r7, #3]
 800454a:	f083 0301 	eor.w	r3, r3, #1
 800454e:	b2d8      	uxtb	r0, r3
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	333d      	adds	r3, #61	@ 0x3d
 800455e:	4602      	mov	r2, r0
 8004560:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	799b      	ldrb	r3, [r3, #6]
 8004566:	2b01      	cmp	r3, #1
 8004568:	f040 8171 	bne.w	800484e <HCD_HC_OUT_IRQHandler+0x954>
 800456c:	78fa      	ldrb	r2, [r7, #3]
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	3334      	adds	r3, #52	@ 0x34
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 8165 	beq.w	800484e <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004584:	78fa      	ldrb	r2, [r7, #3]
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	3334      	adds	r3, #52	@ 0x34
 8004594:	6819      	ldr	r1, [r3, #0]
 8004596:	78fa      	ldrb	r2, [r7, #3]
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4403      	add	r3, r0
 80045a4:	3328      	adds	r3, #40	@ 0x28
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	440b      	add	r3, r1
 80045aa:	1e59      	subs	r1, r3, #1
 80045ac:	78fa      	ldrb	r2, [r7, #3]
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	4613      	mov	r3, r2
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	1a9b      	subs	r3, r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4403      	add	r3, r0
 80045ba:	3328      	adds	r3, #40	@ 0x28
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	fbb1 f3f3 	udiv	r3, r1, r3
 80045c2:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 813f 	beq.w	800484e <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80045d0:	78fa      	ldrb	r2, [r7, #3]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	333d      	adds	r3, #61	@ 0x3d
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	78fa      	ldrb	r2, [r7, #3]
 80045e4:	f083 0301 	eor.w	r3, r3, #1
 80045e8:	b2d8      	uxtb	r0, r3
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	333d      	adds	r3, #61	@ 0x3d
 80045f8:	4602      	mov	r2, r0
 80045fa:	701a      	strb	r2, [r3, #0]
 80045fc:	e127      	b.n	800484e <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80045fe:	78fa      	ldrb	r2, [r7, #3]
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	1a9b      	subs	r3, r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	334d      	adds	r3, #77	@ 0x4d
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b03      	cmp	r3, #3
 8004612:	d120      	bne.n	8004656 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004614:	78fa      	ldrb	r2, [r7, #3]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	1a9b      	subs	r3, r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	334d      	adds	r3, #77	@ 0x4d
 8004624:	2202      	movs	r2, #2
 8004626:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004628:	78fa      	ldrb	r2, [r7, #3]
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	331b      	adds	r3, #27
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b01      	cmp	r3, #1
 800463c:	f040 8107 	bne.w	800484e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004640:	78fa      	ldrb	r2, [r7, #3]
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	1a9b      	subs	r3, r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	334c      	adds	r3, #76	@ 0x4c
 8004650:	2202      	movs	r2, #2
 8004652:	701a      	strb	r2, [r3, #0]
 8004654:	e0fb      	b.n	800484e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004656:	78fa      	ldrb	r2, [r7, #3]
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	1a9b      	subs	r3, r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	440b      	add	r3, r1
 8004664:	334d      	adds	r3, #77	@ 0x4d
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b04      	cmp	r3, #4
 800466a:	d13a      	bne.n	80046e2 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800466c:	78fa      	ldrb	r2, [r7, #3]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	334d      	adds	r3, #77	@ 0x4d
 800467c:	2202      	movs	r2, #2
 800467e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004680:	78fa      	ldrb	r2, [r7, #3]
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	4613      	mov	r3, r2
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	1a9b      	subs	r3, r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	440b      	add	r3, r1
 800468e:	334c      	adds	r3, #76	@ 0x4c
 8004690:	2202      	movs	r2, #2
 8004692:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004694:	78fa      	ldrb	r2, [r7, #3]
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	4613      	mov	r3, r2
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	331b      	adds	r3, #27
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	f040 80d1 	bne.w	800484e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80046ac:	78fa      	ldrb	r2, [r7, #3]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	331b      	adds	r3, #27
 80046bc:	2200      	movs	r2, #0
 80046be:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	78fa      	ldrb	r2, [r7, #3]
 80046d0:	0151      	lsls	r1, r2, #5
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	440a      	add	r2, r1
 80046d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046de:	6053      	str	r3, [r2, #4]
 80046e0:	e0b5      	b.n	800484e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80046e2:	78fa      	ldrb	r2, [r7, #3]
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	4613      	mov	r3, r2
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	1a9b      	subs	r3, r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	440b      	add	r3, r1
 80046f0:	334d      	adds	r3, #77	@ 0x4d
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b05      	cmp	r3, #5
 80046f6:	d114      	bne.n	8004722 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046f8:	78fa      	ldrb	r2, [r7, #3]
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	1a9b      	subs	r3, r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	334d      	adds	r3, #77	@ 0x4d
 8004708:	2202      	movs	r2, #2
 800470a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800470c:	78fa      	ldrb	r2, [r7, #3]
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	4613      	mov	r3, r2
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	334c      	adds	r3, #76	@ 0x4c
 800471c:	2202      	movs	r2, #2
 800471e:	701a      	strb	r2, [r3, #0]
 8004720:	e095      	b.n	800484e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004722:	78fa      	ldrb	r2, [r7, #3]
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	1a9b      	subs	r3, r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	334d      	adds	r3, #77	@ 0x4d
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b06      	cmp	r3, #6
 8004736:	d114      	bne.n	8004762 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004738:	78fa      	ldrb	r2, [r7, #3]
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	4613      	mov	r3, r2
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	1a9b      	subs	r3, r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	334d      	adds	r3, #77	@ 0x4d
 8004748:	2202      	movs	r2, #2
 800474a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800474c:	78fa      	ldrb	r2, [r7, #3]
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	1a9b      	subs	r3, r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	334c      	adds	r3, #76	@ 0x4c
 800475c:	2205      	movs	r2, #5
 800475e:	701a      	strb	r2, [r3, #0]
 8004760:	e075      	b.n	800484e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004762:	78fa      	ldrb	r2, [r7, #3]
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	1a9b      	subs	r3, r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	334d      	adds	r3, #77	@ 0x4d
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b07      	cmp	r3, #7
 8004776:	d00a      	beq.n	800478e <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004778:	78fa      	ldrb	r2, [r7, #3]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	334d      	adds	r3, #77	@ 0x4d
 8004788:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800478a:	2b09      	cmp	r3, #9
 800478c:	d170      	bne.n	8004870 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800478e:	78fa      	ldrb	r2, [r7, #3]
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	1a9b      	subs	r3, r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	440b      	add	r3, r1
 800479c:	334d      	adds	r3, #77	@ 0x4d
 800479e:	2202      	movs	r2, #2
 80047a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80047a2:	78fa      	ldrb	r2, [r7, #3]
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	3344      	adds	r3, #68	@ 0x44
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	1c59      	adds	r1, r3, #1
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4403      	add	r3, r0
 80047c2:	3344      	adds	r3, #68	@ 0x44
 80047c4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047c6:	78fa      	ldrb	r2, [r7, #3]
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	1a9b      	subs	r3, r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	440b      	add	r3, r1
 80047d4:	3344      	adds	r3, #68	@ 0x44
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d914      	bls.n	8004806 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80047dc:	78fa      	ldrb	r2, [r7, #3]
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	4613      	mov	r3, r2
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	3344      	adds	r3, #68	@ 0x44
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80047f0:	78fa      	ldrb	r2, [r7, #3]
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	4613      	mov	r3, r2
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	1a9b      	subs	r3, r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	334c      	adds	r3, #76	@ 0x4c
 8004800:	2204      	movs	r2, #4
 8004802:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004804:	e022      	b.n	800484c <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004806:	78fa      	ldrb	r2, [r7, #3]
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	4613      	mov	r3, r2
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	1a9b      	subs	r3, r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	440b      	add	r3, r1
 8004814:	334c      	adds	r3, #76	@ 0x4c
 8004816:	2202      	movs	r2, #2
 8004818:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800481a:	78fb      	ldrb	r3, [r7, #3]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	4413      	add	r3, r2
 8004822:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004830:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004838:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800483a:	78fb      	ldrb	r3, [r7, #3]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	4413      	add	r3, r2
 8004842:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004846:	461a      	mov	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800484c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800484e:	78fa      	ldrb	r2, [r7, #3]
 8004850:	6879      	ldr	r1, [r7, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	1a9b      	subs	r3, r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	334c      	adds	r3, #76	@ 0x4c
 800485e:	781a      	ldrb	r2, [r3, #0]
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	4619      	mov	r1, r3
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7fe fcd1 	bl	800320c <HAL_HCD_HC_NotifyURBChange_Callback>
 800486a:	e002      	b.n	8004872 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800486c:	bf00      	nop
 800486e:	e000      	b.n	8004872 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004870:	bf00      	nop
  }
}
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08a      	sub	sp, #40	@ 0x28
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004888:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	f003 030f 	and.w	r3, r3, #15
 8004898:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	0c5b      	lsrs	r3, r3, #17
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048ac:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d004      	beq.n	80048be <HCD_RXQLVL_IRQHandler+0x46>
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2b05      	cmp	r3, #5
 80048b8:	f000 80b6 	beq.w	8004a28 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80048bc:	e0b7      	b.n	8004a2e <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 80b3 	beq.w	8004a2c <HCD_RXQLVL_IRQHandler+0x1b4>
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	4613      	mov	r3, r2
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	332c      	adds	r3, #44	@ 0x2c
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 80a7 	beq.w	8004a2c <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4613      	mov	r3, r2
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	1a9b      	subs	r3, r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	3338      	adds	r3, #56	@ 0x38
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	18d1      	adds	r1, r2, r3
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4613      	mov	r3, r2
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	1a9b      	subs	r3, r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4403      	add	r3, r0
 8004902:	3334      	adds	r3, #52	@ 0x34
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4299      	cmp	r1, r3
 8004908:	f200 8083 	bhi.w	8004a12 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6818      	ldr	r0, [r3, #0]
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4613      	mov	r3, r2
 8004916:	011b      	lsls	r3, r3, #4
 8004918:	1a9b      	subs	r3, r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	332c      	adds	r3, #44	@ 0x2c
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	b292      	uxth	r2, r2
 8004926:	4619      	mov	r1, r3
 8004928:	f002 fe87 	bl	800763a <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	4613      	mov	r3, r2
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	1a9b      	subs	r3, r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	332c      	adds	r3, #44	@ 0x2c
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	18d1      	adds	r1, r2, r3
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4613      	mov	r3, r2
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4403      	add	r3, r0
 8004950:	332c      	adds	r3, #44	@ 0x2c
 8004952:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004954:	6879      	ldr	r1, [r7, #4]
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	4613      	mov	r3, r2
 800495a:	011b      	lsls	r3, r3, #4
 800495c:	1a9b      	subs	r3, r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	440b      	add	r3, r1
 8004962:	3338      	adds	r3, #56	@ 0x38
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	18d1      	adds	r1, r2, r3
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4613      	mov	r3, r2
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	1a9b      	subs	r3, r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4403      	add	r3, r0
 8004978:	3338      	adds	r3, #56	@ 0x38
 800497a:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	4413      	add	r3, r2
 8004984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	0cdb      	lsrs	r3, r3, #19
 800498c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004990:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4613      	mov	r3, r2
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	1a9b      	subs	r3, r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	3328      	adds	r3, #40	@ 0x28
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d13f      	bne.n	8004a2c <HCD_RXQLVL_IRQHandler+0x1b4>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d03c      	beq.n	8004a2c <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80049c8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80049d0:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049de:	461a      	mov	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4613      	mov	r3, r2
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	440b      	add	r3, r1
 80049f2:	333c      	adds	r3, #60	@ 0x3c
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	f083 0301 	eor.w	r3, r3, #1
 80049fa:	b2d8      	uxtb	r0, r3
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4613      	mov	r3, r2
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	1a9b      	subs	r3, r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	333c      	adds	r3, #60	@ 0x3c
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	701a      	strb	r2, [r3, #0]
      break;
 8004a10:	e00c      	b.n	8004a2c <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4613      	mov	r3, r2
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	1a9b      	subs	r3, r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	334c      	adds	r3, #76	@ 0x4c
 8004a22:	2204      	movs	r2, #4
 8004a24:	701a      	strb	r2, [r3, #0]
      break;
 8004a26:	e001      	b.n	8004a2c <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004a28:	bf00      	nop
 8004a2a:	e000      	b.n	8004a2e <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004a2c:	bf00      	nop
  }
}
 8004a2e:	bf00      	nop
 8004a30:	3728      	adds	r7, #40	@ 0x28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b086      	sub	sp, #24
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004a62:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d10b      	bne.n	8004a86 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d102      	bne.n	8004a7e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7fe fb9f 	bl	80031bc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f043 0302 	orr.w	r3, r3, #2
 8004a84:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f003 0308 	and.w	r3, r3, #8
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d132      	bne.n	8004af6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f043 0308 	orr.w	r3, r3, #8
 8004a96:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d126      	bne.n	8004af0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	7a5b      	ldrb	r3, [r3, #9]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d113      	bne.n	8004ad2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004ab0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ab4:	d106      	bne.n	8004ac4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2102      	movs	r1, #2
 8004abc:	4618      	mov	r0, r3
 8004abe:	f002 ff4b 	bl	8007958 <USB_InitFSLSPClkSel>
 8004ac2:	e011      	b.n	8004ae8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2101      	movs	r1, #1
 8004aca:	4618      	mov	r0, r3
 8004acc:	f002 ff44 	bl	8007958 <USB_InitFSLSPClkSel>
 8004ad0:	e00a      	b.n	8004ae8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	79db      	ldrb	r3, [r3, #7]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d106      	bne.n	8004ae8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004ae6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7fe fb7b 	bl	80031e4 <HAL_HCD_PortEnabled_Callback>
 8004aee:	e002      	b.n	8004af6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7fe fb81 	bl	80031f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f003 0320 	and.w	r3, r3, #32
 8004afc:	2b20      	cmp	r3, #32
 8004afe:	d103      	bne.n	8004b08 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f043 0320 	orr.w	r3, r3, #32
 8004b06:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004b0e:	461a      	mov	r2, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	6013      	str	r3, [r2, #0]
}
 8004b14:	bf00      	nop
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e12b      	b.n	8004d86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fc f9c2 	bl	8000ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2224      	movs	r2, #36	@ 0x24
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0201 	bic.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b80:	f001 f964 	bl	8005e4c <HAL_RCC_GetPCLK1Freq>
 8004b84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	4a81      	ldr	r2, [pc, #516]	@ (8004d90 <HAL_I2C_Init+0x274>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d807      	bhi.n	8004ba0 <HAL_I2C_Init+0x84>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4a80      	ldr	r2, [pc, #512]	@ (8004d94 <HAL_I2C_Init+0x278>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	bf94      	ite	ls
 8004b98:	2301      	movls	r3, #1
 8004b9a:	2300      	movhi	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	e006      	b.n	8004bae <HAL_I2C_Init+0x92>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4a7d      	ldr	r2, [pc, #500]	@ (8004d98 <HAL_I2C_Init+0x27c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	bf94      	ite	ls
 8004ba8:	2301      	movls	r3, #1
 8004baa:	2300      	movhi	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e0e7      	b.n	8004d86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4a78      	ldr	r2, [pc, #480]	@ (8004d9c <HAL_I2C_Init+0x280>)
 8004bba:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbe:	0c9b      	lsrs	r3, r3, #18
 8004bc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	4a6a      	ldr	r2, [pc, #424]	@ (8004d90 <HAL_I2C_Init+0x274>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d802      	bhi.n	8004bf0 <HAL_I2C_Init+0xd4>
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	3301      	adds	r3, #1
 8004bee:	e009      	b.n	8004c04 <HAL_I2C_Init+0xe8>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004bf6:	fb02 f303 	mul.w	r3, r2, r3
 8004bfa:	4a69      	ldr	r2, [pc, #420]	@ (8004da0 <HAL_I2C_Init+0x284>)
 8004bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004c00:	099b      	lsrs	r3, r3, #6
 8004c02:	3301      	adds	r3, #1
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6812      	ldr	r2, [r2, #0]
 8004c08:	430b      	orrs	r3, r1
 8004c0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004c16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	495c      	ldr	r1, [pc, #368]	@ (8004d90 <HAL_I2C_Init+0x274>)
 8004c20:	428b      	cmp	r3, r1
 8004c22:	d819      	bhi.n	8004c58 <HAL_I2C_Init+0x13c>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	1e59      	subs	r1, r3, #1
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c32:	1c59      	adds	r1, r3, #1
 8004c34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004c38:	400b      	ands	r3, r1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <HAL_I2C_Init+0x138>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	1e59      	subs	r1, r3, #1
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c52:	e051      	b.n	8004cf8 <HAL_I2C_Init+0x1dc>
 8004c54:	2304      	movs	r3, #4
 8004c56:	e04f      	b.n	8004cf8 <HAL_I2C_Init+0x1dc>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d111      	bne.n	8004c84 <HAL_I2C_Init+0x168>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	1e58      	subs	r0, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6859      	ldr	r1, [r3, #4]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	440b      	add	r3, r1
 8004c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c72:	3301      	adds	r3, #1
 8004c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bf0c      	ite	eq
 8004c7c:	2301      	moveq	r3, #1
 8004c7e:	2300      	movne	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	e012      	b.n	8004caa <HAL_I2C_Init+0x18e>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	1e58      	subs	r0, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6859      	ldr	r1, [r3, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	0099      	lsls	r1, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	bf0c      	ite	eq
 8004ca4:	2301      	moveq	r3, #1
 8004ca6:	2300      	movne	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <HAL_I2C_Init+0x196>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e022      	b.n	8004cf8 <HAL_I2C_Init+0x1dc>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10e      	bne.n	8004cd8 <HAL_I2C_Init+0x1bc>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	1e58      	subs	r0, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6859      	ldr	r1, [r3, #4]
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	440b      	add	r3, r1
 8004cc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ccc:	3301      	adds	r3, #1
 8004cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cd6:	e00f      	b.n	8004cf8 <HAL_I2C_Init+0x1dc>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	1e58      	subs	r0, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6859      	ldr	r1, [r3, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	0099      	lsls	r1, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cee:	3301      	adds	r3, #1
 8004cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	6809      	ldr	r1, [r1, #0]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69da      	ldr	r2, [r3, #28]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004d26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6911      	ldr	r1, [r2, #16]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	68d2      	ldr	r2, [r2, #12]
 8004d32:	4311      	orrs	r1, r2
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6812      	ldr	r2, [r2, #0]
 8004d38:	430b      	orrs	r3, r1
 8004d3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695a      	ldr	r2, [r3, #20]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0201 	orr.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	000186a0 	.word	0x000186a0
 8004d94:	001e847f 	.word	0x001e847f
 8004d98:	003d08ff 	.word	0x003d08ff
 8004d9c:	431bde83 	.word	0x431bde83
 8004da0:	10624dd3 	.word	0x10624dd3

08004da4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b20      	cmp	r3, #32
 8004db8:	d129      	bne.n	8004e0e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2224      	movs	r2, #36	@ 0x24
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0201 	bic.w	r2, r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0210 	bic.w	r2, r2, #16
 8004de0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f042 0201 	orr.w	r2, r2, #1
 8004e00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	e000      	b.n	8004e10 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004e0e:	2302      	movs	r3, #2
  }
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	d12a      	bne.n	8004e8c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2224      	movs	r2, #36	@ 0x24
 8004e3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0201 	bic.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004e56:	89fb      	ldrh	r3, [r7, #14]
 8004e58:	f023 030f 	bic.w	r3, r3, #15
 8004e5c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	89fb      	ldrh	r3, [r7, #14]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	89fa      	ldrh	r2, [r7, #14]
 8004e6e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0201 	orr.w	r2, r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	e000      	b.n	8004e8e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004e8c:	2302      	movs	r3, #2
  }
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
	...

08004e9c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e0bf      	b.n	800502e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7fc f86c 	bl	8000fa0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004ede:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6999      	ldr	r1, [r3, #24]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ef4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6899      	ldr	r1, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	4b4a      	ldr	r3, [pc, #296]	@ (8005038 <HAL_LTDC_Init+0x19c>)
 8004f10:	400b      	ands	r3, r1
 8004f12:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	041b      	lsls	r3, r3, #16
 8004f1a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6899      	ldr	r1, [r3, #8]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68d9      	ldr	r1, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	4b3e      	ldr	r3, [pc, #248]	@ (8005038 <HAL_LTDC_Init+0x19c>)
 8004f3e:	400b      	ands	r3, r1
 8004f40:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	041b      	lsls	r3, r3, #16
 8004f48:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68d9      	ldr	r1, [r3, #12]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1a      	ldr	r2, [r3, #32]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	431a      	orrs	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6919      	ldr	r1, [r3, #16]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	4b33      	ldr	r3, [pc, #204]	@ (8005038 <HAL_LTDC_Init+0x19c>)
 8004f6c:	400b      	ands	r3, r1
 8004f6e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f74:	041b      	lsls	r3, r3, #16
 8004f76:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6919      	ldr	r1, [r3, #16]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	431a      	orrs	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6959      	ldr	r1, [r3, #20]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	4b27      	ldr	r3, [pc, #156]	@ (8005038 <HAL_LTDC_Init+0x19c>)
 8004f9a:	400b      	ands	r3, r1
 8004f9c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa2:	041b      	lsls	r3, r3, #16
 8004fa4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6959      	ldr	r1, [r3, #20]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fc2:	021b      	lsls	r3, r3, #8
 8004fc4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004fcc:	041b      	lsls	r3, r3, #16
 8004fce:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004fde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0206 	orr.w	r2, r2, #6
 800500a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699a      	ldr	r2, [r3, #24]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0201 	orr.w	r2, r2, #1
 800501a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	f000f800 	.word	0xf000f800

0800503c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005052:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	2b00      	cmp	r3, #0
 800505c:	d023      	beq.n	80050a6 <HAL_LTDC_IRQHandler+0x6a>
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01e      	beq.n	80050a6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0204 	bic.w	r2, r2, #4
 8005076:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2204      	movs	r2, #4
 800507e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005086:	f043 0201 	orr.w	r2, r3, #1
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2204      	movs	r2, #4
 8005094:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f86f 	bl	8005184 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d023      	beq.n	80050f8 <HAL_LTDC_IRQHandler+0xbc>
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d01e      	beq.n	80050f8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0202 	bic.w	r2, r2, #2
 80050c8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2202      	movs	r2, #2
 80050d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80050d8:	f043 0202 	orr.w	r2, r3, #2
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2204      	movs	r2, #4
 80050e6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f846 	bl	8005184 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d01b      	beq.n	800513a <HAL_LTDC_IRQHandler+0xfe>
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d016      	beq.n	800513a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0201 	bic.w	r2, r2, #1
 800511a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2201      	movs	r2, #1
 8005122:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f82f 	bl	8005198 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b00      	cmp	r3, #0
 8005142:	d01b      	beq.n	800517c <HAL_LTDC_IRQHandler+0x140>
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d016      	beq.n	800517c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0208 	bic.w	r2, r2, #8
 800515c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2208      	movs	r2, #8
 8005164:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f818 	bl	80051ac <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800517c:	bf00      	nop
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80051c0:	b5b0      	push	{r4, r5, r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d101      	bne.n	80051da <HAL_LTDC_ConfigLayer+0x1a>
 80051d6:	2302      	movs	r3, #2
 80051d8:	e02c      	b.n	8005234 <HAL_LTDC_ConfigLayer+0x74>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2202      	movs	r2, #2
 80051e6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2134      	movs	r1, #52	@ 0x34
 80051f0:	fb01 f303 	mul.w	r3, r1, r3
 80051f4:	4413      	add	r3, r2
 80051f6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	4614      	mov	r4, r2
 80051fe:	461d      	mov	r5, r3
 8005200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800520a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	68b9      	ldr	r1, [r7, #8]
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 f811 	bl	800523c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2201      	movs	r2, #1
 8005220:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bdb0      	pop	{r4, r5, r7, pc}

0800523c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800523c:	b480      	push	{r7}
 800523e:	b089      	sub	sp, #36	@ 0x24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	0c1b      	lsrs	r3, r3, #16
 8005254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005258:	4413      	add	r3, r2
 800525a:	041b      	lsls	r3, r3, #16
 800525c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	01db      	lsls	r3, r3, #7
 8005268:	4413      	add	r3, r2
 800526a:	3384      	adds	r3, #132	@ 0x84
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	6812      	ldr	r2, [r2, #0]
 8005272:	4611      	mov	r1, r2
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	01d2      	lsls	r2, r2, #7
 8005278:	440a      	add	r2, r1
 800527a:	3284      	adds	r2, #132	@ 0x84
 800527c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005280:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	0c1b      	lsrs	r3, r3, #16
 800528e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005292:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005294:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4619      	mov	r1, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	01db      	lsls	r3, r3, #7
 80052a0:	440b      	add	r3, r1
 80052a2:	3384      	adds	r3, #132	@ 0x84
 80052a4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80052aa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052ba:	4413      	add	r3, r2
 80052bc:	041b      	lsls	r3, r3, #16
 80052be:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	01db      	lsls	r3, r3, #7
 80052ca:	4413      	add	r3, r2
 80052cc:	3384      	adds	r3, #132	@ 0x84
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	4611      	mov	r1, r2
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	01d2      	lsls	r2, r2, #7
 80052da:	440a      	add	r2, r1
 80052dc:	3284      	adds	r2, #132	@ 0x84
 80052de:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80052e2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052f2:	4413      	add	r3, r2
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4619      	mov	r1, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	01db      	lsls	r3, r3, #7
 8005300:	440b      	add	r3, r1
 8005302:	3384      	adds	r3, #132	@ 0x84
 8005304:	4619      	mov	r1, r3
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	4313      	orrs	r3, r2
 800530a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	461a      	mov	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	01db      	lsls	r3, r3, #7
 8005316:	4413      	add	r3, r2
 8005318:	3384      	adds	r3, #132	@ 0x84
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	4611      	mov	r1, r2
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	01d2      	lsls	r2, r2, #7
 8005326:	440a      	add	r2, r1
 8005328:	3284      	adds	r2, #132	@ 0x84
 800532a:	f023 0307 	bic.w	r3, r3, #7
 800532e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	461a      	mov	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	01db      	lsls	r3, r3, #7
 800533a:	4413      	add	r3, r2
 800533c:	3384      	adds	r3, #132	@ 0x84
 800533e:	461a      	mov	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800534c:	021b      	lsls	r3, r3, #8
 800534e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005356:	041b      	lsls	r3, r3, #16
 8005358:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	061b      	lsls	r3, r3, #24
 8005360:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	01db      	lsls	r3, r3, #7
 800536c:	4413      	add	r3, r2
 800536e:	3384      	adds	r3, #132	@ 0x84
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	01db      	lsls	r3, r3, #7
 800537c:	4413      	add	r3, r2
 800537e:	3384      	adds	r3, #132	@ 0x84
 8005380:	461a      	mov	r2, r3
 8005382:	2300      	movs	r3, #0
 8005384:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800538c:	461a      	mov	r2, r3
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	431a      	orrs	r2, r3
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	431a      	orrs	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4619      	mov	r1, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	01db      	lsls	r3, r3, #7
 80053a0:	440b      	add	r3, r1
 80053a2:	3384      	adds	r3, #132	@ 0x84
 80053a4:	4619      	mov	r1, r3
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	461a      	mov	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	01db      	lsls	r3, r3, #7
 80053b6:	4413      	add	r3, r2
 80053b8:	3384      	adds	r3, #132	@ 0x84
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	6812      	ldr	r2, [r2, #0]
 80053c0:	4611      	mov	r1, r2
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	01d2      	lsls	r2, r2, #7
 80053c6:	440a      	add	r2, r1
 80053c8:	3284      	adds	r2, #132	@ 0x84
 80053ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80053ce:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	461a      	mov	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	01db      	lsls	r3, r3, #7
 80053da:	4413      	add	r3, r2
 80053dc:	3384      	adds	r3, #132	@ 0x84
 80053de:	461a      	mov	r2, r3
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	01db      	lsls	r3, r3, #7
 80053f0:	4413      	add	r3, r2
 80053f2:	3384      	adds	r3, #132	@ 0x84
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	4611      	mov	r1, r2
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	01d2      	lsls	r2, r2, #7
 8005400:	440a      	add	r2, r1
 8005402:	3284      	adds	r2, #132	@ 0x84
 8005404:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005408:	f023 0307 	bic.w	r3, r3, #7
 800540c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	69da      	ldr	r2, [r3, #28]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	68f9      	ldr	r1, [r7, #12]
 8005418:	6809      	ldr	r1, [r1, #0]
 800541a:	4608      	mov	r0, r1
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	01c9      	lsls	r1, r1, #7
 8005420:	4401      	add	r1, r0
 8005422:	3184      	adds	r1, #132	@ 0x84
 8005424:	4313      	orrs	r3, r2
 8005426:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	01db      	lsls	r3, r3, #7
 8005432:	4413      	add	r3, r2
 8005434:	3384      	adds	r3, #132	@ 0x84
 8005436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	461a      	mov	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	01db      	lsls	r3, r3, #7
 8005442:	4413      	add	r3, r2
 8005444:	3384      	adds	r3, #132	@ 0x84
 8005446:	461a      	mov	r2, r3
 8005448:	2300      	movs	r3, #0
 800544a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	01db      	lsls	r3, r3, #7
 8005456:	4413      	add	r3, r2
 8005458:	3384      	adds	r3, #132	@ 0x84
 800545a:	461a      	mov	r2, r3
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005460:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d102      	bne.n	8005470 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800546a:	2304      	movs	r3, #4
 800546c:	61fb      	str	r3, [r7, #28]
 800546e:	e01b      	b.n	80054a8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d102      	bne.n	800547e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005478:	2303      	movs	r3, #3
 800547a:	61fb      	str	r3, [r7, #28]
 800547c:	e014      	b.n	80054a8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	2b04      	cmp	r3, #4
 8005484:	d00b      	beq.n	800549e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800548a:	2b02      	cmp	r3, #2
 800548c:	d007      	beq.n	800549e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005492:	2b03      	cmp	r3, #3
 8005494:	d003      	beq.n	800549e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800549a:	2b07      	cmp	r3, #7
 800549c:	d102      	bne.n	80054a4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800549e:	2302      	movs	r3, #2
 80054a0:	61fb      	str	r3, [r7, #28]
 80054a2:	e001      	b.n	80054a8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80054a4:	2301      	movs	r3, #1
 80054a6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	461a      	mov	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	01db      	lsls	r3, r3, #7
 80054b2:	4413      	add	r3, r2
 80054b4:	3384      	adds	r3, #132	@ 0x84
 80054b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	6812      	ldr	r2, [r2, #0]
 80054bc:	4611      	mov	r1, r2
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	01d2      	lsls	r2, r2, #7
 80054c2:	440a      	add	r2, r1
 80054c4:	3284      	adds	r2, #132	@ 0x84
 80054c6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80054ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	fb02 f303 	mul.w	r3, r2, r3
 80054d6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	6859      	ldr	r1, [r3, #4]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	1acb      	subs	r3, r1, r3
 80054e2:	69f9      	ldr	r1, [r7, #28]
 80054e4:	fb01 f303 	mul.w	r3, r1, r3
 80054e8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80054ea:	68f9      	ldr	r1, [r7, #12]
 80054ec:	6809      	ldr	r1, [r1, #0]
 80054ee:	4608      	mov	r0, r1
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	01c9      	lsls	r1, r1, #7
 80054f4:	4401      	add	r1, r0
 80054f6:	3184      	adds	r1, #132	@ 0x84
 80054f8:	4313      	orrs	r3, r2
 80054fa:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	01db      	lsls	r3, r3, #7
 8005506:	4413      	add	r3, r2
 8005508:	3384      	adds	r3, #132	@ 0x84
 800550a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	6812      	ldr	r2, [r2, #0]
 8005510:	4611      	mov	r1, r2
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	01d2      	lsls	r2, r2, #7
 8005516:	440a      	add	r2, r1
 8005518:	3284      	adds	r2, #132	@ 0x84
 800551a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800551e:	f023 0307 	bic.w	r3, r3, #7
 8005522:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	461a      	mov	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	01db      	lsls	r3, r3, #7
 800552e:	4413      	add	r3, r2
 8005530:	3384      	adds	r3, #132	@ 0x84
 8005532:	461a      	mov	r2, r3
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005538:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	01db      	lsls	r3, r3, #7
 8005544:	4413      	add	r3, r2
 8005546:	3384      	adds	r3, #132	@ 0x84
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	6812      	ldr	r2, [r2, #0]
 800554e:	4611      	mov	r1, r2
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	01d2      	lsls	r2, r2, #7
 8005554:	440a      	add	r2, r1
 8005556:	3284      	adds	r2, #132	@ 0x84
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	6013      	str	r3, [r2, #0]
}
 800555e:	bf00      	nop
 8005560:	3724      	adds	r7, #36	@ 0x24
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
	...

0800556c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e267      	b.n	8005a4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d075      	beq.n	8005676 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800558a:	4b88      	ldr	r3, [pc, #544]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 030c 	and.w	r3, r3, #12
 8005592:	2b04      	cmp	r3, #4
 8005594:	d00c      	beq.n	80055b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005596:	4b85      	ldr	r3, [pc, #532]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800559e:	2b08      	cmp	r3, #8
 80055a0:	d112      	bne.n	80055c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055a2:	4b82      	ldr	r3, [pc, #520]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055ae:	d10b      	bne.n	80055c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055b0:	4b7e      	ldr	r3, [pc, #504]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d05b      	beq.n	8005674 <HAL_RCC_OscConfig+0x108>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d157      	bne.n	8005674 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e242      	b.n	8005a4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055d0:	d106      	bne.n	80055e0 <HAL_RCC_OscConfig+0x74>
 80055d2:	4b76      	ldr	r3, [pc, #472]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a75      	ldr	r2, [pc, #468]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 80055d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	e01d      	b.n	800561c <HAL_RCC_OscConfig+0xb0>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055e8:	d10c      	bne.n	8005604 <HAL_RCC_OscConfig+0x98>
 80055ea:	4b70      	ldr	r3, [pc, #448]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a6f      	ldr	r2, [pc, #444]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 80055f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	4b6d      	ldr	r3, [pc, #436]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a6c      	ldr	r2, [pc, #432]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 80055fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005600:	6013      	str	r3, [r2, #0]
 8005602:	e00b      	b.n	800561c <HAL_RCC_OscConfig+0xb0>
 8005604:	4b69      	ldr	r3, [pc, #420]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a68      	ldr	r2, [pc, #416]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 800560a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800560e:	6013      	str	r3, [r2, #0]
 8005610:	4b66      	ldr	r3, [pc, #408]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a65      	ldr	r2, [pc, #404]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 8005616:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800561a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d013      	beq.n	800564c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005624:	f7fc ff52 	bl	80024cc <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800562c:	f7fc ff4e 	bl	80024cc <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b64      	cmp	r3, #100	@ 0x64
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e207      	b.n	8005a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800563e:	4b5b      	ldr	r3, [pc, #364]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0f0      	beq.n	800562c <HAL_RCC_OscConfig+0xc0>
 800564a:	e014      	b.n	8005676 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800564c:	f7fc ff3e 	bl	80024cc <HAL_GetTick>
 8005650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005652:	e008      	b.n	8005666 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005654:	f7fc ff3a 	bl	80024cc <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b64      	cmp	r3, #100	@ 0x64
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e1f3      	b.n	8005a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005666:	4b51      	ldr	r3, [pc, #324]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1f0      	bne.n	8005654 <HAL_RCC_OscConfig+0xe8>
 8005672:	e000      	b.n	8005676 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d063      	beq.n	800574a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005682:	4b4a      	ldr	r3, [pc, #296]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 030c 	and.w	r3, r3, #12
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00b      	beq.n	80056a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800568e:	4b47      	ldr	r3, [pc, #284]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005696:	2b08      	cmp	r3, #8
 8005698:	d11c      	bne.n	80056d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800569a:	4b44      	ldr	r3, [pc, #272]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d116      	bne.n	80056d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056a6:	4b41      	ldr	r3, [pc, #260]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d005      	beq.n	80056be <HAL_RCC_OscConfig+0x152>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d001      	beq.n	80056be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e1c7      	b.n	8005a4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056be:	4b3b      	ldr	r3, [pc, #236]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	4937      	ldr	r1, [pc, #220]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056d2:	e03a      	b.n	800574a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d020      	beq.n	800571e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056dc:	4b34      	ldr	r3, [pc, #208]	@ (80057b0 <HAL_RCC_OscConfig+0x244>)
 80056de:	2201      	movs	r2, #1
 80056e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e2:	f7fc fef3 	bl	80024cc <HAL_GetTick>
 80056e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056e8:	e008      	b.n	80056fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ea:	f7fc feef 	bl	80024cc <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d901      	bls.n	80056fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e1a8      	b.n	8005a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056fc:	4b2b      	ldr	r3, [pc, #172]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0f0      	beq.n	80056ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005708:	4b28      	ldr	r3, [pc, #160]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	4925      	ldr	r1, [pc, #148]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 8005718:	4313      	orrs	r3, r2
 800571a:	600b      	str	r3, [r1, #0]
 800571c:	e015      	b.n	800574a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800571e:	4b24      	ldr	r3, [pc, #144]	@ (80057b0 <HAL_RCC_OscConfig+0x244>)
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005724:	f7fc fed2 	bl	80024cc <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800572c:	f7fc fece 	bl	80024cc <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e187      	b.n	8005a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800573e:	4b1b      	ldr	r3, [pc, #108]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1f0      	bne.n	800572c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0308 	and.w	r3, r3, #8
 8005752:	2b00      	cmp	r3, #0
 8005754:	d036      	beq.n	80057c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d016      	beq.n	800578c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800575e:	4b15      	ldr	r3, [pc, #84]	@ (80057b4 <HAL_RCC_OscConfig+0x248>)
 8005760:	2201      	movs	r2, #1
 8005762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005764:	f7fc feb2 	bl	80024cc <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800576c:	f7fc feae 	bl	80024cc <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e167      	b.n	8005a4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800577e:	4b0b      	ldr	r3, [pc, #44]	@ (80057ac <HAL_RCC_OscConfig+0x240>)
 8005780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0f0      	beq.n	800576c <HAL_RCC_OscConfig+0x200>
 800578a:	e01b      	b.n	80057c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800578c:	4b09      	ldr	r3, [pc, #36]	@ (80057b4 <HAL_RCC_OscConfig+0x248>)
 800578e:	2200      	movs	r2, #0
 8005790:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005792:	f7fc fe9b 	bl	80024cc <HAL_GetTick>
 8005796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005798:	e00e      	b.n	80057b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800579a:	f7fc fe97 	bl	80024cc <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d907      	bls.n	80057b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e150      	b.n	8005a4e <HAL_RCC_OscConfig+0x4e2>
 80057ac:	40023800 	.word	0x40023800
 80057b0:	42470000 	.word	0x42470000
 80057b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057b8:	4b88      	ldr	r3, [pc, #544]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 80057ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1ea      	bne.n	800579a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 8097 	beq.w	8005900 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057d2:	2300      	movs	r3, #0
 80057d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057d6:	4b81      	ldr	r3, [pc, #516]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 80057d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10f      	bne.n	8005802 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057e2:	2300      	movs	r3, #0
 80057e4:	60bb      	str	r3, [r7, #8]
 80057e6:	4b7d      	ldr	r3, [pc, #500]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 80057e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ea:	4a7c      	ldr	r2, [pc, #496]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 80057ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80057f2:	4b7a      	ldr	r3, [pc, #488]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 80057f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057fa:	60bb      	str	r3, [r7, #8]
 80057fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057fe:	2301      	movs	r3, #1
 8005800:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005802:	4b77      	ldr	r3, [pc, #476]	@ (80059e0 <HAL_RCC_OscConfig+0x474>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800580a:	2b00      	cmp	r3, #0
 800580c:	d118      	bne.n	8005840 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800580e:	4b74      	ldr	r3, [pc, #464]	@ (80059e0 <HAL_RCC_OscConfig+0x474>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a73      	ldr	r2, [pc, #460]	@ (80059e0 <HAL_RCC_OscConfig+0x474>)
 8005814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800581a:	f7fc fe57 	bl	80024cc <HAL_GetTick>
 800581e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005820:	e008      	b.n	8005834 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005822:	f7fc fe53 	bl	80024cc <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e10c      	b.n	8005a4e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005834:	4b6a      	ldr	r3, [pc, #424]	@ (80059e0 <HAL_RCC_OscConfig+0x474>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0f0      	beq.n	8005822 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d106      	bne.n	8005856 <HAL_RCC_OscConfig+0x2ea>
 8005848:	4b64      	ldr	r3, [pc, #400]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 800584a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800584c:	4a63      	ldr	r2, [pc, #396]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 800584e:	f043 0301 	orr.w	r3, r3, #1
 8005852:	6713      	str	r3, [r2, #112]	@ 0x70
 8005854:	e01c      	b.n	8005890 <HAL_RCC_OscConfig+0x324>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	2b05      	cmp	r3, #5
 800585c:	d10c      	bne.n	8005878 <HAL_RCC_OscConfig+0x30c>
 800585e:	4b5f      	ldr	r3, [pc, #380]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 8005860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005862:	4a5e      	ldr	r2, [pc, #376]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 8005864:	f043 0304 	orr.w	r3, r3, #4
 8005868:	6713      	str	r3, [r2, #112]	@ 0x70
 800586a:	4b5c      	ldr	r3, [pc, #368]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 800586c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800586e:	4a5b      	ldr	r2, [pc, #364]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 8005870:	f043 0301 	orr.w	r3, r3, #1
 8005874:	6713      	str	r3, [r2, #112]	@ 0x70
 8005876:	e00b      	b.n	8005890 <HAL_RCC_OscConfig+0x324>
 8005878:	4b58      	ldr	r3, [pc, #352]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 800587a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587c:	4a57      	ldr	r2, [pc, #348]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 800587e:	f023 0301 	bic.w	r3, r3, #1
 8005882:	6713      	str	r3, [r2, #112]	@ 0x70
 8005884:	4b55      	ldr	r3, [pc, #340]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 8005886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005888:	4a54      	ldr	r2, [pc, #336]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 800588a:	f023 0304 	bic.w	r3, r3, #4
 800588e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d015      	beq.n	80058c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005898:	f7fc fe18 	bl	80024cc <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800589e:	e00a      	b.n	80058b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058a0:	f7fc fe14 	bl	80024cc <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e0cb      	b.n	8005a4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058b6:	4b49      	ldr	r3, [pc, #292]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 80058b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0ee      	beq.n	80058a0 <HAL_RCC_OscConfig+0x334>
 80058c2:	e014      	b.n	80058ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058c4:	f7fc fe02 	bl	80024cc <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058ca:	e00a      	b.n	80058e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058cc:	f7fc fdfe 	bl	80024cc <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058da:	4293      	cmp	r3, r2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e0b5      	b.n	8005a4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058e2:	4b3e      	ldr	r3, [pc, #248]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 80058e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1ee      	bne.n	80058cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058ee:	7dfb      	ldrb	r3, [r7, #23]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d105      	bne.n	8005900 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058f4:	4b39      	ldr	r3, [pc, #228]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 80058f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f8:	4a38      	ldr	r2, [pc, #224]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 80058fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 80a1 	beq.w	8005a4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800590a:	4b34      	ldr	r3, [pc, #208]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 030c 	and.w	r3, r3, #12
 8005912:	2b08      	cmp	r3, #8
 8005914:	d05c      	beq.n	80059d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	2b02      	cmp	r3, #2
 800591c:	d141      	bne.n	80059a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800591e:	4b31      	ldr	r3, [pc, #196]	@ (80059e4 <HAL_RCC_OscConfig+0x478>)
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005924:	f7fc fdd2 	bl	80024cc <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800592c:	f7fc fdce 	bl	80024cc <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e087      	b.n	8005a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800593e:	4b27      	ldr	r3, [pc, #156]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1f0      	bne.n	800592c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69da      	ldr	r2, [r3, #28]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	431a      	orrs	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005958:	019b      	lsls	r3, r3, #6
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005960:	085b      	lsrs	r3, r3, #1
 8005962:	3b01      	subs	r3, #1
 8005964:	041b      	lsls	r3, r3, #16
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596c:	061b      	lsls	r3, r3, #24
 800596e:	491b      	ldr	r1, [pc, #108]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 8005970:	4313      	orrs	r3, r2
 8005972:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005974:	4b1b      	ldr	r3, [pc, #108]	@ (80059e4 <HAL_RCC_OscConfig+0x478>)
 8005976:	2201      	movs	r2, #1
 8005978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800597a:	f7fc fda7 	bl	80024cc <HAL_GetTick>
 800597e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005980:	e008      	b.n	8005994 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005982:	f7fc fda3 	bl	80024cc <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d901      	bls.n	8005994 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e05c      	b.n	8005a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005994:	4b11      	ldr	r3, [pc, #68]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0f0      	beq.n	8005982 <HAL_RCC_OscConfig+0x416>
 80059a0:	e054      	b.n	8005a4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059a2:	4b10      	ldr	r3, [pc, #64]	@ (80059e4 <HAL_RCC_OscConfig+0x478>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a8:	f7fc fd90 	bl	80024cc <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059b0:	f7fc fd8c 	bl	80024cc <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e045      	b.n	8005a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059c2:	4b06      	ldr	r3, [pc, #24]	@ (80059dc <HAL_RCC_OscConfig+0x470>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f0      	bne.n	80059b0 <HAL_RCC_OscConfig+0x444>
 80059ce:	e03d      	b.n	8005a4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d107      	bne.n	80059e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e038      	b.n	8005a4e <HAL_RCC_OscConfig+0x4e2>
 80059dc:	40023800 	.word	0x40023800
 80059e0:	40007000 	.word	0x40007000
 80059e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a58 <HAL_RCC_OscConfig+0x4ec>)
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d028      	beq.n	8005a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d121      	bne.n	8005a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d11a      	bne.n	8005a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a18:	4013      	ands	r3, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d111      	bne.n	8005a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2e:	085b      	lsrs	r3, r3, #1
 8005a30:	3b01      	subs	r3, #1
 8005a32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d107      	bne.n	8005a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d001      	beq.n	8005a4c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e000      	b.n	8005a4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	40023800 	.word	0x40023800

08005a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e0cc      	b.n	8005c0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a70:	4b68      	ldr	r3, [pc, #416]	@ (8005c14 <HAL_RCC_ClockConfig+0x1b8>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 030f 	and.w	r3, r3, #15
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d90c      	bls.n	8005a98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a7e:	4b65      	ldr	r3, [pc, #404]	@ (8005c14 <HAL_RCC_ClockConfig+0x1b8>)
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a86:	4b63      	ldr	r3, [pc, #396]	@ (8005c14 <HAL_RCC_ClockConfig+0x1b8>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d001      	beq.n	8005a98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e0b8      	b.n	8005c0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d020      	beq.n	8005ae6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ab0:	4b59      	ldr	r3, [pc, #356]	@ (8005c18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	4a58      	ldr	r2, [pc, #352]	@ (8005c18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005aba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0308 	and.w	r3, r3, #8
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ac8:	4b53      	ldr	r3, [pc, #332]	@ (8005c18 <HAL_RCC_ClockConfig+0x1bc>)
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	4a52      	ldr	r2, [pc, #328]	@ (8005c18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ace:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005ad2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ad4:	4b50      	ldr	r3, [pc, #320]	@ (8005c18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	494d      	ldr	r1, [pc, #308]	@ (8005c18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d044      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d107      	bne.n	8005b0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afa:	4b47      	ldr	r3, [pc, #284]	@ (8005c18 <HAL_RCC_ClockConfig+0x1bc>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d119      	bne.n	8005b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e07f      	b.n	8005c0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d003      	beq.n	8005b1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	d107      	bne.n	8005b2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b1a:	4b3f      	ldr	r3, [pc, #252]	@ (8005c18 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d109      	bne.n	8005b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e06f      	b.n	8005c0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c18 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e067      	b.n	8005c0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b3a:	4b37      	ldr	r3, [pc, #220]	@ (8005c18 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f023 0203 	bic.w	r2, r3, #3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	4934      	ldr	r1, [pc, #208]	@ (8005c18 <HAL_RCC_ClockConfig+0x1bc>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b4c:	f7fc fcbe 	bl	80024cc <HAL_GetTick>
 8005b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b52:	e00a      	b.n	8005b6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b54:	f7fc fcba 	bl	80024cc <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e04f      	b.n	8005c0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8005c18 <HAL_RCC_ClockConfig+0x1bc>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 020c 	and.w	r2, r3, #12
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d1eb      	bne.n	8005b54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b7c:	4b25      	ldr	r3, [pc, #148]	@ (8005c14 <HAL_RCC_ClockConfig+0x1b8>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 030f 	and.w	r3, r3, #15
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d20c      	bcs.n	8005ba4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b8a:	4b22      	ldr	r3, [pc, #136]	@ (8005c14 <HAL_RCC_ClockConfig+0x1b8>)
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	b2d2      	uxtb	r2, r2
 8005b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b92:	4b20      	ldr	r3, [pc, #128]	@ (8005c14 <HAL_RCC_ClockConfig+0x1b8>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 030f 	and.w	r3, r3, #15
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d001      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e032      	b.n	8005c0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d008      	beq.n	8005bc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bb0:	4b19      	ldr	r3, [pc, #100]	@ (8005c18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	4916      	ldr	r1, [pc, #88]	@ (8005c18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0308 	and.w	r3, r3, #8
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d009      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bce:	4b12      	ldr	r3, [pc, #72]	@ (8005c18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	490e      	ldr	r1, [pc, #56]	@ (8005c18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005be2:	f000 f821 	bl	8005c28 <HAL_RCC_GetSysClockFreq>
 8005be6:	4602      	mov	r2, r0
 8005be8:	4b0b      	ldr	r3, [pc, #44]	@ (8005c18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	091b      	lsrs	r3, r3, #4
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	490a      	ldr	r1, [pc, #40]	@ (8005c1c <HAL_RCC_ClockConfig+0x1c0>)
 8005bf4:	5ccb      	ldrb	r3, [r1, r3]
 8005bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bfa:	4a09      	ldr	r2, [pc, #36]	@ (8005c20 <HAL_RCC_ClockConfig+0x1c4>)
 8005bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005bfe:	4b09      	ldr	r3, [pc, #36]	@ (8005c24 <HAL_RCC_ClockConfig+0x1c8>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fb fca8 	bl	8001558 <HAL_InitTick>

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	40023c00 	.word	0x40023c00
 8005c18:	40023800 	.word	0x40023800
 8005c1c:	08008ca8 	.word	0x08008ca8
 8005c20:	20000058 	.word	0x20000058
 8005c24:	2000005c 	.word	0x2000005c

08005c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c2c:	b094      	sub	sp, #80	@ 0x50
 8005c2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c40:	4b79      	ldr	r3, [pc, #484]	@ (8005e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 030c 	and.w	r3, r3, #12
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d00d      	beq.n	8005c68 <HAL_RCC_GetSysClockFreq+0x40>
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	f200 80e1 	bhi.w	8005e14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d002      	beq.n	8005c5c <HAL_RCC_GetSysClockFreq+0x34>
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d003      	beq.n	8005c62 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c5a:	e0db      	b.n	8005e14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c5c:	4b73      	ldr	r3, [pc, #460]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0x204>)
 8005c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c60:	e0db      	b.n	8005e1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c62:	4b73      	ldr	r3, [pc, #460]	@ (8005e30 <HAL_RCC_GetSysClockFreq+0x208>)
 8005c64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c66:	e0d8      	b.n	8005e1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c68:	4b6f      	ldr	r3, [pc, #444]	@ (8005e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c70:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c72:	4b6d      	ldr	r3, [pc, #436]	@ (8005e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d063      	beq.n	8005d46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c7e:	4b6a      	ldr	r3, [pc, #424]	@ (8005e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	099b      	lsrs	r3, r3, #6
 8005c84:	2200      	movs	r2, #0
 8005c86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c90:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c92:	2300      	movs	r3, #0
 8005c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005c9a:	4622      	mov	r2, r4
 8005c9c:	462b      	mov	r3, r5
 8005c9e:	f04f 0000 	mov.w	r0, #0
 8005ca2:	f04f 0100 	mov.w	r1, #0
 8005ca6:	0159      	lsls	r1, r3, #5
 8005ca8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cac:	0150      	lsls	r0, r2, #5
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4621      	mov	r1, r4
 8005cb4:	1a51      	subs	r1, r2, r1
 8005cb6:	6139      	str	r1, [r7, #16]
 8005cb8:	4629      	mov	r1, r5
 8005cba:	eb63 0301 	sbc.w	r3, r3, r1
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	f04f 0300 	mov.w	r3, #0
 8005cc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ccc:	4659      	mov	r1, fp
 8005cce:	018b      	lsls	r3, r1, #6
 8005cd0:	4651      	mov	r1, sl
 8005cd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cd6:	4651      	mov	r1, sl
 8005cd8:	018a      	lsls	r2, r1, #6
 8005cda:	4651      	mov	r1, sl
 8005cdc:	ebb2 0801 	subs.w	r8, r2, r1
 8005ce0:	4659      	mov	r1, fp
 8005ce2:	eb63 0901 	sbc.w	r9, r3, r1
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	f04f 0300 	mov.w	r3, #0
 8005cee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cfa:	4690      	mov	r8, r2
 8005cfc:	4699      	mov	r9, r3
 8005cfe:	4623      	mov	r3, r4
 8005d00:	eb18 0303 	adds.w	r3, r8, r3
 8005d04:	60bb      	str	r3, [r7, #8]
 8005d06:	462b      	mov	r3, r5
 8005d08:	eb49 0303 	adc.w	r3, r9, r3
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	f04f 0200 	mov.w	r2, #0
 8005d12:	f04f 0300 	mov.w	r3, #0
 8005d16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	024b      	lsls	r3, r1, #9
 8005d1e:	4621      	mov	r1, r4
 8005d20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d24:	4621      	mov	r1, r4
 8005d26:	024a      	lsls	r2, r1, #9
 8005d28:	4610      	mov	r0, r2
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d2e:	2200      	movs	r2, #0
 8005d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d38:	f7fa faaa 	bl	8000290 <__aeabi_uldivmod>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4613      	mov	r3, r2
 8005d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d44:	e058      	b.n	8005df8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d46:	4b38      	ldr	r3, [pc, #224]	@ (8005e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	099b      	lsrs	r3, r3, #6
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	4618      	mov	r0, r3
 8005d50:	4611      	mov	r1, r2
 8005d52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d56:	623b      	str	r3, [r7, #32]
 8005d58:	2300      	movs	r3, #0
 8005d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d60:	4642      	mov	r2, r8
 8005d62:	464b      	mov	r3, r9
 8005d64:	f04f 0000 	mov.w	r0, #0
 8005d68:	f04f 0100 	mov.w	r1, #0
 8005d6c:	0159      	lsls	r1, r3, #5
 8005d6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d72:	0150      	lsls	r0, r2, #5
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	4641      	mov	r1, r8
 8005d7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d7e:	4649      	mov	r1, r9
 8005d80:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d84:	f04f 0200 	mov.w	r2, #0
 8005d88:	f04f 0300 	mov.w	r3, #0
 8005d8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d98:	ebb2 040a 	subs.w	r4, r2, sl
 8005d9c:	eb63 050b 	sbc.w	r5, r3, fp
 8005da0:	f04f 0200 	mov.w	r2, #0
 8005da4:	f04f 0300 	mov.w	r3, #0
 8005da8:	00eb      	lsls	r3, r5, #3
 8005daa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dae:	00e2      	lsls	r2, r4, #3
 8005db0:	4614      	mov	r4, r2
 8005db2:	461d      	mov	r5, r3
 8005db4:	4643      	mov	r3, r8
 8005db6:	18e3      	adds	r3, r4, r3
 8005db8:	603b      	str	r3, [r7, #0]
 8005dba:	464b      	mov	r3, r9
 8005dbc:	eb45 0303 	adc.w	r3, r5, r3
 8005dc0:	607b      	str	r3, [r7, #4]
 8005dc2:	f04f 0200 	mov.w	r2, #0
 8005dc6:	f04f 0300 	mov.w	r3, #0
 8005dca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005dce:	4629      	mov	r1, r5
 8005dd0:	028b      	lsls	r3, r1, #10
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005dd8:	4621      	mov	r1, r4
 8005dda:	028a      	lsls	r2, r1, #10
 8005ddc:	4610      	mov	r0, r2
 8005dde:	4619      	mov	r1, r3
 8005de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005de2:	2200      	movs	r2, #0
 8005de4:	61bb      	str	r3, [r7, #24]
 8005de6:	61fa      	str	r2, [r7, #28]
 8005de8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dec:	f7fa fa50 	bl	8000290 <__aeabi_uldivmod>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4613      	mov	r3, r2
 8005df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005df8:	4b0b      	ldr	r3, [pc, #44]	@ (8005e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	0c1b      	lsrs	r3, r3, #16
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	3301      	adds	r3, #1
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005e08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e12:	e002      	b.n	8005e1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e14:	4b05      	ldr	r3, [pc, #20]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0x204>)
 8005e16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3750      	adds	r7, #80	@ 0x50
 8005e20:	46bd      	mov	sp, r7
 8005e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e26:	bf00      	nop
 8005e28:	40023800 	.word	0x40023800
 8005e2c:	00f42400 	.word	0x00f42400
 8005e30:	007a1200 	.word	0x007a1200

08005e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e34:	b480      	push	{r7}
 8005e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e38:	4b03      	ldr	r3, [pc, #12]	@ (8005e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	20000058 	.word	0x20000058

08005e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e50:	f7ff fff0 	bl	8005e34 <HAL_RCC_GetHCLKFreq>
 8005e54:	4602      	mov	r2, r0
 8005e56:	4b05      	ldr	r3, [pc, #20]	@ (8005e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	0a9b      	lsrs	r3, r3, #10
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	4903      	ldr	r1, [pc, #12]	@ (8005e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e62:	5ccb      	ldrb	r3, [r1, r3]
 8005e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	40023800 	.word	0x40023800
 8005e70:	08008cb8 	.word	0x08008cb8

08005e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e78:	f7ff ffdc 	bl	8005e34 <HAL_RCC_GetHCLKFreq>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	4b05      	ldr	r3, [pc, #20]	@ (8005e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	0b5b      	lsrs	r3, r3, #13
 8005e84:	f003 0307 	and.w	r3, r3, #7
 8005e88:	4903      	ldr	r1, [pc, #12]	@ (8005e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e8a:	5ccb      	ldrb	r3, [r1, r3]
 8005e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	40023800 	.word	0x40023800
 8005e98:	08008cb8 	.word	0x08008cb8

08005e9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	220f      	movs	r2, #15
 8005eaa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005eac:	4b12      	ldr	r3, [pc, #72]	@ (8005ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f003 0203 	and.w	r2, r3, #3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8005ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005ed0:	4b09      	ldr	r3, [pc, #36]	@ (8005ef8 <HAL_RCC_GetClockConfig+0x5c>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	08db      	lsrs	r3, r3, #3
 8005ed6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ede:	4b07      	ldr	r3, [pc, #28]	@ (8005efc <HAL_RCC_GetClockConfig+0x60>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 020f 	and.w	r2, r3, #15
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	601a      	str	r2, [r3, #0]
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	40023c00 	.word	0x40023c00

08005f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10b      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d105      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d075      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f34:	4b91      	ldr	r3, [pc, #580]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f3a:	f7fc fac7 	bl	80024cc <HAL_GetTick>
 8005f3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f40:	e008      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f42:	f7fc fac3 	bl	80024cc <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e189      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f54:	4b8a      	ldr	r3, [pc, #552]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1f0      	bne.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d009      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	019a      	lsls	r2, r3, #6
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	071b      	lsls	r3, r3, #28
 8005f78:	4981      	ldr	r1, [pc, #516]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d01f      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f8c:	4b7c      	ldr	r3, [pc, #496]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f92:	0f1b      	lsrs	r3, r3, #28
 8005f94:	f003 0307 	and.w	r3, r3, #7
 8005f98:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	019a      	lsls	r2, r3, #6
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	061b      	lsls	r3, r3, #24
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	071b      	lsls	r3, r3, #28
 8005fac:	4974      	ldr	r1, [pc, #464]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005fb4:	4b72      	ldr	r3, [pc, #456]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fba:	f023 021f 	bic.w	r2, r3, #31
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	496e      	ldr	r1, [pc, #440]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00d      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	019a      	lsls	r2, r3, #6
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	061b      	lsls	r3, r3, #24
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	071b      	lsls	r3, r3, #28
 8005fec:	4964      	ldr	r1, [pc, #400]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ff4:	4b61      	ldr	r3, [pc, #388]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ffa:	f7fc fa67 	bl	80024cc <HAL_GetTick>
 8005ffe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006000:	e008      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006002:	f7fc fa63 	bl	80024cc <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	2b02      	cmp	r3, #2
 800600e:	d901      	bls.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e129      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006014:	4b5a      	ldr	r3, [pc, #360]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d0f0      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b00      	cmp	r3, #0
 800602a:	d105      	bne.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006034:	2b00      	cmp	r3, #0
 8006036:	d079      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006038:	4b52      	ldr	r3, [pc, #328]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800603a:	2200      	movs	r2, #0
 800603c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800603e:	f7fc fa45 	bl	80024cc <HAL_GetTick>
 8006042:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006044:	e008      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006046:	f7fc fa41 	bl	80024cc <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d901      	bls.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e107      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006058:	4b49      	ldr	r3, [pc, #292]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006060:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006064:	d0ef      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0304 	and.w	r3, r3, #4
 800606e:	2b00      	cmp	r3, #0
 8006070:	d020      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006072:	4b43      	ldr	r3, [pc, #268]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006078:	0f1b      	lsrs	r3, r3, #28
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	019a      	lsls	r2, r3, #6
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	061b      	lsls	r3, r3, #24
 800608c:	431a      	orrs	r2, r3
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	071b      	lsls	r3, r3, #28
 8006092:	493b      	ldr	r1, [pc, #236]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006094:	4313      	orrs	r3, r2
 8006096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800609a:	4b39      	ldr	r3, [pc, #228]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800609c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060a0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	021b      	lsls	r3, r3, #8
 80060ac:	4934      	ldr	r1, [pc, #208]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0308 	and.w	r3, r3, #8
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01e      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80060c0:	4b2f      	ldr	r3, [pc, #188]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c6:	0e1b      	lsrs	r3, r3, #24
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	019a      	lsls	r2, r3, #6
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	061b      	lsls	r3, r3, #24
 80060d8:	431a      	orrs	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	071b      	lsls	r3, r3, #28
 80060e0:	4927      	ldr	r1, [pc, #156]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80060e8:	4b25      	ldr	r3, [pc, #148]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060ee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f6:	4922      	ldr	r1, [pc, #136]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80060fe:	4b21      	ldr	r3, [pc, #132]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006100:	2201      	movs	r2, #1
 8006102:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006104:	f7fc f9e2 	bl	80024cc <HAL_GetTick>
 8006108:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800610a:	e008      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800610c:	f7fc f9de 	bl	80024cc <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d901      	bls.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e0a4      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800611e:	4b18      	ldr	r3, [pc, #96]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006126:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800612a:	d1ef      	bne.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0320 	and.w	r3, r3, #32
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 808b 	beq.w	8006250 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800613a:	2300      	movs	r3, #0
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	4b10      	ldr	r3, [pc, #64]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006142:	4a0f      	ldr	r2, [pc, #60]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006148:	6413      	str	r3, [r2, #64]	@ 0x40
 800614a:	4b0d      	ldr	r3, [pc, #52]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800614c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006156:	4b0c      	ldr	r3, [pc, #48]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a0b      	ldr	r2, [pc, #44]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800615c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006160:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006162:	f7fc f9b3 	bl	80024cc <HAL_GetTick>
 8006166:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006168:	e010      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800616a:	f7fc f9af 	bl	80024cc <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d909      	bls.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e075      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800617c:	42470068 	.word	0x42470068
 8006180:	40023800 	.word	0x40023800
 8006184:	42470070 	.word	0x42470070
 8006188:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800618c:	4b38      	ldr	r3, [pc, #224]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0e8      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006198:	4b36      	ldr	r3, [pc, #216]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800619a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800619c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061a0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d02f      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d028      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061b6:	4b2f      	ldr	r3, [pc, #188]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061c0:	4b2d      	ldr	r3, [pc, #180]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80061c2:	2201      	movs	r2, #1
 80061c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061c6:	4b2c      	ldr	r3, [pc, #176]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80061cc:	4a29      	ldr	r2, [pc, #164]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061d2:	4b28      	ldr	r3, [pc, #160]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d114      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80061de:	f7fc f975 	bl	80024cc <HAL_GetTick>
 80061e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061e4:	e00a      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061e6:	f7fc f971 	bl	80024cc <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d901      	bls.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e035      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061fc:	4b1d      	ldr	r3, [pc, #116]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006200:	f003 0302 	and.w	r3, r3, #2
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0ee      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800620c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006210:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006214:	d10d      	bne.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006216:	4b17      	ldr	r3, [pc, #92]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006222:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006226:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800622a:	4912      	ldr	r1, [pc, #72]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800622c:	4313      	orrs	r3, r2
 800622e:	608b      	str	r3, [r1, #8]
 8006230:	e005      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006232:	4b10      	ldr	r3, [pc, #64]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	4a0f      	ldr	r2, [pc, #60]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006238:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800623c:	6093      	str	r3, [r2, #8]
 800623e:	4b0d      	ldr	r3, [pc, #52]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006240:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800624a:	490a      	ldr	r1, [pc, #40]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800624c:	4313      	orrs	r3, r2
 800624e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0310 	and.w	r3, r3, #16
 8006258:	2b00      	cmp	r3, #0
 800625a:	d004      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006262:	4b06      	ldr	r3, [pc, #24]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006264:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	40007000 	.word	0x40007000
 8006274:	40023800 	.word	0x40023800
 8006278:	42470e40 	.word	0x42470e40
 800627c:	424711e0 	.word	0x424711e0

08006280 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e025      	b.n	80062e0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d106      	bne.n	80062ae <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7fb f94b 	bl	8001544 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2202      	movs	r2, #2
 80062b2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	3304      	adds	r3, #4
 80062be:	4619      	mov	r1, r3
 80062c0:	4610      	mov	r0, r2
 80062c2:	f000 ffd3 	bl	800726c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6818      	ldr	r0, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	461a      	mov	r2, r3
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	f001 f828 	bl	8007326 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e07b      	b.n	80063f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d108      	bne.n	8006314 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800630a:	d009      	beq.n	8006320 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	61da      	str	r2, [r3, #28]
 8006312:	e005      	b.n	8006320 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d106      	bne.n	8006340 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7fa ff60 	bl	8001200 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006356:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006368:	431a      	orrs	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006372:	431a      	orrs	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	431a      	orrs	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	431a      	orrs	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006390:	431a      	orrs	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800639a:	431a      	orrs	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a4:	ea42 0103 	orr.w	r1, r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	0c1b      	lsrs	r3, r3, #16
 80063be:	f003 0104 	and.w	r1, r3, #4
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c6:	f003 0210 	and.w	r2, r3, #16
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	430a      	orrs	r2, r1
 80063d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	69da      	ldr	r2, [r3, #28]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b082      	sub	sp, #8
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e041      	b.n	8006490 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b00      	cmp	r3, #0
 8006416:	d106      	bne.n	8006426 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7fa ff35 	bl	8001290 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2202      	movs	r2, #2
 800642a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	3304      	adds	r3, #4
 8006436:	4619      	mov	r1, r3
 8006438:	4610      	mov	r0, r2
 800643a:	f000 fa7d 	bl	8006938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d001      	beq.n	80064b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e04e      	b.n	800654e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f042 0201 	orr.w	r2, r2, #1
 80064c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a23      	ldr	r2, [pc, #140]	@ (800655c <HAL_TIM_Base_Start_IT+0xc4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d022      	beq.n	8006518 <HAL_TIM_Base_Start_IT+0x80>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064da:	d01d      	beq.n	8006518 <HAL_TIM_Base_Start_IT+0x80>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a1f      	ldr	r2, [pc, #124]	@ (8006560 <HAL_TIM_Base_Start_IT+0xc8>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d018      	beq.n	8006518 <HAL_TIM_Base_Start_IT+0x80>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a1e      	ldr	r2, [pc, #120]	@ (8006564 <HAL_TIM_Base_Start_IT+0xcc>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d013      	beq.n	8006518 <HAL_TIM_Base_Start_IT+0x80>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006568 <HAL_TIM_Base_Start_IT+0xd0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d00e      	beq.n	8006518 <HAL_TIM_Base_Start_IT+0x80>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a1b      	ldr	r2, [pc, #108]	@ (800656c <HAL_TIM_Base_Start_IT+0xd4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d009      	beq.n	8006518 <HAL_TIM_Base_Start_IT+0x80>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a19      	ldr	r2, [pc, #100]	@ (8006570 <HAL_TIM_Base_Start_IT+0xd8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d004      	beq.n	8006518 <HAL_TIM_Base_Start_IT+0x80>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a18      	ldr	r2, [pc, #96]	@ (8006574 <HAL_TIM_Base_Start_IT+0xdc>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d111      	bne.n	800653c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b06      	cmp	r3, #6
 8006528:	d010      	beq.n	800654c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f042 0201 	orr.w	r2, r2, #1
 8006538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800653a:	e007      	b.n	800654c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 0201 	orr.w	r2, r2, #1
 800654a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	40010000 	.word	0x40010000
 8006560:	40000400 	.word	0x40000400
 8006564:	40000800 	.word	0x40000800
 8006568:	40000c00 	.word	0x40000c00
 800656c:	40010400 	.word	0x40010400
 8006570:	40014000 	.word	0x40014000
 8006574:	40001800 	.word	0x40001800

08006578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	2b00      	cmp	r3, #0
 8006598:	d020      	beq.n	80065dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d01b      	beq.n	80065dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f06f 0202 	mvn.w	r2, #2
 80065ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	f003 0303 	and.w	r3, r3, #3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f999 	bl	80068fa <HAL_TIM_IC_CaptureCallback>
 80065c8:	e005      	b.n	80065d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f98b 	bl	80068e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f99c 	bl	800690e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f003 0304 	and.w	r3, r3, #4
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d020      	beq.n	8006628 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d01b      	beq.n	8006628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f06f 0204 	mvn.w	r2, #4
 80065f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2202      	movs	r2, #2
 80065fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f973 	bl	80068fa <HAL_TIM_IC_CaptureCallback>
 8006614:	e005      	b.n	8006622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f965 	bl	80068e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f976 	bl	800690e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f003 0308 	and.w	r3, r3, #8
 800662e:	2b00      	cmp	r3, #0
 8006630:	d020      	beq.n	8006674 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f003 0308 	and.w	r3, r3, #8
 8006638:	2b00      	cmp	r3, #0
 800663a:	d01b      	beq.n	8006674 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f06f 0208 	mvn.w	r2, #8
 8006644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2204      	movs	r2, #4
 800664a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f94d 	bl	80068fa <HAL_TIM_IC_CaptureCallback>
 8006660:	e005      	b.n	800666e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f93f 	bl	80068e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f950 	bl	800690e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f003 0310 	and.w	r3, r3, #16
 800667a:	2b00      	cmp	r3, #0
 800667c:	d020      	beq.n	80066c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f003 0310 	and.w	r3, r3, #16
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01b      	beq.n	80066c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f06f 0210 	mvn.w	r2, #16
 8006690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2208      	movs	r2, #8
 8006696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f927 	bl	80068fa <HAL_TIM_IC_CaptureCallback>
 80066ac:	e005      	b.n	80066ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f919 	bl	80068e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f92a 	bl	800690e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00c      	beq.n	80066e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d007      	beq.n	80066e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0201 	mvn.w	r2, #1
 80066dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7fa fb6a 	bl	8000db8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00c      	beq.n	8006708 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fae4 	bl	8006cd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00c      	beq.n	800672c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006718:	2b00      	cmp	r3, #0
 800671a:	d007      	beq.n	800672c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f8fb 	bl	8006922 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f003 0320 	and.w	r3, r3, #32
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00c      	beq.n	8006750 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f003 0320 	and.w	r3, r3, #32
 800673c:	2b00      	cmp	r3, #0
 800673e:	d007      	beq.n	8006750 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f06f 0220 	mvn.w	r2, #32
 8006748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fab6 	bl	8006cbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006750:	bf00      	nop
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800676c:	2b01      	cmp	r3, #1
 800676e:	d101      	bne.n	8006774 <HAL_TIM_ConfigClockSource+0x1c>
 8006770:	2302      	movs	r3, #2
 8006772:	e0b4      	b.n	80068de <HAL_TIM_ConfigClockSource+0x186>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2202      	movs	r2, #2
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800679a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067ac:	d03e      	beq.n	800682c <HAL_TIM_ConfigClockSource+0xd4>
 80067ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067b2:	f200 8087 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x16c>
 80067b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067ba:	f000 8086 	beq.w	80068ca <HAL_TIM_ConfigClockSource+0x172>
 80067be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067c2:	d87f      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x16c>
 80067c4:	2b70      	cmp	r3, #112	@ 0x70
 80067c6:	d01a      	beq.n	80067fe <HAL_TIM_ConfigClockSource+0xa6>
 80067c8:	2b70      	cmp	r3, #112	@ 0x70
 80067ca:	d87b      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x16c>
 80067cc:	2b60      	cmp	r3, #96	@ 0x60
 80067ce:	d050      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x11a>
 80067d0:	2b60      	cmp	r3, #96	@ 0x60
 80067d2:	d877      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x16c>
 80067d4:	2b50      	cmp	r3, #80	@ 0x50
 80067d6:	d03c      	beq.n	8006852 <HAL_TIM_ConfigClockSource+0xfa>
 80067d8:	2b50      	cmp	r3, #80	@ 0x50
 80067da:	d873      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x16c>
 80067dc:	2b40      	cmp	r3, #64	@ 0x40
 80067de:	d058      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0x13a>
 80067e0:	2b40      	cmp	r3, #64	@ 0x40
 80067e2:	d86f      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x16c>
 80067e4:	2b30      	cmp	r3, #48	@ 0x30
 80067e6:	d064      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x15a>
 80067e8:	2b30      	cmp	r3, #48	@ 0x30
 80067ea:	d86b      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x16c>
 80067ec:	2b20      	cmp	r3, #32
 80067ee:	d060      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x15a>
 80067f0:	2b20      	cmp	r3, #32
 80067f2:	d867      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x16c>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d05c      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x15a>
 80067f8:	2b10      	cmp	r3, #16
 80067fa:	d05a      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x15a>
 80067fc:	e062      	b.n	80068c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800680e:	f000 f9b9 	bl	8006b84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006820:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	609a      	str	r2, [r3, #8]
      break;
 800682a:	e04f      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800683c:	f000 f9a2 	bl	8006b84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689a      	ldr	r2, [r3, #8]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800684e:	609a      	str	r2, [r3, #8]
      break;
 8006850:	e03c      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800685e:	461a      	mov	r2, r3
 8006860:	f000 f916 	bl	8006a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2150      	movs	r1, #80	@ 0x50
 800686a:	4618      	mov	r0, r3
 800686c:	f000 f96f 	bl	8006b4e <TIM_ITRx_SetConfig>
      break;
 8006870:	e02c      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800687e:	461a      	mov	r2, r3
 8006880:	f000 f935 	bl	8006aee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2160      	movs	r1, #96	@ 0x60
 800688a:	4618      	mov	r0, r3
 800688c:	f000 f95f 	bl	8006b4e <TIM_ITRx_SetConfig>
      break;
 8006890:	e01c      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800689e:	461a      	mov	r2, r3
 80068a0:	f000 f8f6 	bl	8006a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2140      	movs	r1, #64	@ 0x40
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 f94f 	bl	8006b4e <TIM_ITRx_SetConfig>
      break;
 80068b0:	e00c      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4619      	mov	r1, r3
 80068bc:	4610      	mov	r0, r2
 80068be:	f000 f946 	bl	8006b4e <TIM_ITRx_SetConfig>
      break;
 80068c2:	e003      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	73fb      	strb	r3, [r7, #15]
      break;
 80068c8:	e000      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80068ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068ee:	bf00      	nop
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b083      	sub	sp, #12
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006902:	bf00      	nop
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800692a:	bf00      	nop
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
	...

08006938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a46      	ldr	r2, [pc, #280]	@ (8006a64 <TIM_Base_SetConfig+0x12c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d013      	beq.n	8006978 <TIM_Base_SetConfig+0x40>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006956:	d00f      	beq.n	8006978 <TIM_Base_SetConfig+0x40>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a43      	ldr	r2, [pc, #268]	@ (8006a68 <TIM_Base_SetConfig+0x130>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d00b      	beq.n	8006978 <TIM_Base_SetConfig+0x40>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a42      	ldr	r2, [pc, #264]	@ (8006a6c <TIM_Base_SetConfig+0x134>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d007      	beq.n	8006978 <TIM_Base_SetConfig+0x40>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a41      	ldr	r2, [pc, #260]	@ (8006a70 <TIM_Base_SetConfig+0x138>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d003      	beq.n	8006978 <TIM_Base_SetConfig+0x40>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a40      	ldr	r2, [pc, #256]	@ (8006a74 <TIM_Base_SetConfig+0x13c>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d108      	bne.n	800698a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800697e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a35      	ldr	r2, [pc, #212]	@ (8006a64 <TIM_Base_SetConfig+0x12c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d02b      	beq.n	80069ea <TIM_Base_SetConfig+0xb2>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006998:	d027      	beq.n	80069ea <TIM_Base_SetConfig+0xb2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a32      	ldr	r2, [pc, #200]	@ (8006a68 <TIM_Base_SetConfig+0x130>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d023      	beq.n	80069ea <TIM_Base_SetConfig+0xb2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a31      	ldr	r2, [pc, #196]	@ (8006a6c <TIM_Base_SetConfig+0x134>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d01f      	beq.n	80069ea <TIM_Base_SetConfig+0xb2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a30      	ldr	r2, [pc, #192]	@ (8006a70 <TIM_Base_SetConfig+0x138>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d01b      	beq.n	80069ea <TIM_Base_SetConfig+0xb2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a2f      	ldr	r2, [pc, #188]	@ (8006a74 <TIM_Base_SetConfig+0x13c>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d017      	beq.n	80069ea <TIM_Base_SetConfig+0xb2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a2e      	ldr	r2, [pc, #184]	@ (8006a78 <TIM_Base_SetConfig+0x140>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d013      	beq.n	80069ea <TIM_Base_SetConfig+0xb2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a2d      	ldr	r2, [pc, #180]	@ (8006a7c <TIM_Base_SetConfig+0x144>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d00f      	beq.n	80069ea <TIM_Base_SetConfig+0xb2>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a2c      	ldr	r2, [pc, #176]	@ (8006a80 <TIM_Base_SetConfig+0x148>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d00b      	beq.n	80069ea <TIM_Base_SetConfig+0xb2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a2b      	ldr	r2, [pc, #172]	@ (8006a84 <TIM_Base_SetConfig+0x14c>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d007      	beq.n	80069ea <TIM_Base_SetConfig+0xb2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a2a      	ldr	r2, [pc, #168]	@ (8006a88 <TIM_Base_SetConfig+0x150>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d003      	beq.n	80069ea <TIM_Base_SetConfig+0xb2>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a29      	ldr	r2, [pc, #164]	@ (8006a8c <TIM_Base_SetConfig+0x154>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d108      	bne.n	80069fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	689a      	ldr	r2, [r3, #8]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a10      	ldr	r2, [pc, #64]	@ (8006a64 <TIM_Base_SetConfig+0x12c>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d003      	beq.n	8006a30 <TIM_Base_SetConfig+0xf8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a12      	ldr	r2, [pc, #72]	@ (8006a74 <TIM_Base_SetConfig+0x13c>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d103      	bne.n	8006a38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	691a      	ldr	r2, [r3, #16]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d105      	bne.n	8006a56 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f023 0201 	bic.w	r2, r3, #1
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	611a      	str	r2, [r3, #16]
  }
}
 8006a56:	bf00      	nop
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	40010000 	.word	0x40010000
 8006a68:	40000400 	.word	0x40000400
 8006a6c:	40000800 	.word	0x40000800
 8006a70:	40000c00 	.word	0x40000c00
 8006a74:	40010400 	.word	0x40010400
 8006a78:	40014000 	.word	0x40014000
 8006a7c:	40014400 	.word	0x40014400
 8006a80:	40014800 	.word	0x40014800
 8006a84:	40001800 	.word	0x40001800
 8006a88:	40001c00 	.word	0x40001c00
 8006a8c:	40002000 	.word	0x40002000

08006a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	f023 0201 	bic.w	r2, r3, #1
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	011b      	lsls	r3, r3, #4
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f023 030a 	bic.w	r3, r3, #10
 8006acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	621a      	str	r2, [r3, #32]
}
 8006ae2:	bf00      	nop
 8006ae4:	371c      	adds	r7, #28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b087      	sub	sp, #28
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	60f8      	str	r0, [r7, #12]
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	f023 0210 	bic.w	r2, r3, #16
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	031b      	lsls	r3, r3, #12
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	011b      	lsls	r3, r3, #4
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	621a      	str	r2, [r3, #32]
}
 8006b42:	bf00      	nop
 8006b44:	371c      	adds	r7, #28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b085      	sub	sp, #20
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	f043 0307 	orr.w	r3, r3, #7
 8006b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	609a      	str	r2, [r3, #8]
}
 8006b78:	bf00      	nop
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	021a      	lsls	r2, r3, #8
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	609a      	str	r2, [r3, #8]
}
 8006bb8:	bf00      	nop
 8006bba:	371c      	adds	r7, #28
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d101      	bne.n	8006bdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	e05a      	b.n	8006c92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a21      	ldr	r2, [pc, #132]	@ (8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d022      	beq.n	8006c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c28:	d01d      	beq.n	8006c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d018      	beq.n	8006c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a1b      	ldr	r2, [pc, #108]	@ (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d013      	beq.n	8006c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a1a      	ldr	r2, [pc, #104]	@ (8006cac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d00e      	beq.n	8006c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a18      	ldr	r2, [pc, #96]	@ (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d009      	beq.n	8006c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a17      	ldr	r2, [pc, #92]	@ (8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d004      	beq.n	8006c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a15      	ldr	r2, [pc, #84]	@ (8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d10c      	bne.n	8006c80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	40010000 	.word	0x40010000
 8006ca4:	40000400 	.word	0x40000400
 8006ca8:	40000800 	.word	0x40000800
 8006cac:	40000c00 	.word	0x40000c00
 8006cb0:	40010400 	.word	0x40010400
 8006cb4:	40014000 	.word	0x40014000
 8006cb8:	40001800 	.word	0x40001800

08006cbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e042      	b.n	8006d7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d106      	bne.n	8006d10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7fa fae2 	bl	80012d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2224      	movs	r2, #36	@ 0x24
 8006d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68da      	ldr	r2, [r3, #12]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f82b 	bl	8006d84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	691a      	ldr	r2, [r3, #16]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	695a      	ldr	r2, [r3, #20]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68da      	ldr	r2, [r3, #12]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2220      	movs	r2, #32
 8006d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d88:	b0c0      	sub	sp, #256	@ 0x100
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da0:	68d9      	ldr	r1, [r3, #12]
 8006da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	ea40 0301 	orr.w	r3, r0, r1
 8006dac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	431a      	orrs	r2, r3
 8006dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006ddc:	f021 010c 	bic.w	r1, r1, #12
 8006de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006dea:	430b      	orrs	r3, r1
 8006dec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dfe:	6999      	ldr	r1, [r3, #24]
 8006e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	ea40 0301 	orr.w	r3, r0, r1
 8006e0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	4b8f      	ldr	r3, [pc, #572]	@ (8007050 <UART_SetConfig+0x2cc>)
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d005      	beq.n	8006e24 <UART_SetConfig+0xa0>
 8006e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	4b8d      	ldr	r3, [pc, #564]	@ (8007054 <UART_SetConfig+0x2d0>)
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d104      	bne.n	8006e2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e24:	f7ff f826 	bl	8005e74 <HAL_RCC_GetPCLK2Freq>
 8006e28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006e2c:	e003      	b.n	8006e36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e2e:	f7ff f80d 	bl	8005e4c <HAL_RCC_GetPCLK1Freq>
 8006e32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e40:	f040 810c 	bne.w	800705c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e56:	4622      	mov	r2, r4
 8006e58:	462b      	mov	r3, r5
 8006e5a:	1891      	adds	r1, r2, r2
 8006e5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006e5e:	415b      	adcs	r3, r3
 8006e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e66:	4621      	mov	r1, r4
 8006e68:	eb12 0801 	adds.w	r8, r2, r1
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	eb43 0901 	adc.w	r9, r3, r1
 8006e72:	f04f 0200 	mov.w	r2, #0
 8006e76:	f04f 0300 	mov.w	r3, #0
 8006e7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e86:	4690      	mov	r8, r2
 8006e88:	4699      	mov	r9, r3
 8006e8a:	4623      	mov	r3, r4
 8006e8c:	eb18 0303 	adds.w	r3, r8, r3
 8006e90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e94:	462b      	mov	r3, r5
 8006e96:	eb49 0303 	adc.w	r3, r9, r3
 8006e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006eaa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006eae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	18db      	adds	r3, r3, r3
 8006eb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006eb8:	4613      	mov	r3, r2
 8006eba:	eb42 0303 	adc.w	r3, r2, r3
 8006ebe:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ec0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006ec4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006ec8:	f7f9 f9e2 	bl	8000290 <__aeabi_uldivmod>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4b61      	ldr	r3, [pc, #388]	@ (8007058 <UART_SetConfig+0x2d4>)
 8006ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ed6:	095b      	lsrs	r3, r3, #5
 8006ed8:	011c      	lsls	r4, r3, #4
 8006eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ee4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006ee8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006eec:	4642      	mov	r2, r8
 8006eee:	464b      	mov	r3, r9
 8006ef0:	1891      	adds	r1, r2, r2
 8006ef2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ef4:	415b      	adcs	r3, r3
 8006ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ef8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006efc:	4641      	mov	r1, r8
 8006efe:	eb12 0a01 	adds.w	sl, r2, r1
 8006f02:	4649      	mov	r1, r9
 8006f04:	eb43 0b01 	adc.w	fp, r3, r1
 8006f08:	f04f 0200 	mov.w	r2, #0
 8006f0c:	f04f 0300 	mov.w	r3, #0
 8006f10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f1c:	4692      	mov	sl, r2
 8006f1e:	469b      	mov	fp, r3
 8006f20:	4643      	mov	r3, r8
 8006f22:	eb1a 0303 	adds.w	r3, sl, r3
 8006f26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f2a:	464b      	mov	r3, r9
 8006f2c:	eb4b 0303 	adc.w	r3, fp, r3
 8006f30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006f44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	18db      	adds	r3, r3, r3
 8006f4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f4e:	4613      	mov	r3, r2
 8006f50:	eb42 0303 	adc.w	r3, r2, r3
 8006f54:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006f5e:	f7f9 f997 	bl	8000290 <__aeabi_uldivmod>
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	4611      	mov	r1, r2
 8006f68:	4b3b      	ldr	r3, [pc, #236]	@ (8007058 <UART_SetConfig+0x2d4>)
 8006f6a:	fba3 2301 	umull	r2, r3, r3, r1
 8006f6e:	095b      	lsrs	r3, r3, #5
 8006f70:	2264      	movs	r2, #100	@ 0x64
 8006f72:	fb02 f303 	mul.w	r3, r2, r3
 8006f76:	1acb      	subs	r3, r1, r3
 8006f78:	00db      	lsls	r3, r3, #3
 8006f7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006f7e:	4b36      	ldr	r3, [pc, #216]	@ (8007058 <UART_SetConfig+0x2d4>)
 8006f80:	fba3 2302 	umull	r2, r3, r3, r2
 8006f84:	095b      	lsrs	r3, r3, #5
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006f8c:	441c      	add	r4, r3
 8006f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f92:	2200      	movs	r2, #0
 8006f94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f98:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006f9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006fa0:	4642      	mov	r2, r8
 8006fa2:	464b      	mov	r3, r9
 8006fa4:	1891      	adds	r1, r2, r2
 8006fa6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006fa8:	415b      	adcs	r3, r3
 8006faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006fb0:	4641      	mov	r1, r8
 8006fb2:	1851      	adds	r1, r2, r1
 8006fb4:	6339      	str	r1, [r7, #48]	@ 0x30
 8006fb6:	4649      	mov	r1, r9
 8006fb8:	414b      	adcs	r3, r1
 8006fba:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fbc:	f04f 0200 	mov.w	r2, #0
 8006fc0:	f04f 0300 	mov.w	r3, #0
 8006fc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006fc8:	4659      	mov	r1, fp
 8006fca:	00cb      	lsls	r3, r1, #3
 8006fcc:	4651      	mov	r1, sl
 8006fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fd2:	4651      	mov	r1, sl
 8006fd4:	00ca      	lsls	r2, r1, #3
 8006fd6:	4610      	mov	r0, r2
 8006fd8:	4619      	mov	r1, r3
 8006fda:	4603      	mov	r3, r0
 8006fdc:	4642      	mov	r2, r8
 8006fde:	189b      	adds	r3, r3, r2
 8006fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fe4:	464b      	mov	r3, r9
 8006fe6:	460a      	mov	r2, r1
 8006fe8:	eb42 0303 	adc.w	r3, r2, r3
 8006fec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ffc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007000:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007004:	460b      	mov	r3, r1
 8007006:	18db      	adds	r3, r3, r3
 8007008:	62bb      	str	r3, [r7, #40]	@ 0x28
 800700a:	4613      	mov	r3, r2
 800700c:	eb42 0303 	adc.w	r3, r2, r3
 8007010:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007012:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007016:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800701a:	f7f9 f939 	bl	8000290 <__aeabi_uldivmod>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	4b0d      	ldr	r3, [pc, #52]	@ (8007058 <UART_SetConfig+0x2d4>)
 8007024:	fba3 1302 	umull	r1, r3, r3, r2
 8007028:	095b      	lsrs	r3, r3, #5
 800702a:	2164      	movs	r1, #100	@ 0x64
 800702c:	fb01 f303 	mul.w	r3, r1, r3
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	00db      	lsls	r3, r3, #3
 8007034:	3332      	adds	r3, #50	@ 0x32
 8007036:	4a08      	ldr	r2, [pc, #32]	@ (8007058 <UART_SetConfig+0x2d4>)
 8007038:	fba2 2303 	umull	r2, r3, r2, r3
 800703c:	095b      	lsrs	r3, r3, #5
 800703e:	f003 0207 	and.w	r2, r3, #7
 8007042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4422      	add	r2, r4
 800704a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800704c:	e106      	b.n	800725c <UART_SetConfig+0x4d8>
 800704e:	bf00      	nop
 8007050:	40011000 	.word	0x40011000
 8007054:	40011400 	.word	0x40011400
 8007058:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800705c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007060:	2200      	movs	r2, #0
 8007062:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007066:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800706a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800706e:	4642      	mov	r2, r8
 8007070:	464b      	mov	r3, r9
 8007072:	1891      	adds	r1, r2, r2
 8007074:	6239      	str	r1, [r7, #32]
 8007076:	415b      	adcs	r3, r3
 8007078:	627b      	str	r3, [r7, #36]	@ 0x24
 800707a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800707e:	4641      	mov	r1, r8
 8007080:	1854      	adds	r4, r2, r1
 8007082:	4649      	mov	r1, r9
 8007084:	eb43 0501 	adc.w	r5, r3, r1
 8007088:	f04f 0200 	mov.w	r2, #0
 800708c:	f04f 0300 	mov.w	r3, #0
 8007090:	00eb      	lsls	r3, r5, #3
 8007092:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007096:	00e2      	lsls	r2, r4, #3
 8007098:	4614      	mov	r4, r2
 800709a:	461d      	mov	r5, r3
 800709c:	4643      	mov	r3, r8
 800709e:	18e3      	adds	r3, r4, r3
 80070a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070a4:	464b      	mov	r3, r9
 80070a6:	eb45 0303 	adc.w	r3, r5, r3
 80070aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80070be:	f04f 0200 	mov.w	r2, #0
 80070c2:	f04f 0300 	mov.w	r3, #0
 80070c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80070ca:	4629      	mov	r1, r5
 80070cc:	008b      	lsls	r3, r1, #2
 80070ce:	4621      	mov	r1, r4
 80070d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070d4:	4621      	mov	r1, r4
 80070d6:	008a      	lsls	r2, r1, #2
 80070d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80070dc:	f7f9 f8d8 	bl	8000290 <__aeabi_uldivmod>
 80070e0:	4602      	mov	r2, r0
 80070e2:	460b      	mov	r3, r1
 80070e4:	4b60      	ldr	r3, [pc, #384]	@ (8007268 <UART_SetConfig+0x4e4>)
 80070e6:	fba3 2302 	umull	r2, r3, r3, r2
 80070ea:	095b      	lsrs	r3, r3, #5
 80070ec:	011c      	lsls	r4, r3, #4
 80070ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80070fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007100:	4642      	mov	r2, r8
 8007102:	464b      	mov	r3, r9
 8007104:	1891      	adds	r1, r2, r2
 8007106:	61b9      	str	r1, [r7, #24]
 8007108:	415b      	adcs	r3, r3
 800710a:	61fb      	str	r3, [r7, #28]
 800710c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007110:	4641      	mov	r1, r8
 8007112:	1851      	adds	r1, r2, r1
 8007114:	6139      	str	r1, [r7, #16]
 8007116:	4649      	mov	r1, r9
 8007118:	414b      	adcs	r3, r1
 800711a:	617b      	str	r3, [r7, #20]
 800711c:	f04f 0200 	mov.w	r2, #0
 8007120:	f04f 0300 	mov.w	r3, #0
 8007124:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007128:	4659      	mov	r1, fp
 800712a:	00cb      	lsls	r3, r1, #3
 800712c:	4651      	mov	r1, sl
 800712e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007132:	4651      	mov	r1, sl
 8007134:	00ca      	lsls	r2, r1, #3
 8007136:	4610      	mov	r0, r2
 8007138:	4619      	mov	r1, r3
 800713a:	4603      	mov	r3, r0
 800713c:	4642      	mov	r2, r8
 800713e:	189b      	adds	r3, r3, r2
 8007140:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007144:	464b      	mov	r3, r9
 8007146:	460a      	mov	r2, r1
 8007148:	eb42 0303 	adc.w	r3, r2, r3
 800714c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	67bb      	str	r3, [r7, #120]	@ 0x78
 800715a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800715c:	f04f 0200 	mov.w	r2, #0
 8007160:	f04f 0300 	mov.w	r3, #0
 8007164:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007168:	4649      	mov	r1, r9
 800716a:	008b      	lsls	r3, r1, #2
 800716c:	4641      	mov	r1, r8
 800716e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007172:	4641      	mov	r1, r8
 8007174:	008a      	lsls	r2, r1, #2
 8007176:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800717a:	f7f9 f889 	bl	8000290 <__aeabi_uldivmod>
 800717e:	4602      	mov	r2, r0
 8007180:	460b      	mov	r3, r1
 8007182:	4611      	mov	r1, r2
 8007184:	4b38      	ldr	r3, [pc, #224]	@ (8007268 <UART_SetConfig+0x4e4>)
 8007186:	fba3 2301 	umull	r2, r3, r3, r1
 800718a:	095b      	lsrs	r3, r3, #5
 800718c:	2264      	movs	r2, #100	@ 0x64
 800718e:	fb02 f303 	mul.w	r3, r2, r3
 8007192:	1acb      	subs	r3, r1, r3
 8007194:	011b      	lsls	r3, r3, #4
 8007196:	3332      	adds	r3, #50	@ 0x32
 8007198:	4a33      	ldr	r2, [pc, #204]	@ (8007268 <UART_SetConfig+0x4e4>)
 800719a:	fba2 2303 	umull	r2, r3, r2, r3
 800719e:	095b      	lsrs	r3, r3, #5
 80071a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80071a4:	441c      	add	r4, r3
 80071a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071aa:	2200      	movs	r2, #0
 80071ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80071ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80071b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80071b4:	4642      	mov	r2, r8
 80071b6:	464b      	mov	r3, r9
 80071b8:	1891      	adds	r1, r2, r2
 80071ba:	60b9      	str	r1, [r7, #8]
 80071bc:	415b      	adcs	r3, r3
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071c4:	4641      	mov	r1, r8
 80071c6:	1851      	adds	r1, r2, r1
 80071c8:	6039      	str	r1, [r7, #0]
 80071ca:	4649      	mov	r1, r9
 80071cc:	414b      	adcs	r3, r1
 80071ce:	607b      	str	r3, [r7, #4]
 80071d0:	f04f 0200 	mov.w	r2, #0
 80071d4:	f04f 0300 	mov.w	r3, #0
 80071d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071dc:	4659      	mov	r1, fp
 80071de:	00cb      	lsls	r3, r1, #3
 80071e0:	4651      	mov	r1, sl
 80071e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071e6:	4651      	mov	r1, sl
 80071e8:	00ca      	lsls	r2, r1, #3
 80071ea:	4610      	mov	r0, r2
 80071ec:	4619      	mov	r1, r3
 80071ee:	4603      	mov	r3, r0
 80071f0:	4642      	mov	r2, r8
 80071f2:	189b      	adds	r3, r3, r2
 80071f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071f6:	464b      	mov	r3, r9
 80071f8:	460a      	mov	r2, r1
 80071fa:	eb42 0303 	adc.w	r3, r2, r3
 80071fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	663b      	str	r3, [r7, #96]	@ 0x60
 800720a:	667a      	str	r2, [r7, #100]	@ 0x64
 800720c:	f04f 0200 	mov.w	r2, #0
 8007210:	f04f 0300 	mov.w	r3, #0
 8007214:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007218:	4649      	mov	r1, r9
 800721a:	008b      	lsls	r3, r1, #2
 800721c:	4641      	mov	r1, r8
 800721e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007222:	4641      	mov	r1, r8
 8007224:	008a      	lsls	r2, r1, #2
 8007226:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800722a:	f7f9 f831 	bl	8000290 <__aeabi_uldivmod>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	4b0d      	ldr	r3, [pc, #52]	@ (8007268 <UART_SetConfig+0x4e4>)
 8007234:	fba3 1302 	umull	r1, r3, r3, r2
 8007238:	095b      	lsrs	r3, r3, #5
 800723a:	2164      	movs	r1, #100	@ 0x64
 800723c:	fb01 f303 	mul.w	r3, r1, r3
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	3332      	adds	r3, #50	@ 0x32
 8007246:	4a08      	ldr	r2, [pc, #32]	@ (8007268 <UART_SetConfig+0x4e4>)
 8007248:	fba2 2303 	umull	r2, r3, r2, r3
 800724c:	095b      	lsrs	r3, r3, #5
 800724e:	f003 020f 	and.w	r2, r3, #15
 8007252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4422      	add	r2, r4
 800725a:	609a      	str	r2, [r3, #8]
}
 800725c:	bf00      	nop
 800725e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007262:	46bd      	mov	sp, r7
 8007264:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007268:	51eb851f 	.word	0x51eb851f

0800726c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d123      	bne.n	80072c6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007286:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	6851      	ldr	r1, [r2, #4]
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	6892      	ldr	r2, [r2, #8]
 8007292:	4311      	orrs	r1, r2
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	68d2      	ldr	r2, [r2, #12]
 8007298:	4311      	orrs	r1, r2
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	6912      	ldr	r2, [r2, #16]
 800729e:	4311      	orrs	r1, r2
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	6952      	ldr	r2, [r2, #20]
 80072a4:	4311      	orrs	r1, r2
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	6992      	ldr	r2, [r2, #24]
 80072aa:	4311      	orrs	r1, r2
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	69d2      	ldr	r2, [r2, #28]
 80072b0:	4311      	orrs	r1, r2
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	6a12      	ldr	r2, [r2, #32]
 80072b6:	4311      	orrs	r1, r2
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80072bc:	430a      	orrs	r2, r1
 80072be:	431a      	orrs	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	e028      	b.n	8007318 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	69d9      	ldr	r1, [r3, #28]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	4319      	orrs	r1, r3
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072dc:	430b      	orrs	r3, r1
 80072de:	431a      	orrs	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80072ec:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80072f0:	683a      	ldr	r2, [r7, #0]
 80072f2:	6851      	ldr	r1, [r2, #4]
 80072f4:	683a      	ldr	r2, [r7, #0]
 80072f6:	6892      	ldr	r2, [r2, #8]
 80072f8:	4311      	orrs	r1, r2
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	68d2      	ldr	r2, [r2, #12]
 80072fe:	4311      	orrs	r1, r2
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	6912      	ldr	r2, [r2, #16]
 8007304:	4311      	orrs	r1, r2
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	6952      	ldr	r2, [r2, #20]
 800730a:	4311      	orrs	r1, r2
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	6992      	ldr	r2, [r2, #24]
 8007310:	430a      	orrs	r2, r1
 8007312:	431a      	orrs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007326:	b480      	push	{r7}
 8007328:	b085      	sub	sp, #20
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d128      	bne.n	800738a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	1e59      	subs	r1, r3, #1
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	3b01      	subs	r3, #1
 800734c:	011b      	lsls	r3, r3, #4
 800734e:	4319      	orrs	r1, r3
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	3b01      	subs	r3, #1
 8007356:	021b      	lsls	r3, r3, #8
 8007358:	4319      	orrs	r1, r3
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	3b01      	subs	r3, #1
 8007360:	031b      	lsls	r3, r3, #12
 8007362:	4319      	orrs	r1, r3
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	3b01      	subs	r3, #1
 800736a:	041b      	lsls	r3, r3, #16
 800736c:	4319      	orrs	r1, r3
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	3b01      	subs	r3, #1
 8007374:	051b      	lsls	r3, r3, #20
 8007376:	4319      	orrs	r1, r3
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	3b01      	subs	r3, #1
 800737e:	061b      	lsls	r3, r3, #24
 8007380:	430b      	orrs	r3, r1
 8007382:	431a      	orrs	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	609a      	str	r2, [r3, #8]
 8007388:	e02f      	b.n	80073ea <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007392:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	68d2      	ldr	r2, [r2, #12]
 800739a:	3a01      	subs	r2, #1
 800739c:	0311      	lsls	r1, r2, #12
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	6952      	ldr	r2, [r2, #20]
 80073a2:	3a01      	subs	r2, #1
 80073a4:	0512      	lsls	r2, r2, #20
 80073a6:	430a      	orrs	r2, r1
 80073a8:	431a      	orrs	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	1e59      	subs	r1, r3, #1
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	3b01      	subs	r3, #1
 80073c2:	011b      	lsls	r3, r3, #4
 80073c4:	4319      	orrs	r1, r3
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	3b01      	subs	r3, #1
 80073cc:	021b      	lsls	r3, r3, #8
 80073ce:	4319      	orrs	r1, r3
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	3b01      	subs	r3, #1
 80073d6:	041b      	lsls	r3, r3, #16
 80073d8:	4319      	orrs	r1, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	3b01      	subs	r3, #1
 80073e0:	061b      	lsls	r3, r3, #24
 80073e2:	430b      	orrs	r3, r1
 80073e4:	431a      	orrs	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3714      	adds	r7, #20
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073f8:	b084      	sub	sp, #16
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	f107 001c 	add.w	r0, r7, #28
 8007406:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800740a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800740e:	2b01      	cmp	r3, #1
 8007410:	d123      	bne.n	800745a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007416:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007426:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800743a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800743e:	2b01      	cmp	r3, #1
 8007440:	d105      	bne.n	800744e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f98d 	bl	800776e <USB_CoreReset>
 8007454:	4603      	mov	r3, r0
 8007456:	73fb      	strb	r3, [r7, #15]
 8007458:	e01b      	b.n	8007492 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f981 	bl	800776e <USB_CoreReset>
 800746c:	4603      	mov	r3, r0
 800746e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007470:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007474:	2b00      	cmp	r3, #0
 8007476:	d106      	bne.n	8007486 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800747c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	639a      	str	r2, [r3, #56]	@ 0x38
 8007484:	e005      	b.n	8007492 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800748a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007492:	7fbb      	ldrb	r3, [r7, #30]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d10b      	bne.n	80074b0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f043 0206 	orr.w	r2, r3, #6
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f043 0220 	orr.w	r2, r3, #32
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074bc:	b004      	add	sp, #16
 80074be:	4770      	bx	lr

080074c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f023 0201 	bic.w	r2, r3, #1
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	460b      	mov	r3, r1
 80074ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80074fe:	78fb      	ldrb	r3, [r7, #3]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d115      	bne.n	8007530 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007510:	200a      	movs	r0, #10
 8007512:	f7fa ffe7 	bl	80024e4 <HAL_Delay>
      ms += 10U;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	330a      	adds	r3, #10
 800751a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f918 	bl	8007752 <USB_GetMode>
 8007522:	4603      	mov	r3, r0
 8007524:	2b01      	cmp	r3, #1
 8007526:	d01e      	beq.n	8007566 <USB_SetCurrentMode+0x84>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2bc7      	cmp	r3, #199	@ 0xc7
 800752c:	d9f0      	bls.n	8007510 <USB_SetCurrentMode+0x2e>
 800752e:	e01a      	b.n	8007566 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007530:	78fb      	ldrb	r3, [r7, #3]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d115      	bne.n	8007562 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007542:	200a      	movs	r0, #10
 8007544:	f7fa ffce 	bl	80024e4 <HAL_Delay>
      ms += 10U;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	330a      	adds	r3, #10
 800754c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f8ff 	bl	8007752 <USB_GetMode>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d005      	beq.n	8007566 <USB_SetCurrentMode+0x84>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2bc7      	cmp	r3, #199	@ 0xc7
 800755e:	d9f0      	bls.n	8007542 <USB_SetCurrentMode+0x60>
 8007560:	e001      	b.n	8007566 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e005      	b.n	8007572 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2bc8      	cmp	r3, #200	@ 0xc8
 800756a:	d101      	bne.n	8007570 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e000      	b.n	8007572 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800757a:	b480      	push	{r7}
 800757c:	b085      	sub	sp, #20
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
 8007582:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007584:	2300      	movs	r3, #0
 8007586:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	3301      	adds	r3, #1
 800758c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007594:	d901      	bls.n	800759a <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e01b      	b.n	80075d2 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	daf2      	bge.n	8007588 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	019b      	lsls	r3, r3, #6
 80075aa:	f043 0220 	orr.w	r2, r3, #32
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3301      	adds	r3, #1
 80075b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075be:	d901      	bls.n	80075c4 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e006      	b.n	80075d2 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	f003 0320 	and.w	r3, r3, #32
 80075cc:	2b20      	cmp	r3, #32
 80075ce:	d0f0      	beq.n	80075b2 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3714      	adds	r7, #20
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075de:	b480      	push	{r7}
 80075e0:	b085      	sub	sp, #20
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3301      	adds	r3, #1
 80075ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075f6:	d901      	bls.n	80075fc <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e018      	b.n	800762e <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	daf2      	bge.n	80075ea <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007604:	2300      	movs	r3, #0
 8007606:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2210      	movs	r2, #16
 800760c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3301      	adds	r3, #1
 8007612:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800761a:	d901      	bls.n	8007620 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e006      	b.n	800762e <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	f003 0310 	and.w	r3, r3, #16
 8007628:	2b10      	cmp	r3, #16
 800762a:	d0f0      	beq.n	800760e <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800763a:	b480      	push	{r7}
 800763c:	b08b      	sub	sp, #44	@ 0x2c
 800763e:	af00      	add	r7, sp, #0
 8007640:	60f8      	str	r0, [r7, #12]
 8007642:	60b9      	str	r1, [r7, #8]
 8007644:	4613      	mov	r3, r2
 8007646:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007650:	88fb      	ldrh	r3, [r7, #6]
 8007652:	089b      	lsrs	r3, r3, #2
 8007654:	b29b      	uxth	r3, r3
 8007656:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007658:	88fb      	ldrh	r3, [r7, #6]
 800765a:	f003 0303 	and.w	r3, r3, #3
 800765e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007660:	2300      	movs	r3, #0
 8007662:	623b      	str	r3, [r7, #32]
 8007664:	e014      	b.n	8007690 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007670:	601a      	str	r2, [r3, #0]
    pDest++;
 8007672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007674:	3301      	adds	r3, #1
 8007676:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767a:	3301      	adds	r3, #1
 800767c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800767e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007680:	3301      	adds	r3, #1
 8007682:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007686:	3301      	adds	r3, #1
 8007688:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	3301      	adds	r3, #1
 800768e:	623b      	str	r3, [r7, #32]
 8007690:	6a3a      	ldr	r2, [r7, #32]
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	429a      	cmp	r2, r3
 8007696:	d3e6      	bcc.n	8007666 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007698:	8bfb      	ldrh	r3, [r7, #30]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d01e      	beq.n	80076dc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800769e:	2300      	movs	r3, #0
 80076a0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076a8:	461a      	mov	r2, r3
 80076aa:	f107 0310 	add.w	r3, r7, #16
 80076ae:	6812      	ldr	r2, [r2, #0]
 80076b0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	6a3b      	ldr	r3, [r7, #32]
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	00db      	lsls	r3, r3, #3
 80076ba:	fa22 f303 	lsr.w	r3, r2, r3
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c2:	701a      	strb	r2, [r3, #0]
      i++;
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	3301      	adds	r3, #1
 80076c8:	623b      	str	r3, [r7, #32]
      pDest++;
 80076ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076cc:	3301      	adds	r3, #1
 80076ce:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80076d0:	8bfb      	ldrh	r3, [r7, #30]
 80076d2:	3b01      	subs	r3, #1
 80076d4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80076d6:	8bfb      	ldrh	r3, [r7, #30]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1ea      	bne.n	80076b2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80076dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80076de:	4618      	mov	r0, r3
 80076e0:	372c      	adds	r7, #44	@ 0x2c
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b085      	sub	sp, #20
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	4013      	ands	r3, r2
 8007700:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007702:	68fb      	ldr	r3, [r7, #12]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3714      	adds	r7, #20
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007720:	78fb      	ldrb	r3, [r7, #3]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	4413      	add	r3, r2
 8007728:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007730:	78fb      	ldrb	r3, [r7, #3]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	4413      	add	r3, r2
 8007738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	4013      	ands	r3, r2
 8007742:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007744:	68bb      	ldr	r3, [r7, #8]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007752:	b480      	push	{r7}
 8007754:	b083      	sub	sp, #12
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	f003 0301 	and.w	r3, r3, #1
}
 8007762:	4618      	mov	r0, r3
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800776e:	b480      	push	{r7}
 8007770:	b085      	sub	sp, #20
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3301      	adds	r3, #1
 800777e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007786:	d901      	bls.n	800778c <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e01b      	b.n	80077c4 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	daf2      	bge.n	800777a <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	f043 0201 	orr.w	r2, r3, #1
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	3301      	adds	r3, #1
 80077a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077b0:	d901      	bls.n	80077b6 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e006      	b.n	80077c4 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d0f0      	beq.n	80077a4 <USB_CoreReset+0x36>

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077d0:	b084      	sub	sp, #16
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b086      	sub	sp, #24
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80077de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077f0:	461a      	mov	r2, r3
 80077f2:	2300      	movs	r3, #0
 80077f4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077fa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007806:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007812:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007822:	2b00      	cmp	r3, #0
 8007824:	d119      	bne.n	800785a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007826:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800782a:	2b01      	cmp	r3, #1
 800782c:	d10a      	bne.n	8007844 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800783c:	f043 0304 	orr.w	r3, r3, #4
 8007840:	6013      	str	r3, [r2, #0]
 8007842:	e014      	b.n	800786e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007852:	f023 0304 	bic.w	r3, r3, #4
 8007856:	6013      	str	r3, [r2, #0]
 8007858:	e009      	b.n	800786e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007868:	f023 0304 	bic.w	r3, r3, #4
 800786c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800786e:	2110      	movs	r1, #16
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7ff fe82 	bl	800757a <USB_FlushTxFifo>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d001      	beq.n	8007880 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7ff feac 	bl	80075de <USB_FlushRxFifo>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007890:	2300      	movs	r3, #0
 8007892:	613b      	str	r3, [r7, #16]
 8007894:	e015      	b.n	80078c2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	015a      	lsls	r2, r3, #5
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	4413      	add	r3, r2
 800789e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078a2:	461a      	mov	r2, r3
 80078a4:	f04f 33ff 	mov.w	r3, #4294967295
 80078a8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078b6:	461a      	mov	r2, r3
 80078b8:	2300      	movs	r3, #0
 80078ba:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	3301      	adds	r3, #1
 80078c0:	613b      	str	r3, [r7, #16]
 80078c2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078c6:	461a      	mov	r2, r3
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d3e3      	bcc.n	8007896 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f04f 32ff 	mov.w	r2, #4294967295
 80078da:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a18      	ldr	r2, [pc, #96]	@ (8007940 <USB_HostInit+0x170>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d10b      	bne.n	80078fc <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078ea:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a15      	ldr	r2, [pc, #84]	@ (8007944 <USB_HostInit+0x174>)
 80078f0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a14      	ldr	r2, [pc, #80]	@ (8007948 <USB_HostInit+0x178>)
 80078f6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80078fa:	e009      	b.n	8007910 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2280      	movs	r2, #128	@ 0x80
 8007900:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a11      	ldr	r2, [pc, #68]	@ (800794c <USB_HostInit+0x17c>)
 8007906:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a11      	ldr	r2, [pc, #68]	@ (8007950 <USB_HostInit+0x180>)
 800790c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007910:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007914:	2b00      	cmp	r3, #0
 8007916:	d105      	bne.n	8007924 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	f043 0210 	orr.w	r2, r3, #16
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	699a      	ldr	r2, [r3, #24]
 8007928:	4b0a      	ldr	r3, [pc, #40]	@ (8007954 <USB_HostInit+0x184>)
 800792a:	4313      	orrs	r3, r2
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007930:	7dfb      	ldrb	r3, [r7, #23]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3718      	adds	r7, #24
 8007936:	46bd      	mov	sp, r7
 8007938:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800793c:	b004      	add	sp, #16
 800793e:	4770      	bx	lr
 8007940:	40040000 	.word	0x40040000
 8007944:	01000200 	.word	0x01000200
 8007948:	00e00300 	.word	0x00e00300
 800794c:	00600080 	.word	0x00600080
 8007950:	004000e0 	.word	0x004000e0
 8007954:	a3200008 	.word	0xa3200008

08007958 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007976:	f023 0303 	bic.w	r3, r3, #3
 800797a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	78fb      	ldrb	r3, [r7, #3]
 8007986:	f003 0303 	and.w	r3, r3, #3
 800798a:	68f9      	ldr	r1, [r7, #12]
 800798c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007990:	4313      	orrs	r3, r2
 8007992:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007994:	78fb      	ldrb	r3, [r7, #3]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d107      	bne.n	80079aa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079a0:	461a      	mov	r2, r3
 80079a2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80079a6:	6053      	str	r3, [r2, #4]
 80079a8:	e00c      	b.n	80079c4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80079aa:	78fb      	ldrb	r3, [r7, #3]
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d107      	bne.n	80079c0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079b6:	461a      	mov	r2, r3
 80079b8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80079bc:	6053      	str	r3, [r2, #4]
 80079be:	e001      	b.n	80079c4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e000      	b.n	80079c6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b085      	sub	sp, #20
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	b29b      	uxth	r3, r3
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b089      	sub	sp, #36	@ 0x24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007a04:	78fb      	ldrb	r3, [r7, #3]
 8007a06:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	0c9b      	lsrs	r3, r3, #18
 8007a1c:	f003 0303 	and.w	r3, r3, #3
 8007a20:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	0fdb      	lsrs	r3, r3, #31
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	0fdb      	lsrs	r3, r3, #31
 8007a48:	f003 0301 	and.w	r3, r3, #1
 8007a4c:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f003 0320 	and.w	r3, r3, #32
 8007a56:	2b20      	cmp	r3, #32
 8007a58:	d10d      	bne.n	8007a76 <USB_HC_Halt+0x82>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10a      	bne.n	8007a76 <USB_HC_Halt+0x82>
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d005      	beq.n	8007a72 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d002      	beq.n	8007a72 <USB_HC_Halt+0x7e>
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d101      	bne.n	8007a76 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	e0d8      	b.n	8007c28 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <USB_HC_Halt+0x8e>
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d173      	bne.n	8007b6a <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	0151      	lsls	r1, r2, #5
 8007a94:	69fa      	ldr	r2, [r7, #28]
 8007a96:	440a      	add	r2, r1
 8007a98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007aa0:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f003 0320 	and.w	r3, r3, #32
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d14a      	bne.n	8007b44 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d133      	bne.n	8007b22 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	015a      	lsls	r2, r3, #5
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	69ba      	ldr	r2, [r7, #24]
 8007aca:	0151      	lsls	r1, r2, #5
 8007acc:	69fa      	ldr	r2, [r7, #28]
 8007ace:	440a      	add	r2, r1
 8007ad0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ad4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ad8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	015a      	lsls	r2, r3, #5
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	0151      	lsls	r1, r2, #5
 8007aec:	69fa      	ldr	r2, [r7, #28]
 8007aee:	440a      	add	r2, r1
 8007af0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007af4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007af8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	3301      	adds	r3, #1
 8007afe:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b06:	d82e      	bhi.n	8007b66 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b1e:	d0ec      	beq.n	8007afa <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b20:	e081      	b.n	8007c26 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	0151      	lsls	r1, r2, #5
 8007b34:	69fa      	ldr	r2, [r7, #28]
 8007b36:	440a      	add	r2, r1
 8007b38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b40:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b42:	e070      	b.n	8007c26 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	0151      	lsls	r1, r2, #5
 8007b56:	69fa      	ldr	r2, [r7, #28]
 8007b58:	440a      	add	r2, r1
 8007b5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b62:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b64:	e05f      	b.n	8007c26 <USB_HC_Halt+0x232>
            break;
 8007b66:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b68:	e05d      	b.n	8007c26 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	015a      	lsls	r2, r3, #5
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	4413      	add	r3, r2
 8007b72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	69ba      	ldr	r2, [r7, #24]
 8007b7a:	0151      	lsls	r1, r2, #5
 8007b7c:	69fa      	ldr	r2, [r7, #28]
 8007b7e:	440a      	add	r2, r1
 8007b80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b88:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d133      	bne.n	8007c02 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	69ba      	ldr	r2, [r7, #24]
 8007baa:	0151      	lsls	r1, r2, #5
 8007bac:	69fa      	ldr	r2, [r7, #28]
 8007bae:	440a      	add	r2, r1
 8007bb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bb4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007bb8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	69ba      	ldr	r2, [r7, #24]
 8007bca:	0151      	lsls	r1, r2, #5
 8007bcc:	69fa      	ldr	r2, [r7, #28]
 8007bce:	440a      	add	r2, r1
 8007bd0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bd4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007bd8:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007be6:	d81d      	bhi.n	8007c24 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bfe:	d0ec      	beq.n	8007bda <USB_HC_Halt+0x1e6>
 8007c00:	e011      	b.n	8007c26 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	0151      	lsls	r1, r2, #5
 8007c14:	69fa      	ldr	r2, [r7, #28]
 8007c16:	440a      	add	r2, r1
 8007c18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c20:	6013      	str	r3, [r2, #0]
 8007c22:	e000      	b.n	8007c26 <USB_HC_Halt+0x232>
          break;
 8007c24:	bf00      	nop
    }
  }

  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3724      	adds	r7, #36	@ 0x24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <std>:
 8007c34:	2300      	movs	r3, #0
 8007c36:	b510      	push	{r4, lr}
 8007c38:	4604      	mov	r4, r0
 8007c3a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c42:	6083      	str	r3, [r0, #8]
 8007c44:	8181      	strh	r1, [r0, #12]
 8007c46:	6643      	str	r3, [r0, #100]	@ 0x64
 8007c48:	81c2      	strh	r2, [r0, #14]
 8007c4a:	6183      	str	r3, [r0, #24]
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	2208      	movs	r2, #8
 8007c50:	305c      	adds	r0, #92	@ 0x5c
 8007c52:	f000 f9f9 	bl	8008048 <memset>
 8007c56:	4b0d      	ldr	r3, [pc, #52]	@ (8007c8c <std+0x58>)
 8007c58:	6263      	str	r3, [r4, #36]	@ 0x24
 8007c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c90 <std+0x5c>)
 8007c5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c94 <std+0x60>)
 8007c60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007c62:	4b0d      	ldr	r3, [pc, #52]	@ (8007c98 <std+0x64>)
 8007c64:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c66:	4b0d      	ldr	r3, [pc, #52]	@ (8007c9c <std+0x68>)
 8007c68:	6224      	str	r4, [r4, #32]
 8007c6a:	429c      	cmp	r4, r3
 8007c6c:	d006      	beq.n	8007c7c <std+0x48>
 8007c6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007c72:	4294      	cmp	r4, r2
 8007c74:	d002      	beq.n	8007c7c <std+0x48>
 8007c76:	33d0      	adds	r3, #208	@ 0xd0
 8007c78:	429c      	cmp	r4, r3
 8007c7a:	d105      	bne.n	8007c88 <std+0x54>
 8007c7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c84:	f000 ba58 	b.w	8008138 <__retarget_lock_init_recursive>
 8007c88:	bd10      	pop	{r4, pc}
 8007c8a:	bf00      	nop
 8007c8c:	08007e99 	.word	0x08007e99
 8007c90:	08007ebb 	.word	0x08007ebb
 8007c94:	08007ef3 	.word	0x08007ef3
 8007c98:	08007f17 	.word	0x08007f17
 8007c9c:	20000770 	.word	0x20000770

08007ca0 <stdio_exit_handler>:
 8007ca0:	4a02      	ldr	r2, [pc, #8]	@ (8007cac <stdio_exit_handler+0xc>)
 8007ca2:	4903      	ldr	r1, [pc, #12]	@ (8007cb0 <stdio_exit_handler+0x10>)
 8007ca4:	4803      	ldr	r0, [pc, #12]	@ (8007cb4 <stdio_exit_handler+0x14>)
 8007ca6:	f000 b869 	b.w	8007d7c <_fwalk_sglue>
 8007caa:	bf00      	nop
 8007cac:	20000064 	.word	0x20000064
 8007cb0:	080089d5 	.word	0x080089d5
 8007cb4:	20000074 	.word	0x20000074

08007cb8 <cleanup_stdio>:
 8007cb8:	6841      	ldr	r1, [r0, #4]
 8007cba:	4b0c      	ldr	r3, [pc, #48]	@ (8007cec <cleanup_stdio+0x34>)
 8007cbc:	4299      	cmp	r1, r3
 8007cbe:	b510      	push	{r4, lr}
 8007cc0:	4604      	mov	r4, r0
 8007cc2:	d001      	beq.n	8007cc8 <cleanup_stdio+0x10>
 8007cc4:	f000 fe86 	bl	80089d4 <_fflush_r>
 8007cc8:	68a1      	ldr	r1, [r4, #8]
 8007cca:	4b09      	ldr	r3, [pc, #36]	@ (8007cf0 <cleanup_stdio+0x38>)
 8007ccc:	4299      	cmp	r1, r3
 8007cce:	d002      	beq.n	8007cd6 <cleanup_stdio+0x1e>
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f000 fe7f 	bl	80089d4 <_fflush_r>
 8007cd6:	68e1      	ldr	r1, [r4, #12]
 8007cd8:	4b06      	ldr	r3, [pc, #24]	@ (8007cf4 <cleanup_stdio+0x3c>)
 8007cda:	4299      	cmp	r1, r3
 8007cdc:	d004      	beq.n	8007ce8 <cleanup_stdio+0x30>
 8007cde:	4620      	mov	r0, r4
 8007ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce4:	f000 be76 	b.w	80089d4 <_fflush_r>
 8007ce8:	bd10      	pop	{r4, pc}
 8007cea:	bf00      	nop
 8007cec:	20000770 	.word	0x20000770
 8007cf0:	200007d8 	.word	0x200007d8
 8007cf4:	20000840 	.word	0x20000840

08007cf8 <global_stdio_init.part.0>:
 8007cf8:	b510      	push	{r4, lr}
 8007cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8007d28 <global_stdio_init.part.0+0x30>)
 8007cfc:	4c0b      	ldr	r4, [pc, #44]	@ (8007d2c <global_stdio_init.part.0+0x34>)
 8007cfe:	4a0c      	ldr	r2, [pc, #48]	@ (8007d30 <global_stdio_init.part.0+0x38>)
 8007d00:	601a      	str	r2, [r3, #0]
 8007d02:	4620      	mov	r0, r4
 8007d04:	2200      	movs	r2, #0
 8007d06:	2104      	movs	r1, #4
 8007d08:	f7ff ff94 	bl	8007c34 <std>
 8007d0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d10:	2201      	movs	r2, #1
 8007d12:	2109      	movs	r1, #9
 8007d14:	f7ff ff8e 	bl	8007c34 <std>
 8007d18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d1c:	2202      	movs	r2, #2
 8007d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d22:	2112      	movs	r1, #18
 8007d24:	f7ff bf86 	b.w	8007c34 <std>
 8007d28:	200008a8 	.word	0x200008a8
 8007d2c:	20000770 	.word	0x20000770
 8007d30:	08007ca1 	.word	0x08007ca1

08007d34 <__sfp_lock_acquire>:
 8007d34:	4801      	ldr	r0, [pc, #4]	@ (8007d3c <__sfp_lock_acquire+0x8>)
 8007d36:	f000 ba00 	b.w	800813a <__retarget_lock_acquire_recursive>
 8007d3a:	bf00      	nop
 8007d3c:	200008b1 	.word	0x200008b1

08007d40 <__sfp_lock_release>:
 8007d40:	4801      	ldr	r0, [pc, #4]	@ (8007d48 <__sfp_lock_release+0x8>)
 8007d42:	f000 b9fb 	b.w	800813c <__retarget_lock_release_recursive>
 8007d46:	bf00      	nop
 8007d48:	200008b1 	.word	0x200008b1

08007d4c <__sinit>:
 8007d4c:	b510      	push	{r4, lr}
 8007d4e:	4604      	mov	r4, r0
 8007d50:	f7ff fff0 	bl	8007d34 <__sfp_lock_acquire>
 8007d54:	6a23      	ldr	r3, [r4, #32]
 8007d56:	b11b      	cbz	r3, 8007d60 <__sinit+0x14>
 8007d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d5c:	f7ff bff0 	b.w	8007d40 <__sfp_lock_release>
 8007d60:	4b04      	ldr	r3, [pc, #16]	@ (8007d74 <__sinit+0x28>)
 8007d62:	6223      	str	r3, [r4, #32]
 8007d64:	4b04      	ldr	r3, [pc, #16]	@ (8007d78 <__sinit+0x2c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1f5      	bne.n	8007d58 <__sinit+0xc>
 8007d6c:	f7ff ffc4 	bl	8007cf8 <global_stdio_init.part.0>
 8007d70:	e7f2      	b.n	8007d58 <__sinit+0xc>
 8007d72:	bf00      	nop
 8007d74:	08007cb9 	.word	0x08007cb9
 8007d78:	200008a8 	.word	0x200008a8

08007d7c <_fwalk_sglue>:
 8007d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d80:	4607      	mov	r7, r0
 8007d82:	4688      	mov	r8, r1
 8007d84:	4614      	mov	r4, r2
 8007d86:	2600      	movs	r6, #0
 8007d88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d8c:	f1b9 0901 	subs.w	r9, r9, #1
 8007d90:	d505      	bpl.n	8007d9e <_fwalk_sglue+0x22>
 8007d92:	6824      	ldr	r4, [r4, #0]
 8007d94:	2c00      	cmp	r4, #0
 8007d96:	d1f7      	bne.n	8007d88 <_fwalk_sglue+0xc>
 8007d98:	4630      	mov	r0, r6
 8007d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d9e:	89ab      	ldrh	r3, [r5, #12]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d907      	bls.n	8007db4 <_fwalk_sglue+0x38>
 8007da4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007da8:	3301      	adds	r3, #1
 8007daa:	d003      	beq.n	8007db4 <_fwalk_sglue+0x38>
 8007dac:	4629      	mov	r1, r5
 8007dae:	4638      	mov	r0, r7
 8007db0:	47c0      	blx	r8
 8007db2:	4306      	orrs	r6, r0
 8007db4:	3568      	adds	r5, #104	@ 0x68
 8007db6:	e7e9      	b.n	8007d8c <_fwalk_sglue+0x10>

08007db8 <iprintf>:
 8007db8:	b40f      	push	{r0, r1, r2, r3}
 8007dba:	b507      	push	{r0, r1, r2, lr}
 8007dbc:	4906      	ldr	r1, [pc, #24]	@ (8007dd8 <iprintf+0x20>)
 8007dbe:	ab04      	add	r3, sp, #16
 8007dc0:	6808      	ldr	r0, [r1, #0]
 8007dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dc6:	6881      	ldr	r1, [r0, #8]
 8007dc8:	9301      	str	r3, [sp, #4]
 8007dca:	f000 fadb 	bl	8008384 <_vfiprintf_r>
 8007dce:	b003      	add	sp, #12
 8007dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dd4:	b004      	add	sp, #16
 8007dd6:	4770      	bx	lr
 8007dd8:	20000070 	.word	0x20000070

08007ddc <_puts_r>:
 8007ddc:	6a03      	ldr	r3, [r0, #32]
 8007dde:	b570      	push	{r4, r5, r6, lr}
 8007de0:	6884      	ldr	r4, [r0, #8]
 8007de2:	4605      	mov	r5, r0
 8007de4:	460e      	mov	r6, r1
 8007de6:	b90b      	cbnz	r3, 8007dec <_puts_r+0x10>
 8007de8:	f7ff ffb0 	bl	8007d4c <__sinit>
 8007dec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007dee:	07db      	lsls	r3, r3, #31
 8007df0:	d405      	bmi.n	8007dfe <_puts_r+0x22>
 8007df2:	89a3      	ldrh	r3, [r4, #12]
 8007df4:	0598      	lsls	r0, r3, #22
 8007df6:	d402      	bmi.n	8007dfe <_puts_r+0x22>
 8007df8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dfa:	f000 f99e 	bl	800813a <__retarget_lock_acquire_recursive>
 8007dfe:	89a3      	ldrh	r3, [r4, #12]
 8007e00:	0719      	lsls	r1, r3, #28
 8007e02:	d502      	bpl.n	8007e0a <_puts_r+0x2e>
 8007e04:	6923      	ldr	r3, [r4, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d135      	bne.n	8007e76 <_puts_r+0x9a>
 8007e0a:	4621      	mov	r1, r4
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	f000 f8c5 	bl	8007f9c <__swsetup_r>
 8007e12:	b380      	cbz	r0, 8007e76 <_puts_r+0x9a>
 8007e14:	f04f 35ff 	mov.w	r5, #4294967295
 8007e18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e1a:	07da      	lsls	r2, r3, #31
 8007e1c:	d405      	bmi.n	8007e2a <_puts_r+0x4e>
 8007e1e:	89a3      	ldrh	r3, [r4, #12]
 8007e20:	059b      	lsls	r3, r3, #22
 8007e22:	d402      	bmi.n	8007e2a <_puts_r+0x4e>
 8007e24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e26:	f000 f989 	bl	800813c <__retarget_lock_release_recursive>
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	bd70      	pop	{r4, r5, r6, pc}
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	da04      	bge.n	8007e3c <_puts_r+0x60>
 8007e32:	69a2      	ldr	r2, [r4, #24]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	dc17      	bgt.n	8007e68 <_puts_r+0x8c>
 8007e38:	290a      	cmp	r1, #10
 8007e3a:	d015      	beq.n	8007e68 <_puts_r+0x8c>
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	1c5a      	adds	r2, r3, #1
 8007e40:	6022      	str	r2, [r4, #0]
 8007e42:	7019      	strb	r1, [r3, #0]
 8007e44:	68a3      	ldr	r3, [r4, #8]
 8007e46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	60a3      	str	r3, [r4, #8]
 8007e4e:	2900      	cmp	r1, #0
 8007e50:	d1ed      	bne.n	8007e2e <_puts_r+0x52>
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	da11      	bge.n	8007e7a <_puts_r+0x9e>
 8007e56:	4622      	mov	r2, r4
 8007e58:	210a      	movs	r1, #10
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	f000 f85f 	bl	8007f1e <__swbuf_r>
 8007e60:	3001      	adds	r0, #1
 8007e62:	d0d7      	beq.n	8007e14 <_puts_r+0x38>
 8007e64:	250a      	movs	r5, #10
 8007e66:	e7d7      	b.n	8007e18 <_puts_r+0x3c>
 8007e68:	4622      	mov	r2, r4
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	f000 f857 	bl	8007f1e <__swbuf_r>
 8007e70:	3001      	adds	r0, #1
 8007e72:	d1e7      	bne.n	8007e44 <_puts_r+0x68>
 8007e74:	e7ce      	b.n	8007e14 <_puts_r+0x38>
 8007e76:	3e01      	subs	r6, #1
 8007e78:	e7e4      	b.n	8007e44 <_puts_r+0x68>
 8007e7a:	6823      	ldr	r3, [r4, #0]
 8007e7c:	1c5a      	adds	r2, r3, #1
 8007e7e:	6022      	str	r2, [r4, #0]
 8007e80:	220a      	movs	r2, #10
 8007e82:	701a      	strb	r2, [r3, #0]
 8007e84:	e7ee      	b.n	8007e64 <_puts_r+0x88>
	...

08007e88 <puts>:
 8007e88:	4b02      	ldr	r3, [pc, #8]	@ (8007e94 <puts+0xc>)
 8007e8a:	4601      	mov	r1, r0
 8007e8c:	6818      	ldr	r0, [r3, #0]
 8007e8e:	f7ff bfa5 	b.w	8007ddc <_puts_r>
 8007e92:	bf00      	nop
 8007e94:	20000070 	.word	0x20000070

08007e98 <__sread>:
 8007e98:	b510      	push	{r4, lr}
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea0:	f000 f8fc 	bl	800809c <_read_r>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	bfab      	itete	ge
 8007ea8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007eaa:	89a3      	ldrhlt	r3, [r4, #12]
 8007eac:	181b      	addge	r3, r3, r0
 8007eae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007eb2:	bfac      	ite	ge
 8007eb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007eb6:	81a3      	strhlt	r3, [r4, #12]
 8007eb8:	bd10      	pop	{r4, pc}

08007eba <__swrite>:
 8007eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ebe:	461f      	mov	r7, r3
 8007ec0:	898b      	ldrh	r3, [r1, #12]
 8007ec2:	05db      	lsls	r3, r3, #23
 8007ec4:	4605      	mov	r5, r0
 8007ec6:	460c      	mov	r4, r1
 8007ec8:	4616      	mov	r6, r2
 8007eca:	d505      	bpl.n	8007ed8 <__swrite+0x1e>
 8007ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f000 f8d0 	bl	8008078 <_lseek_r>
 8007ed8:	89a3      	ldrh	r3, [r4, #12]
 8007eda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ede:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ee2:	81a3      	strh	r3, [r4, #12]
 8007ee4:	4632      	mov	r2, r6
 8007ee6:	463b      	mov	r3, r7
 8007ee8:	4628      	mov	r0, r5
 8007eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eee:	f000 b8e7 	b.w	80080c0 <_write_r>

08007ef2 <__sseek>:
 8007ef2:	b510      	push	{r4, lr}
 8007ef4:	460c      	mov	r4, r1
 8007ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007efa:	f000 f8bd 	bl	8008078 <_lseek_r>
 8007efe:	1c43      	adds	r3, r0, #1
 8007f00:	89a3      	ldrh	r3, [r4, #12]
 8007f02:	bf15      	itete	ne
 8007f04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f0e:	81a3      	strheq	r3, [r4, #12]
 8007f10:	bf18      	it	ne
 8007f12:	81a3      	strhne	r3, [r4, #12]
 8007f14:	bd10      	pop	{r4, pc}

08007f16 <__sclose>:
 8007f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f1a:	f000 b89d 	b.w	8008058 <_close_r>

08007f1e <__swbuf_r>:
 8007f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f20:	460e      	mov	r6, r1
 8007f22:	4614      	mov	r4, r2
 8007f24:	4605      	mov	r5, r0
 8007f26:	b118      	cbz	r0, 8007f30 <__swbuf_r+0x12>
 8007f28:	6a03      	ldr	r3, [r0, #32]
 8007f2a:	b90b      	cbnz	r3, 8007f30 <__swbuf_r+0x12>
 8007f2c:	f7ff ff0e 	bl	8007d4c <__sinit>
 8007f30:	69a3      	ldr	r3, [r4, #24]
 8007f32:	60a3      	str	r3, [r4, #8]
 8007f34:	89a3      	ldrh	r3, [r4, #12]
 8007f36:	071a      	lsls	r2, r3, #28
 8007f38:	d501      	bpl.n	8007f3e <__swbuf_r+0x20>
 8007f3a:	6923      	ldr	r3, [r4, #16]
 8007f3c:	b943      	cbnz	r3, 8007f50 <__swbuf_r+0x32>
 8007f3e:	4621      	mov	r1, r4
 8007f40:	4628      	mov	r0, r5
 8007f42:	f000 f82b 	bl	8007f9c <__swsetup_r>
 8007f46:	b118      	cbz	r0, 8007f50 <__swbuf_r+0x32>
 8007f48:	f04f 37ff 	mov.w	r7, #4294967295
 8007f4c:	4638      	mov	r0, r7
 8007f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	6922      	ldr	r2, [r4, #16]
 8007f54:	1a98      	subs	r0, r3, r2
 8007f56:	6963      	ldr	r3, [r4, #20]
 8007f58:	b2f6      	uxtb	r6, r6
 8007f5a:	4283      	cmp	r3, r0
 8007f5c:	4637      	mov	r7, r6
 8007f5e:	dc05      	bgt.n	8007f6c <__swbuf_r+0x4e>
 8007f60:	4621      	mov	r1, r4
 8007f62:	4628      	mov	r0, r5
 8007f64:	f000 fd36 	bl	80089d4 <_fflush_r>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d1ed      	bne.n	8007f48 <__swbuf_r+0x2a>
 8007f6c:	68a3      	ldr	r3, [r4, #8]
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	60a3      	str	r3, [r4, #8]
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	1c5a      	adds	r2, r3, #1
 8007f76:	6022      	str	r2, [r4, #0]
 8007f78:	701e      	strb	r6, [r3, #0]
 8007f7a:	6962      	ldr	r2, [r4, #20]
 8007f7c:	1c43      	adds	r3, r0, #1
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d004      	beq.n	8007f8c <__swbuf_r+0x6e>
 8007f82:	89a3      	ldrh	r3, [r4, #12]
 8007f84:	07db      	lsls	r3, r3, #31
 8007f86:	d5e1      	bpl.n	8007f4c <__swbuf_r+0x2e>
 8007f88:	2e0a      	cmp	r6, #10
 8007f8a:	d1df      	bne.n	8007f4c <__swbuf_r+0x2e>
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	4628      	mov	r0, r5
 8007f90:	f000 fd20 	bl	80089d4 <_fflush_r>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d0d9      	beq.n	8007f4c <__swbuf_r+0x2e>
 8007f98:	e7d6      	b.n	8007f48 <__swbuf_r+0x2a>
	...

08007f9c <__swsetup_r>:
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	4b29      	ldr	r3, [pc, #164]	@ (8008044 <__swsetup_r+0xa8>)
 8007fa0:	4605      	mov	r5, r0
 8007fa2:	6818      	ldr	r0, [r3, #0]
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	b118      	cbz	r0, 8007fb0 <__swsetup_r+0x14>
 8007fa8:	6a03      	ldr	r3, [r0, #32]
 8007faa:	b90b      	cbnz	r3, 8007fb0 <__swsetup_r+0x14>
 8007fac:	f7ff fece 	bl	8007d4c <__sinit>
 8007fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fb4:	0719      	lsls	r1, r3, #28
 8007fb6:	d422      	bmi.n	8007ffe <__swsetup_r+0x62>
 8007fb8:	06da      	lsls	r2, r3, #27
 8007fba:	d407      	bmi.n	8007fcc <__swsetup_r+0x30>
 8007fbc:	2209      	movs	r2, #9
 8007fbe:	602a      	str	r2, [r5, #0]
 8007fc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fc4:	81a3      	strh	r3, [r4, #12]
 8007fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8007fca:	e033      	b.n	8008034 <__swsetup_r+0x98>
 8007fcc:	0758      	lsls	r0, r3, #29
 8007fce:	d512      	bpl.n	8007ff6 <__swsetup_r+0x5a>
 8007fd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007fd2:	b141      	cbz	r1, 8007fe6 <__swsetup_r+0x4a>
 8007fd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fd8:	4299      	cmp	r1, r3
 8007fda:	d002      	beq.n	8007fe2 <__swsetup_r+0x46>
 8007fdc:	4628      	mov	r0, r5
 8007fde:	f000 f8af 	bl	8008140 <_free_r>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007fe6:	89a3      	ldrh	r3, [r4, #12]
 8007fe8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007fec:	81a3      	strh	r3, [r4, #12]
 8007fee:	2300      	movs	r3, #0
 8007ff0:	6063      	str	r3, [r4, #4]
 8007ff2:	6923      	ldr	r3, [r4, #16]
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	89a3      	ldrh	r3, [r4, #12]
 8007ff8:	f043 0308 	orr.w	r3, r3, #8
 8007ffc:	81a3      	strh	r3, [r4, #12]
 8007ffe:	6923      	ldr	r3, [r4, #16]
 8008000:	b94b      	cbnz	r3, 8008016 <__swsetup_r+0x7a>
 8008002:	89a3      	ldrh	r3, [r4, #12]
 8008004:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800800c:	d003      	beq.n	8008016 <__swsetup_r+0x7a>
 800800e:	4621      	mov	r1, r4
 8008010:	4628      	mov	r0, r5
 8008012:	f000 fd2d 	bl	8008a70 <__smakebuf_r>
 8008016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800801a:	f013 0201 	ands.w	r2, r3, #1
 800801e:	d00a      	beq.n	8008036 <__swsetup_r+0x9a>
 8008020:	2200      	movs	r2, #0
 8008022:	60a2      	str	r2, [r4, #8]
 8008024:	6962      	ldr	r2, [r4, #20]
 8008026:	4252      	negs	r2, r2
 8008028:	61a2      	str	r2, [r4, #24]
 800802a:	6922      	ldr	r2, [r4, #16]
 800802c:	b942      	cbnz	r2, 8008040 <__swsetup_r+0xa4>
 800802e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008032:	d1c5      	bne.n	8007fc0 <__swsetup_r+0x24>
 8008034:	bd38      	pop	{r3, r4, r5, pc}
 8008036:	0799      	lsls	r1, r3, #30
 8008038:	bf58      	it	pl
 800803a:	6962      	ldrpl	r2, [r4, #20]
 800803c:	60a2      	str	r2, [r4, #8]
 800803e:	e7f4      	b.n	800802a <__swsetup_r+0x8e>
 8008040:	2000      	movs	r0, #0
 8008042:	e7f7      	b.n	8008034 <__swsetup_r+0x98>
 8008044:	20000070 	.word	0x20000070

08008048 <memset>:
 8008048:	4402      	add	r2, r0
 800804a:	4603      	mov	r3, r0
 800804c:	4293      	cmp	r3, r2
 800804e:	d100      	bne.n	8008052 <memset+0xa>
 8008050:	4770      	bx	lr
 8008052:	f803 1b01 	strb.w	r1, [r3], #1
 8008056:	e7f9      	b.n	800804c <memset+0x4>

08008058 <_close_r>:
 8008058:	b538      	push	{r3, r4, r5, lr}
 800805a:	4d06      	ldr	r5, [pc, #24]	@ (8008074 <_close_r+0x1c>)
 800805c:	2300      	movs	r3, #0
 800805e:	4604      	mov	r4, r0
 8008060:	4608      	mov	r0, r1
 8008062:	602b      	str	r3, [r5, #0]
 8008064:	f7fa f955 	bl	8002312 <_close>
 8008068:	1c43      	adds	r3, r0, #1
 800806a:	d102      	bne.n	8008072 <_close_r+0x1a>
 800806c:	682b      	ldr	r3, [r5, #0]
 800806e:	b103      	cbz	r3, 8008072 <_close_r+0x1a>
 8008070:	6023      	str	r3, [r4, #0]
 8008072:	bd38      	pop	{r3, r4, r5, pc}
 8008074:	200008ac 	.word	0x200008ac

08008078 <_lseek_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	4d07      	ldr	r5, [pc, #28]	@ (8008098 <_lseek_r+0x20>)
 800807c:	4604      	mov	r4, r0
 800807e:	4608      	mov	r0, r1
 8008080:	4611      	mov	r1, r2
 8008082:	2200      	movs	r2, #0
 8008084:	602a      	str	r2, [r5, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	f7fa f96a 	bl	8002360 <_lseek>
 800808c:	1c43      	adds	r3, r0, #1
 800808e:	d102      	bne.n	8008096 <_lseek_r+0x1e>
 8008090:	682b      	ldr	r3, [r5, #0]
 8008092:	b103      	cbz	r3, 8008096 <_lseek_r+0x1e>
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	bd38      	pop	{r3, r4, r5, pc}
 8008098:	200008ac 	.word	0x200008ac

0800809c <_read_r>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	4d07      	ldr	r5, [pc, #28]	@ (80080bc <_read_r+0x20>)
 80080a0:	4604      	mov	r4, r0
 80080a2:	4608      	mov	r0, r1
 80080a4:	4611      	mov	r1, r2
 80080a6:	2200      	movs	r2, #0
 80080a8:	602a      	str	r2, [r5, #0]
 80080aa:	461a      	mov	r2, r3
 80080ac:	f7fa f8f8 	bl	80022a0 <_read>
 80080b0:	1c43      	adds	r3, r0, #1
 80080b2:	d102      	bne.n	80080ba <_read_r+0x1e>
 80080b4:	682b      	ldr	r3, [r5, #0]
 80080b6:	b103      	cbz	r3, 80080ba <_read_r+0x1e>
 80080b8:	6023      	str	r3, [r4, #0]
 80080ba:	bd38      	pop	{r3, r4, r5, pc}
 80080bc:	200008ac 	.word	0x200008ac

080080c0 <_write_r>:
 80080c0:	b538      	push	{r3, r4, r5, lr}
 80080c2:	4d07      	ldr	r5, [pc, #28]	@ (80080e0 <_write_r+0x20>)
 80080c4:	4604      	mov	r4, r0
 80080c6:	4608      	mov	r0, r1
 80080c8:	4611      	mov	r1, r2
 80080ca:	2200      	movs	r2, #0
 80080cc:	602a      	str	r2, [r5, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	f7fa f903 	bl	80022da <_write>
 80080d4:	1c43      	adds	r3, r0, #1
 80080d6:	d102      	bne.n	80080de <_write_r+0x1e>
 80080d8:	682b      	ldr	r3, [r5, #0]
 80080da:	b103      	cbz	r3, 80080de <_write_r+0x1e>
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	bd38      	pop	{r3, r4, r5, pc}
 80080e0:	200008ac 	.word	0x200008ac

080080e4 <__errno>:
 80080e4:	4b01      	ldr	r3, [pc, #4]	@ (80080ec <__errno+0x8>)
 80080e6:	6818      	ldr	r0, [r3, #0]
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	20000070 	.word	0x20000070

080080f0 <__libc_init_array>:
 80080f0:	b570      	push	{r4, r5, r6, lr}
 80080f2:	4d0d      	ldr	r5, [pc, #52]	@ (8008128 <__libc_init_array+0x38>)
 80080f4:	4c0d      	ldr	r4, [pc, #52]	@ (800812c <__libc_init_array+0x3c>)
 80080f6:	1b64      	subs	r4, r4, r5
 80080f8:	10a4      	asrs	r4, r4, #2
 80080fa:	2600      	movs	r6, #0
 80080fc:	42a6      	cmp	r6, r4
 80080fe:	d109      	bne.n	8008114 <__libc_init_array+0x24>
 8008100:	4d0b      	ldr	r5, [pc, #44]	@ (8008130 <__libc_init_array+0x40>)
 8008102:	4c0c      	ldr	r4, [pc, #48]	@ (8008134 <__libc_init_array+0x44>)
 8008104:	f000 fd22 	bl	8008b4c <_init>
 8008108:	1b64      	subs	r4, r4, r5
 800810a:	10a4      	asrs	r4, r4, #2
 800810c:	2600      	movs	r6, #0
 800810e:	42a6      	cmp	r6, r4
 8008110:	d105      	bne.n	800811e <__libc_init_array+0x2e>
 8008112:	bd70      	pop	{r4, r5, r6, pc}
 8008114:	f855 3b04 	ldr.w	r3, [r5], #4
 8008118:	4798      	blx	r3
 800811a:	3601      	adds	r6, #1
 800811c:	e7ee      	b.n	80080fc <__libc_init_array+0xc>
 800811e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008122:	4798      	blx	r3
 8008124:	3601      	adds	r6, #1
 8008126:	e7f2      	b.n	800810e <__libc_init_array+0x1e>
 8008128:	08008cfc 	.word	0x08008cfc
 800812c:	08008cfc 	.word	0x08008cfc
 8008130:	08008cfc 	.word	0x08008cfc
 8008134:	08008d00 	.word	0x08008d00

08008138 <__retarget_lock_init_recursive>:
 8008138:	4770      	bx	lr

0800813a <__retarget_lock_acquire_recursive>:
 800813a:	4770      	bx	lr

0800813c <__retarget_lock_release_recursive>:
 800813c:	4770      	bx	lr
	...

08008140 <_free_r>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	4605      	mov	r5, r0
 8008144:	2900      	cmp	r1, #0
 8008146:	d041      	beq.n	80081cc <_free_r+0x8c>
 8008148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800814c:	1f0c      	subs	r4, r1, #4
 800814e:	2b00      	cmp	r3, #0
 8008150:	bfb8      	it	lt
 8008152:	18e4      	addlt	r4, r4, r3
 8008154:	f000 f8e0 	bl	8008318 <__malloc_lock>
 8008158:	4a1d      	ldr	r2, [pc, #116]	@ (80081d0 <_free_r+0x90>)
 800815a:	6813      	ldr	r3, [r2, #0]
 800815c:	b933      	cbnz	r3, 800816c <_free_r+0x2c>
 800815e:	6063      	str	r3, [r4, #4]
 8008160:	6014      	str	r4, [r2, #0]
 8008162:	4628      	mov	r0, r5
 8008164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008168:	f000 b8dc 	b.w	8008324 <__malloc_unlock>
 800816c:	42a3      	cmp	r3, r4
 800816e:	d908      	bls.n	8008182 <_free_r+0x42>
 8008170:	6820      	ldr	r0, [r4, #0]
 8008172:	1821      	adds	r1, r4, r0
 8008174:	428b      	cmp	r3, r1
 8008176:	bf01      	itttt	eq
 8008178:	6819      	ldreq	r1, [r3, #0]
 800817a:	685b      	ldreq	r3, [r3, #4]
 800817c:	1809      	addeq	r1, r1, r0
 800817e:	6021      	streq	r1, [r4, #0]
 8008180:	e7ed      	b.n	800815e <_free_r+0x1e>
 8008182:	461a      	mov	r2, r3
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	b10b      	cbz	r3, 800818c <_free_r+0x4c>
 8008188:	42a3      	cmp	r3, r4
 800818a:	d9fa      	bls.n	8008182 <_free_r+0x42>
 800818c:	6811      	ldr	r1, [r2, #0]
 800818e:	1850      	adds	r0, r2, r1
 8008190:	42a0      	cmp	r0, r4
 8008192:	d10b      	bne.n	80081ac <_free_r+0x6c>
 8008194:	6820      	ldr	r0, [r4, #0]
 8008196:	4401      	add	r1, r0
 8008198:	1850      	adds	r0, r2, r1
 800819a:	4283      	cmp	r3, r0
 800819c:	6011      	str	r1, [r2, #0]
 800819e:	d1e0      	bne.n	8008162 <_free_r+0x22>
 80081a0:	6818      	ldr	r0, [r3, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	6053      	str	r3, [r2, #4]
 80081a6:	4408      	add	r0, r1
 80081a8:	6010      	str	r0, [r2, #0]
 80081aa:	e7da      	b.n	8008162 <_free_r+0x22>
 80081ac:	d902      	bls.n	80081b4 <_free_r+0x74>
 80081ae:	230c      	movs	r3, #12
 80081b0:	602b      	str	r3, [r5, #0]
 80081b2:	e7d6      	b.n	8008162 <_free_r+0x22>
 80081b4:	6820      	ldr	r0, [r4, #0]
 80081b6:	1821      	adds	r1, r4, r0
 80081b8:	428b      	cmp	r3, r1
 80081ba:	bf04      	itt	eq
 80081bc:	6819      	ldreq	r1, [r3, #0]
 80081be:	685b      	ldreq	r3, [r3, #4]
 80081c0:	6063      	str	r3, [r4, #4]
 80081c2:	bf04      	itt	eq
 80081c4:	1809      	addeq	r1, r1, r0
 80081c6:	6021      	streq	r1, [r4, #0]
 80081c8:	6054      	str	r4, [r2, #4]
 80081ca:	e7ca      	b.n	8008162 <_free_r+0x22>
 80081cc:	bd38      	pop	{r3, r4, r5, pc}
 80081ce:	bf00      	nop
 80081d0:	200008b8 	.word	0x200008b8

080081d4 <sbrk_aligned>:
 80081d4:	b570      	push	{r4, r5, r6, lr}
 80081d6:	4e0f      	ldr	r6, [pc, #60]	@ (8008214 <sbrk_aligned+0x40>)
 80081d8:	460c      	mov	r4, r1
 80081da:	6831      	ldr	r1, [r6, #0]
 80081dc:	4605      	mov	r5, r0
 80081de:	b911      	cbnz	r1, 80081e6 <sbrk_aligned+0x12>
 80081e0:	f000 fca4 	bl	8008b2c <_sbrk_r>
 80081e4:	6030      	str	r0, [r6, #0]
 80081e6:	4621      	mov	r1, r4
 80081e8:	4628      	mov	r0, r5
 80081ea:	f000 fc9f 	bl	8008b2c <_sbrk_r>
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	d103      	bne.n	80081fa <sbrk_aligned+0x26>
 80081f2:	f04f 34ff 	mov.w	r4, #4294967295
 80081f6:	4620      	mov	r0, r4
 80081f8:	bd70      	pop	{r4, r5, r6, pc}
 80081fa:	1cc4      	adds	r4, r0, #3
 80081fc:	f024 0403 	bic.w	r4, r4, #3
 8008200:	42a0      	cmp	r0, r4
 8008202:	d0f8      	beq.n	80081f6 <sbrk_aligned+0x22>
 8008204:	1a21      	subs	r1, r4, r0
 8008206:	4628      	mov	r0, r5
 8008208:	f000 fc90 	bl	8008b2c <_sbrk_r>
 800820c:	3001      	adds	r0, #1
 800820e:	d1f2      	bne.n	80081f6 <sbrk_aligned+0x22>
 8008210:	e7ef      	b.n	80081f2 <sbrk_aligned+0x1e>
 8008212:	bf00      	nop
 8008214:	200008b4 	.word	0x200008b4

08008218 <_malloc_r>:
 8008218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800821c:	1ccd      	adds	r5, r1, #3
 800821e:	f025 0503 	bic.w	r5, r5, #3
 8008222:	3508      	adds	r5, #8
 8008224:	2d0c      	cmp	r5, #12
 8008226:	bf38      	it	cc
 8008228:	250c      	movcc	r5, #12
 800822a:	2d00      	cmp	r5, #0
 800822c:	4606      	mov	r6, r0
 800822e:	db01      	blt.n	8008234 <_malloc_r+0x1c>
 8008230:	42a9      	cmp	r1, r5
 8008232:	d904      	bls.n	800823e <_malloc_r+0x26>
 8008234:	230c      	movs	r3, #12
 8008236:	6033      	str	r3, [r6, #0]
 8008238:	2000      	movs	r0, #0
 800823a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800823e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008314 <_malloc_r+0xfc>
 8008242:	f000 f869 	bl	8008318 <__malloc_lock>
 8008246:	f8d8 3000 	ldr.w	r3, [r8]
 800824a:	461c      	mov	r4, r3
 800824c:	bb44      	cbnz	r4, 80082a0 <_malloc_r+0x88>
 800824e:	4629      	mov	r1, r5
 8008250:	4630      	mov	r0, r6
 8008252:	f7ff ffbf 	bl	80081d4 <sbrk_aligned>
 8008256:	1c43      	adds	r3, r0, #1
 8008258:	4604      	mov	r4, r0
 800825a:	d158      	bne.n	800830e <_malloc_r+0xf6>
 800825c:	f8d8 4000 	ldr.w	r4, [r8]
 8008260:	4627      	mov	r7, r4
 8008262:	2f00      	cmp	r7, #0
 8008264:	d143      	bne.n	80082ee <_malloc_r+0xd6>
 8008266:	2c00      	cmp	r4, #0
 8008268:	d04b      	beq.n	8008302 <_malloc_r+0xea>
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	4639      	mov	r1, r7
 800826e:	4630      	mov	r0, r6
 8008270:	eb04 0903 	add.w	r9, r4, r3
 8008274:	f000 fc5a 	bl	8008b2c <_sbrk_r>
 8008278:	4581      	cmp	r9, r0
 800827a:	d142      	bne.n	8008302 <_malloc_r+0xea>
 800827c:	6821      	ldr	r1, [r4, #0]
 800827e:	1a6d      	subs	r5, r5, r1
 8008280:	4629      	mov	r1, r5
 8008282:	4630      	mov	r0, r6
 8008284:	f7ff ffa6 	bl	80081d4 <sbrk_aligned>
 8008288:	3001      	adds	r0, #1
 800828a:	d03a      	beq.n	8008302 <_malloc_r+0xea>
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	442b      	add	r3, r5
 8008290:	6023      	str	r3, [r4, #0]
 8008292:	f8d8 3000 	ldr.w	r3, [r8]
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	bb62      	cbnz	r2, 80082f4 <_malloc_r+0xdc>
 800829a:	f8c8 7000 	str.w	r7, [r8]
 800829e:	e00f      	b.n	80082c0 <_malloc_r+0xa8>
 80082a0:	6822      	ldr	r2, [r4, #0]
 80082a2:	1b52      	subs	r2, r2, r5
 80082a4:	d420      	bmi.n	80082e8 <_malloc_r+0xd0>
 80082a6:	2a0b      	cmp	r2, #11
 80082a8:	d917      	bls.n	80082da <_malloc_r+0xc2>
 80082aa:	1961      	adds	r1, r4, r5
 80082ac:	42a3      	cmp	r3, r4
 80082ae:	6025      	str	r5, [r4, #0]
 80082b0:	bf18      	it	ne
 80082b2:	6059      	strne	r1, [r3, #4]
 80082b4:	6863      	ldr	r3, [r4, #4]
 80082b6:	bf08      	it	eq
 80082b8:	f8c8 1000 	streq.w	r1, [r8]
 80082bc:	5162      	str	r2, [r4, r5]
 80082be:	604b      	str	r3, [r1, #4]
 80082c0:	4630      	mov	r0, r6
 80082c2:	f000 f82f 	bl	8008324 <__malloc_unlock>
 80082c6:	f104 000b 	add.w	r0, r4, #11
 80082ca:	1d23      	adds	r3, r4, #4
 80082cc:	f020 0007 	bic.w	r0, r0, #7
 80082d0:	1ac2      	subs	r2, r0, r3
 80082d2:	bf1c      	itt	ne
 80082d4:	1a1b      	subne	r3, r3, r0
 80082d6:	50a3      	strne	r3, [r4, r2]
 80082d8:	e7af      	b.n	800823a <_malloc_r+0x22>
 80082da:	6862      	ldr	r2, [r4, #4]
 80082dc:	42a3      	cmp	r3, r4
 80082de:	bf0c      	ite	eq
 80082e0:	f8c8 2000 	streq.w	r2, [r8]
 80082e4:	605a      	strne	r2, [r3, #4]
 80082e6:	e7eb      	b.n	80082c0 <_malloc_r+0xa8>
 80082e8:	4623      	mov	r3, r4
 80082ea:	6864      	ldr	r4, [r4, #4]
 80082ec:	e7ae      	b.n	800824c <_malloc_r+0x34>
 80082ee:	463c      	mov	r4, r7
 80082f0:	687f      	ldr	r7, [r7, #4]
 80082f2:	e7b6      	b.n	8008262 <_malloc_r+0x4a>
 80082f4:	461a      	mov	r2, r3
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	42a3      	cmp	r3, r4
 80082fa:	d1fb      	bne.n	80082f4 <_malloc_r+0xdc>
 80082fc:	2300      	movs	r3, #0
 80082fe:	6053      	str	r3, [r2, #4]
 8008300:	e7de      	b.n	80082c0 <_malloc_r+0xa8>
 8008302:	230c      	movs	r3, #12
 8008304:	6033      	str	r3, [r6, #0]
 8008306:	4630      	mov	r0, r6
 8008308:	f000 f80c 	bl	8008324 <__malloc_unlock>
 800830c:	e794      	b.n	8008238 <_malloc_r+0x20>
 800830e:	6005      	str	r5, [r0, #0]
 8008310:	e7d6      	b.n	80082c0 <_malloc_r+0xa8>
 8008312:	bf00      	nop
 8008314:	200008b8 	.word	0x200008b8

08008318 <__malloc_lock>:
 8008318:	4801      	ldr	r0, [pc, #4]	@ (8008320 <__malloc_lock+0x8>)
 800831a:	f7ff bf0e 	b.w	800813a <__retarget_lock_acquire_recursive>
 800831e:	bf00      	nop
 8008320:	200008b0 	.word	0x200008b0

08008324 <__malloc_unlock>:
 8008324:	4801      	ldr	r0, [pc, #4]	@ (800832c <__malloc_unlock+0x8>)
 8008326:	f7ff bf09 	b.w	800813c <__retarget_lock_release_recursive>
 800832a:	bf00      	nop
 800832c:	200008b0 	.word	0x200008b0

08008330 <__sfputc_r>:
 8008330:	6893      	ldr	r3, [r2, #8]
 8008332:	3b01      	subs	r3, #1
 8008334:	2b00      	cmp	r3, #0
 8008336:	b410      	push	{r4}
 8008338:	6093      	str	r3, [r2, #8]
 800833a:	da08      	bge.n	800834e <__sfputc_r+0x1e>
 800833c:	6994      	ldr	r4, [r2, #24]
 800833e:	42a3      	cmp	r3, r4
 8008340:	db01      	blt.n	8008346 <__sfputc_r+0x16>
 8008342:	290a      	cmp	r1, #10
 8008344:	d103      	bne.n	800834e <__sfputc_r+0x1e>
 8008346:	f85d 4b04 	ldr.w	r4, [sp], #4
 800834a:	f7ff bde8 	b.w	8007f1e <__swbuf_r>
 800834e:	6813      	ldr	r3, [r2, #0]
 8008350:	1c58      	adds	r0, r3, #1
 8008352:	6010      	str	r0, [r2, #0]
 8008354:	7019      	strb	r1, [r3, #0]
 8008356:	4608      	mov	r0, r1
 8008358:	f85d 4b04 	ldr.w	r4, [sp], #4
 800835c:	4770      	bx	lr

0800835e <__sfputs_r>:
 800835e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008360:	4606      	mov	r6, r0
 8008362:	460f      	mov	r7, r1
 8008364:	4614      	mov	r4, r2
 8008366:	18d5      	adds	r5, r2, r3
 8008368:	42ac      	cmp	r4, r5
 800836a:	d101      	bne.n	8008370 <__sfputs_r+0x12>
 800836c:	2000      	movs	r0, #0
 800836e:	e007      	b.n	8008380 <__sfputs_r+0x22>
 8008370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008374:	463a      	mov	r2, r7
 8008376:	4630      	mov	r0, r6
 8008378:	f7ff ffda 	bl	8008330 <__sfputc_r>
 800837c:	1c43      	adds	r3, r0, #1
 800837e:	d1f3      	bne.n	8008368 <__sfputs_r+0xa>
 8008380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008384 <_vfiprintf_r>:
 8008384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008388:	460d      	mov	r5, r1
 800838a:	b09d      	sub	sp, #116	@ 0x74
 800838c:	4614      	mov	r4, r2
 800838e:	4698      	mov	r8, r3
 8008390:	4606      	mov	r6, r0
 8008392:	b118      	cbz	r0, 800839c <_vfiprintf_r+0x18>
 8008394:	6a03      	ldr	r3, [r0, #32]
 8008396:	b90b      	cbnz	r3, 800839c <_vfiprintf_r+0x18>
 8008398:	f7ff fcd8 	bl	8007d4c <__sinit>
 800839c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800839e:	07d9      	lsls	r1, r3, #31
 80083a0:	d405      	bmi.n	80083ae <_vfiprintf_r+0x2a>
 80083a2:	89ab      	ldrh	r3, [r5, #12]
 80083a4:	059a      	lsls	r2, r3, #22
 80083a6:	d402      	bmi.n	80083ae <_vfiprintf_r+0x2a>
 80083a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083aa:	f7ff fec6 	bl	800813a <__retarget_lock_acquire_recursive>
 80083ae:	89ab      	ldrh	r3, [r5, #12]
 80083b0:	071b      	lsls	r3, r3, #28
 80083b2:	d501      	bpl.n	80083b8 <_vfiprintf_r+0x34>
 80083b4:	692b      	ldr	r3, [r5, #16]
 80083b6:	b99b      	cbnz	r3, 80083e0 <_vfiprintf_r+0x5c>
 80083b8:	4629      	mov	r1, r5
 80083ba:	4630      	mov	r0, r6
 80083bc:	f7ff fdee 	bl	8007f9c <__swsetup_r>
 80083c0:	b170      	cbz	r0, 80083e0 <_vfiprintf_r+0x5c>
 80083c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083c4:	07dc      	lsls	r4, r3, #31
 80083c6:	d504      	bpl.n	80083d2 <_vfiprintf_r+0x4e>
 80083c8:	f04f 30ff 	mov.w	r0, #4294967295
 80083cc:	b01d      	add	sp, #116	@ 0x74
 80083ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d2:	89ab      	ldrh	r3, [r5, #12]
 80083d4:	0598      	lsls	r0, r3, #22
 80083d6:	d4f7      	bmi.n	80083c8 <_vfiprintf_r+0x44>
 80083d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083da:	f7ff feaf 	bl	800813c <__retarget_lock_release_recursive>
 80083de:	e7f3      	b.n	80083c8 <_vfiprintf_r+0x44>
 80083e0:	2300      	movs	r3, #0
 80083e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80083e4:	2320      	movs	r3, #32
 80083e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80083ee:	2330      	movs	r3, #48	@ 0x30
 80083f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80085a0 <_vfiprintf_r+0x21c>
 80083f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083f8:	f04f 0901 	mov.w	r9, #1
 80083fc:	4623      	mov	r3, r4
 80083fe:	469a      	mov	sl, r3
 8008400:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008404:	b10a      	cbz	r2, 800840a <_vfiprintf_r+0x86>
 8008406:	2a25      	cmp	r2, #37	@ 0x25
 8008408:	d1f9      	bne.n	80083fe <_vfiprintf_r+0x7a>
 800840a:	ebba 0b04 	subs.w	fp, sl, r4
 800840e:	d00b      	beq.n	8008428 <_vfiprintf_r+0xa4>
 8008410:	465b      	mov	r3, fp
 8008412:	4622      	mov	r2, r4
 8008414:	4629      	mov	r1, r5
 8008416:	4630      	mov	r0, r6
 8008418:	f7ff ffa1 	bl	800835e <__sfputs_r>
 800841c:	3001      	adds	r0, #1
 800841e:	f000 80a7 	beq.w	8008570 <_vfiprintf_r+0x1ec>
 8008422:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008424:	445a      	add	r2, fp
 8008426:	9209      	str	r2, [sp, #36]	@ 0x24
 8008428:	f89a 3000 	ldrb.w	r3, [sl]
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 809f 	beq.w	8008570 <_vfiprintf_r+0x1ec>
 8008432:	2300      	movs	r3, #0
 8008434:	f04f 32ff 	mov.w	r2, #4294967295
 8008438:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800843c:	f10a 0a01 	add.w	sl, sl, #1
 8008440:	9304      	str	r3, [sp, #16]
 8008442:	9307      	str	r3, [sp, #28]
 8008444:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008448:	931a      	str	r3, [sp, #104]	@ 0x68
 800844a:	4654      	mov	r4, sl
 800844c:	2205      	movs	r2, #5
 800844e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008452:	4853      	ldr	r0, [pc, #332]	@ (80085a0 <_vfiprintf_r+0x21c>)
 8008454:	f7f7 fecc 	bl	80001f0 <memchr>
 8008458:	9a04      	ldr	r2, [sp, #16]
 800845a:	b9d8      	cbnz	r0, 8008494 <_vfiprintf_r+0x110>
 800845c:	06d1      	lsls	r1, r2, #27
 800845e:	bf44      	itt	mi
 8008460:	2320      	movmi	r3, #32
 8008462:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008466:	0713      	lsls	r3, r2, #28
 8008468:	bf44      	itt	mi
 800846a:	232b      	movmi	r3, #43	@ 0x2b
 800846c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008470:	f89a 3000 	ldrb.w	r3, [sl]
 8008474:	2b2a      	cmp	r3, #42	@ 0x2a
 8008476:	d015      	beq.n	80084a4 <_vfiprintf_r+0x120>
 8008478:	9a07      	ldr	r2, [sp, #28]
 800847a:	4654      	mov	r4, sl
 800847c:	2000      	movs	r0, #0
 800847e:	f04f 0c0a 	mov.w	ip, #10
 8008482:	4621      	mov	r1, r4
 8008484:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008488:	3b30      	subs	r3, #48	@ 0x30
 800848a:	2b09      	cmp	r3, #9
 800848c:	d94b      	bls.n	8008526 <_vfiprintf_r+0x1a2>
 800848e:	b1b0      	cbz	r0, 80084be <_vfiprintf_r+0x13a>
 8008490:	9207      	str	r2, [sp, #28]
 8008492:	e014      	b.n	80084be <_vfiprintf_r+0x13a>
 8008494:	eba0 0308 	sub.w	r3, r0, r8
 8008498:	fa09 f303 	lsl.w	r3, r9, r3
 800849c:	4313      	orrs	r3, r2
 800849e:	9304      	str	r3, [sp, #16]
 80084a0:	46a2      	mov	sl, r4
 80084a2:	e7d2      	b.n	800844a <_vfiprintf_r+0xc6>
 80084a4:	9b03      	ldr	r3, [sp, #12]
 80084a6:	1d19      	adds	r1, r3, #4
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	9103      	str	r1, [sp, #12]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	bfbb      	ittet	lt
 80084b0:	425b      	neglt	r3, r3
 80084b2:	f042 0202 	orrlt.w	r2, r2, #2
 80084b6:	9307      	strge	r3, [sp, #28]
 80084b8:	9307      	strlt	r3, [sp, #28]
 80084ba:	bfb8      	it	lt
 80084bc:	9204      	strlt	r2, [sp, #16]
 80084be:	7823      	ldrb	r3, [r4, #0]
 80084c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80084c2:	d10a      	bne.n	80084da <_vfiprintf_r+0x156>
 80084c4:	7863      	ldrb	r3, [r4, #1]
 80084c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80084c8:	d132      	bne.n	8008530 <_vfiprintf_r+0x1ac>
 80084ca:	9b03      	ldr	r3, [sp, #12]
 80084cc:	1d1a      	adds	r2, r3, #4
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	9203      	str	r2, [sp, #12]
 80084d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084d6:	3402      	adds	r4, #2
 80084d8:	9305      	str	r3, [sp, #20]
 80084da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80085b0 <_vfiprintf_r+0x22c>
 80084de:	7821      	ldrb	r1, [r4, #0]
 80084e0:	2203      	movs	r2, #3
 80084e2:	4650      	mov	r0, sl
 80084e4:	f7f7 fe84 	bl	80001f0 <memchr>
 80084e8:	b138      	cbz	r0, 80084fa <_vfiprintf_r+0x176>
 80084ea:	9b04      	ldr	r3, [sp, #16]
 80084ec:	eba0 000a 	sub.w	r0, r0, sl
 80084f0:	2240      	movs	r2, #64	@ 0x40
 80084f2:	4082      	lsls	r2, r0
 80084f4:	4313      	orrs	r3, r2
 80084f6:	3401      	adds	r4, #1
 80084f8:	9304      	str	r3, [sp, #16]
 80084fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084fe:	4829      	ldr	r0, [pc, #164]	@ (80085a4 <_vfiprintf_r+0x220>)
 8008500:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008504:	2206      	movs	r2, #6
 8008506:	f7f7 fe73 	bl	80001f0 <memchr>
 800850a:	2800      	cmp	r0, #0
 800850c:	d03f      	beq.n	800858e <_vfiprintf_r+0x20a>
 800850e:	4b26      	ldr	r3, [pc, #152]	@ (80085a8 <_vfiprintf_r+0x224>)
 8008510:	bb1b      	cbnz	r3, 800855a <_vfiprintf_r+0x1d6>
 8008512:	9b03      	ldr	r3, [sp, #12]
 8008514:	3307      	adds	r3, #7
 8008516:	f023 0307 	bic.w	r3, r3, #7
 800851a:	3308      	adds	r3, #8
 800851c:	9303      	str	r3, [sp, #12]
 800851e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008520:	443b      	add	r3, r7
 8008522:	9309      	str	r3, [sp, #36]	@ 0x24
 8008524:	e76a      	b.n	80083fc <_vfiprintf_r+0x78>
 8008526:	fb0c 3202 	mla	r2, ip, r2, r3
 800852a:	460c      	mov	r4, r1
 800852c:	2001      	movs	r0, #1
 800852e:	e7a8      	b.n	8008482 <_vfiprintf_r+0xfe>
 8008530:	2300      	movs	r3, #0
 8008532:	3401      	adds	r4, #1
 8008534:	9305      	str	r3, [sp, #20]
 8008536:	4619      	mov	r1, r3
 8008538:	f04f 0c0a 	mov.w	ip, #10
 800853c:	4620      	mov	r0, r4
 800853e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008542:	3a30      	subs	r2, #48	@ 0x30
 8008544:	2a09      	cmp	r2, #9
 8008546:	d903      	bls.n	8008550 <_vfiprintf_r+0x1cc>
 8008548:	2b00      	cmp	r3, #0
 800854a:	d0c6      	beq.n	80084da <_vfiprintf_r+0x156>
 800854c:	9105      	str	r1, [sp, #20]
 800854e:	e7c4      	b.n	80084da <_vfiprintf_r+0x156>
 8008550:	fb0c 2101 	mla	r1, ip, r1, r2
 8008554:	4604      	mov	r4, r0
 8008556:	2301      	movs	r3, #1
 8008558:	e7f0      	b.n	800853c <_vfiprintf_r+0x1b8>
 800855a:	ab03      	add	r3, sp, #12
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	462a      	mov	r2, r5
 8008560:	4b12      	ldr	r3, [pc, #72]	@ (80085ac <_vfiprintf_r+0x228>)
 8008562:	a904      	add	r1, sp, #16
 8008564:	4630      	mov	r0, r6
 8008566:	f3af 8000 	nop.w
 800856a:	4607      	mov	r7, r0
 800856c:	1c78      	adds	r0, r7, #1
 800856e:	d1d6      	bne.n	800851e <_vfiprintf_r+0x19a>
 8008570:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008572:	07d9      	lsls	r1, r3, #31
 8008574:	d405      	bmi.n	8008582 <_vfiprintf_r+0x1fe>
 8008576:	89ab      	ldrh	r3, [r5, #12]
 8008578:	059a      	lsls	r2, r3, #22
 800857a:	d402      	bmi.n	8008582 <_vfiprintf_r+0x1fe>
 800857c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800857e:	f7ff fddd 	bl	800813c <__retarget_lock_release_recursive>
 8008582:	89ab      	ldrh	r3, [r5, #12]
 8008584:	065b      	lsls	r3, r3, #25
 8008586:	f53f af1f 	bmi.w	80083c8 <_vfiprintf_r+0x44>
 800858a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800858c:	e71e      	b.n	80083cc <_vfiprintf_r+0x48>
 800858e:	ab03      	add	r3, sp, #12
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	462a      	mov	r2, r5
 8008594:	4b05      	ldr	r3, [pc, #20]	@ (80085ac <_vfiprintf_r+0x228>)
 8008596:	a904      	add	r1, sp, #16
 8008598:	4630      	mov	r0, r6
 800859a:	f000 f879 	bl	8008690 <_printf_i>
 800859e:	e7e4      	b.n	800856a <_vfiprintf_r+0x1e6>
 80085a0:	08008cc0 	.word	0x08008cc0
 80085a4:	08008cca 	.word	0x08008cca
 80085a8:	00000000 	.word	0x00000000
 80085ac:	0800835f 	.word	0x0800835f
 80085b0:	08008cc6 	.word	0x08008cc6

080085b4 <_printf_common>:
 80085b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085b8:	4616      	mov	r6, r2
 80085ba:	4698      	mov	r8, r3
 80085bc:	688a      	ldr	r2, [r1, #8]
 80085be:	690b      	ldr	r3, [r1, #16]
 80085c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80085c4:	4293      	cmp	r3, r2
 80085c6:	bfb8      	it	lt
 80085c8:	4613      	movlt	r3, r2
 80085ca:	6033      	str	r3, [r6, #0]
 80085cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80085d0:	4607      	mov	r7, r0
 80085d2:	460c      	mov	r4, r1
 80085d4:	b10a      	cbz	r2, 80085da <_printf_common+0x26>
 80085d6:	3301      	adds	r3, #1
 80085d8:	6033      	str	r3, [r6, #0]
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	0699      	lsls	r1, r3, #26
 80085de:	bf42      	ittt	mi
 80085e0:	6833      	ldrmi	r3, [r6, #0]
 80085e2:	3302      	addmi	r3, #2
 80085e4:	6033      	strmi	r3, [r6, #0]
 80085e6:	6825      	ldr	r5, [r4, #0]
 80085e8:	f015 0506 	ands.w	r5, r5, #6
 80085ec:	d106      	bne.n	80085fc <_printf_common+0x48>
 80085ee:	f104 0a19 	add.w	sl, r4, #25
 80085f2:	68e3      	ldr	r3, [r4, #12]
 80085f4:	6832      	ldr	r2, [r6, #0]
 80085f6:	1a9b      	subs	r3, r3, r2
 80085f8:	42ab      	cmp	r3, r5
 80085fa:	dc26      	bgt.n	800864a <_printf_common+0x96>
 80085fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008600:	6822      	ldr	r2, [r4, #0]
 8008602:	3b00      	subs	r3, #0
 8008604:	bf18      	it	ne
 8008606:	2301      	movne	r3, #1
 8008608:	0692      	lsls	r2, r2, #26
 800860a:	d42b      	bmi.n	8008664 <_printf_common+0xb0>
 800860c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008610:	4641      	mov	r1, r8
 8008612:	4638      	mov	r0, r7
 8008614:	47c8      	blx	r9
 8008616:	3001      	adds	r0, #1
 8008618:	d01e      	beq.n	8008658 <_printf_common+0xa4>
 800861a:	6823      	ldr	r3, [r4, #0]
 800861c:	6922      	ldr	r2, [r4, #16]
 800861e:	f003 0306 	and.w	r3, r3, #6
 8008622:	2b04      	cmp	r3, #4
 8008624:	bf02      	ittt	eq
 8008626:	68e5      	ldreq	r5, [r4, #12]
 8008628:	6833      	ldreq	r3, [r6, #0]
 800862a:	1aed      	subeq	r5, r5, r3
 800862c:	68a3      	ldr	r3, [r4, #8]
 800862e:	bf0c      	ite	eq
 8008630:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008634:	2500      	movne	r5, #0
 8008636:	4293      	cmp	r3, r2
 8008638:	bfc4      	itt	gt
 800863a:	1a9b      	subgt	r3, r3, r2
 800863c:	18ed      	addgt	r5, r5, r3
 800863e:	2600      	movs	r6, #0
 8008640:	341a      	adds	r4, #26
 8008642:	42b5      	cmp	r5, r6
 8008644:	d11a      	bne.n	800867c <_printf_common+0xc8>
 8008646:	2000      	movs	r0, #0
 8008648:	e008      	b.n	800865c <_printf_common+0xa8>
 800864a:	2301      	movs	r3, #1
 800864c:	4652      	mov	r2, sl
 800864e:	4641      	mov	r1, r8
 8008650:	4638      	mov	r0, r7
 8008652:	47c8      	blx	r9
 8008654:	3001      	adds	r0, #1
 8008656:	d103      	bne.n	8008660 <_printf_common+0xac>
 8008658:	f04f 30ff 	mov.w	r0, #4294967295
 800865c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008660:	3501      	adds	r5, #1
 8008662:	e7c6      	b.n	80085f2 <_printf_common+0x3e>
 8008664:	18e1      	adds	r1, r4, r3
 8008666:	1c5a      	adds	r2, r3, #1
 8008668:	2030      	movs	r0, #48	@ 0x30
 800866a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800866e:	4422      	add	r2, r4
 8008670:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008674:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008678:	3302      	adds	r3, #2
 800867a:	e7c7      	b.n	800860c <_printf_common+0x58>
 800867c:	2301      	movs	r3, #1
 800867e:	4622      	mov	r2, r4
 8008680:	4641      	mov	r1, r8
 8008682:	4638      	mov	r0, r7
 8008684:	47c8      	blx	r9
 8008686:	3001      	adds	r0, #1
 8008688:	d0e6      	beq.n	8008658 <_printf_common+0xa4>
 800868a:	3601      	adds	r6, #1
 800868c:	e7d9      	b.n	8008642 <_printf_common+0x8e>
	...

08008690 <_printf_i>:
 8008690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008694:	7e0f      	ldrb	r7, [r1, #24]
 8008696:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008698:	2f78      	cmp	r7, #120	@ 0x78
 800869a:	4691      	mov	r9, r2
 800869c:	4680      	mov	r8, r0
 800869e:	460c      	mov	r4, r1
 80086a0:	469a      	mov	sl, r3
 80086a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80086a6:	d807      	bhi.n	80086b8 <_printf_i+0x28>
 80086a8:	2f62      	cmp	r7, #98	@ 0x62
 80086aa:	d80a      	bhi.n	80086c2 <_printf_i+0x32>
 80086ac:	2f00      	cmp	r7, #0
 80086ae:	f000 80d1 	beq.w	8008854 <_printf_i+0x1c4>
 80086b2:	2f58      	cmp	r7, #88	@ 0x58
 80086b4:	f000 80b8 	beq.w	8008828 <_printf_i+0x198>
 80086b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80086c0:	e03a      	b.n	8008738 <_printf_i+0xa8>
 80086c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80086c6:	2b15      	cmp	r3, #21
 80086c8:	d8f6      	bhi.n	80086b8 <_printf_i+0x28>
 80086ca:	a101      	add	r1, pc, #4	@ (adr r1, 80086d0 <_printf_i+0x40>)
 80086cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086d0:	08008729 	.word	0x08008729
 80086d4:	0800873d 	.word	0x0800873d
 80086d8:	080086b9 	.word	0x080086b9
 80086dc:	080086b9 	.word	0x080086b9
 80086e0:	080086b9 	.word	0x080086b9
 80086e4:	080086b9 	.word	0x080086b9
 80086e8:	0800873d 	.word	0x0800873d
 80086ec:	080086b9 	.word	0x080086b9
 80086f0:	080086b9 	.word	0x080086b9
 80086f4:	080086b9 	.word	0x080086b9
 80086f8:	080086b9 	.word	0x080086b9
 80086fc:	0800883b 	.word	0x0800883b
 8008700:	08008767 	.word	0x08008767
 8008704:	080087f5 	.word	0x080087f5
 8008708:	080086b9 	.word	0x080086b9
 800870c:	080086b9 	.word	0x080086b9
 8008710:	0800885d 	.word	0x0800885d
 8008714:	080086b9 	.word	0x080086b9
 8008718:	08008767 	.word	0x08008767
 800871c:	080086b9 	.word	0x080086b9
 8008720:	080086b9 	.word	0x080086b9
 8008724:	080087fd 	.word	0x080087fd
 8008728:	6833      	ldr	r3, [r6, #0]
 800872a:	1d1a      	adds	r2, r3, #4
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	6032      	str	r2, [r6, #0]
 8008730:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008734:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008738:	2301      	movs	r3, #1
 800873a:	e09c      	b.n	8008876 <_printf_i+0x1e6>
 800873c:	6833      	ldr	r3, [r6, #0]
 800873e:	6820      	ldr	r0, [r4, #0]
 8008740:	1d19      	adds	r1, r3, #4
 8008742:	6031      	str	r1, [r6, #0]
 8008744:	0606      	lsls	r6, r0, #24
 8008746:	d501      	bpl.n	800874c <_printf_i+0xbc>
 8008748:	681d      	ldr	r5, [r3, #0]
 800874a:	e003      	b.n	8008754 <_printf_i+0xc4>
 800874c:	0645      	lsls	r5, r0, #25
 800874e:	d5fb      	bpl.n	8008748 <_printf_i+0xb8>
 8008750:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008754:	2d00      	cmp	r5, #0
 8008756:	da03      	bge.n	8008760 <_printf_i+0xd0>
 8008758:	232d      	movs	r3, #45	@ 0x2d
 800875a:	426d      	negs	r5, r5
 800875c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008760:	4858      	ldr	r0, [pc, #352]	@ (80088c4 <_printf_i+0x234>)
 8008762:	230a      	movs	r3, #10
 8008764:	e011      	b.n	800878a <_printf_i+0xfa>
 8008766:	6821      	ldr	r1, [r4, #0]
 8008768:	6833      	ldr	r3, [r6, #0]
 800876a:	0608      	lsls	r0, r1, #24
 800876c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008770:	d402      	bmi.n	8008778 <_printf_i+0xe8>
 8008772:	0649      	lsls	r1, r1, #25
 8008774:	bf48      	it	mi
 8008776:	b2ad      	uxthmi	r5, r5
 8008778:	2f6f      	cmp	r7, #111	@ 0x6f
 800877a:	4852      	ldr	r0, [pc, #328]	@ (80088c4 <_printf_i+0x234>)
 800877c:	6033      	str	r3, [r6, #0]
 800877e:	bf14      	ite	ne
 8008780:	230a      	movne	r3, #10
 8008782:	2308      	moveq	r3, #8
 8008784:	2100      	movs	r1, #0
 8008786:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800878a:	6866      	ldr	r6, [r4, #4]
 800878c:	60a6      	str	r6, [r4, #8]
 800878e:	2e00      	cmp	r6, #0
 8008790:	db05      	blt.n	800879e <_printf_i+0x10e>
 8008792:	6821      	ldr	r1, [r4, #0]
 8008794:	432e      	orrs	r6, r5
 8008796:	f021 0104 	bic.w	r1, r1, #4
 800879a:	6021      	str	r1, [r4, #0]
 800879c:	d04b      	beq.n	8008836 <_printf_i+0x1a6>
 800879e:	4616      	mov	r6, r2
 80087a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80087a4:	fb03 5711 	mls	r7, r3, r1, r5
 80087a8:	5dc7      	ldrb	r7, [r0, r7]
 80087aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087ae:	462f      	mov	r7, r5
 80087b0:	42bb      	cmp	r3, r7
 80087b2:	460d      	mov	r5, r1
 80087b4:	d9f4      	bls.n	80087a0 <_printf_i+0x110>
 80087b6:	2b08      	cmp	r3, #8
 80087b8:	d10b      	bne.n	80087d2 <_printf_i+0x142>
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	07df      	lsls	r7, r3, #31
 80087be:	d508      	bpl.n	80087d2 <_printf_i+0x142>
 80087c0:	6923      	ldr	r3, [r4, #16]
 80087c2:	6861      	ldr	r1, [r4, #4]
 80087c4:	4299      	cmp	r1, r3
 80087c6:	bfde      	ittt	le
 80087c8:	2330      	movle	r3, #48	@ 0x30
 80087ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80087d2:	1b92      	subs	r2, r2, r6
 80087d4:	6122      	str	r2, [r4, #16]
 80087d6:	f8cd a000 	str.w	sl, [sp]
 80087da:	464b      	mov	r3, r9
 80087dc:	aa03      	add	r2, sp, #12
 80087de:	4621      	mov	r1, r4
 80087e0:	4640      	mov	r0, r8
 80087e2:	f7ff fee7 	bl	80085b4 <_printf_common>
 80087e6:	3001      	adds	r0, #1
 80087e8:	d14a      	bne.n	8008880 <_printf_i+0x1f0>
 80087ea:	f04f 30ff 	mov.w	r0, #4294967295
 80087ee:	b004      	add	sp, #16
 80087f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	f043 0320 	orr.w	r3, r3, #32
 80087fa:	6023      	str	r3, [r4, #0]
 80087fc:	4832      	ldr	r0, [pc, #200]	@ (80088c8 <_printf_i+0x238>)
 80087fe:	2778      	movs	r7, #120	@ 0x78
 8008800:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	6831      	ldr	r1, [r6, #0]
 8008808:	061f      	lsls	r7, r3, #24
 800880a:	f851 5b04 	ldr.w	r5, [r1], #4
 800880e:	d402      	bmi.n	8008816 <_printf_i+0x186>
 8008810:	065f      	lsls	r7, r3, #25
 8008812:	bf48      	it	mi
 8008814:	b2ad      	uxthmi	r5, r5
 8008816:	6031      	str	r1, [r6, #0]
 8008818:	07d9      	lsls	r1, r3, #31
 800881a:	bf44      	itt	mi
 800881c:	f043 0320 	orrmi.w	r3, r3, #32
 8008820:	6023      	strmi	r3, [r4, #0]
 8008822:	b11d      	cbz	r5, 800882c <_printf_i+0x19c>
 8008824:	2310      	movs	r3, #16
 8008826:	e7ad      	b.n	8008784 <_printf_i+0xf4>
 8008828:	4826      	ldr	r0, [pc, #152]	@ (80088c4 <_printf_i+0x234>)
 800882a:	e7e9      	b.n	8008800 <_printf_i+0x170>
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	f023 0320 	bic.w	r3, r3, #32
 8008832:	6023      	str	r3, [r4, #0]
 8008834:	e7f6      	b.n	8008824 <_printf_i+0x194>
 8008836:	4616      	mov	r6, r2
 8008838:	e7bd      	b.n	80087b6 <_printf_i+0x126>
 800883a:	6833      	ldr	r3, [r6, #0]
 800883c:	6825      	ldr	r5, [r4, #0]
 800883e:	6961      	ldr	r1, [r4, #20]
 8008840:	1d18      	adds	r0, r3, #4
 8008842:	6030      	str	r0, [r6, #0]
 8008844:	062e      	lsls	r6, r5, #24
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	d501      	bpl.n	800884e <_printf_i+0x1be>
 800884a:	6019      	str	r1, [r3, #0]
 800884c:	e002      	b.n	8008854 <_printf_i+0x1c4>
 800884e:	0668      	lsls	r0, r5, #25
 8008850:	d5fb      	bpl.n	800884a <_printf_i+0x1ba>
 8008852:	8019      	strh	r1, [r3, #0]
 8008854:	2300      	movs	r3, #0
 8008856:	6123      	str	r3, [r4, #16]
 8008858:	4616      	mov	r6, r2
 800885a:	e7bc      	b.n	80087d6 <_printf_i+0x146>
 800885c:	6833      	ldr	r3, [r6, #0]
 800885e:	1d1a      	adds	r2, r3, #4
 8008860:	6032      	str	r2, [r6, #0]
 8008862:	681e      	ldr	r6, [r3, #0]
 8008864:	6862      	ldr	r2, [r4, #4]
 8008866:	2100      	movs	r1, #0
 8008868:	4630      	mov	r0, r6
 800886a:	f7f7 fcc1 	bl	80001f0 <memchr>
 800886e:	b108      	cbz	r0, 8008874 <_printf_i+0x1e4>
 8008870:	1b80      	subs	r0, r0, r6
 8008872:	6060      	str	r0, [r4, #4]
 8008874:	6863      	ldr	r3, [r4, #4]
 8008876:	6123      	str	r3, [r4, #16]
 8008878:	2300      	movs	r3, #0
 800887a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800887e:	e7aa      	b.n	80087d6 <_printf_i+0x146>
 8008880:	6923      	ldr	r3, [r4, #16]
 8008882:	4632      	mov	r2, r6
 8008884:	4649      	mov	r1, r9
 8008886:	4640      	mov	r0, r8
 8008888:	47d0      	blx	sl
 800888a:	3001      	adds	r0, #1
 800888c:	d0ad      	beq.n	80087ea <_printf_i+0x15a>
 800888e:	6823      	ldr	r3, [r4, #0]
 8008890:	079b      	lsls	r3, r3, #30
 8008892:	d413      	bmi.n	80088bc <_printf_i+0x22c>
 8008894:	68e0      	ldr	r0, [r4, #12]
 8008896:	9b03      	ldr	r3, [sp, #12]
 8008898:	4298      	cmp	r0, r3
 800889a:	bfb8      	it	lt
 800889c:	4618      	movlt	r0, r3
 800889e:	e7a6      	b.n	80087ee <_printf_i+0x15e>
 80088a0:	2301      	movs	r3, #1
 80088a2:	4632      	mov	r2, r6
 80088a4:	4649      	mov	r1, r9
 80088a6:	4640      	mov	r0, r8
 80088a8:	47d0      	blx	sl
 80088aa:	3001      	adds	r0, #1
 80088ac:	d09d      	beq.n	80087ea <_printf_i+0x15a>
 80088ae:	3501      	adds	r5, #1
 80088b0:	68e3      	ldr	r3, [r4, #12]
 80088b2:	9903      	ldr	r1, [sp, #12]
 80088b4:	1a5b      	subs	r3, r3, r1
 80088b6:	42ab      	cmp	r3, r5
 80088b8:	dcf2      	bgt.n	80088a0 <_printf_i+0x210>
 80088ba:	e7eb      	b.n	8008894 <_printf_i+0x204>
 80088bc:	2500      	movs	r5, #0
 80088be:	f104 0619 	add.w	r6, r4, #25
 80088c2:	e7f5      	b.n	80088b0 <_printf_i+0x220>
 80088c4:	08008cd1 	.word	0x08008cd1
 80088c8:	08008ce2 	.word	0x08008ce2

080088cc <__sflush_r>:
 80088cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d4:	0716      	lsls	r6, r2, #28
 80088d6:	4605      	mov	r5, r0
 80088d8:	460c      	mov	r4, r1
 80088da:	d454      	bmi.n	8008986 <__sflush_r+0xba>
 80088dc:	684b      	ldr	r3, [r1, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	dc02      	bgt.n	80088e8 <__sflush_r+0x1c>
 80088e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	dd48      	ble.n	800897a <__sflush_r+0xae>
 80088e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088ea:	2e00      	cmp	r6, #0
 80088ec:	d045      	beq.n	800897a <__sflush_r+0xae>
 80088ee:	2300      	movs	r3, #0
 80088f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80088f4:	682f      	ldr	r7, [r5, #0]
 80088f6:	6a21      	ldr	r1, [r4, #32]
 80088f8:	602b      	str	r3, [r5, #0]
 80088fa:	d030      	beq.n	800895e <__sflush_r+0x92>
 80088fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	0759      	lsls	r1, r3, #29
 8008902:	d505      	bpl.n	8008910 <__sflush_r+0x44>
 8008904:	6863      	ldr	r3, [r4, #4]
 8008906:	1ad2      	subs	r2, r2, r3
 8008908:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800890a:	b10b      	cbz	r3, 8008910 <__sflush_r+0x44>
 800890c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800890e:	1ad2      	subs	r2, r2, r3
 8008910:	2300      	movs	r3, #0
 8008912:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008914:	6a21      	ldr	r1, [r4, #32]
 8008916:	4628      	mov	r0, r5
 8008918:	47b0      	blx	r6
 800891a:	1c43      	adds	r3, r0, #1
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	d106      	bne.n	800892e <__sflush_r+0x62>
 8008920:	6829      	ldr	r1, [r5, #0]
 8008922:	291d      	cmp	r1, #29
 8008924:	d82b      	bhi.n	800897e <__sflush_r+0xb2>
 8008926:	4a2a      	ldr	r2, [pc, #168]	@ (80089d0 <__sflush_r+0x104>)
 8008928:	40ca      	lsrs	r2, r1
 800892a:	07d6      	lsls	r6, r2, #31
 800892c:	d527      	bpl.n	800897e <__sflush_r+0xb2>
 800892e:	2200      	movs	r2, #0
 8008930:	6062      	str	r2, [r4, #4]
 8008932:	04d9      	lsls	r1, r3, #19
 8008934:	6922      	ldr	r2, [r4, #16]
 8008936:	6022      	str	r2, [r4, #0]
 8008938:	d504      	bpl.n	8008944 <__sflush_r+0x78>
 800893a:	1c42      	adds	r2, r0, #1
 800893c:	d101      	bne.n	8008942 <__sflush_r+0x76>
 800893e:	682b      	ldr	r3, [r5, #0]
 8008940:	b903      	cbnz	r3, 8008944 <__sflush_r+0x78>
 8008942:	6560      	str	r0, [r4, #84]	@ 0x54
 8008944:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008946:	602f      	str	r7, [r5, #0]
 8008948:	b1b9      	cbz	r1, 800897a <__sflush_r+0xae>
 800894a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800894e:	4299      	cmp	r1, r3
 8008950:	d002      	beq.n	8008958 <__sflush_r+0x8c>
 8008952:	4628      	mov	r0, r5
 8008954:	f7ff fbf4 	bl	8008140 <_free_r>
 8008958:	2300      	movs	r3, #0
 800895a:	6363      	str	r3, [r4, #52]	@ 0x34
 800895c:	e00d      	b.n	800897a <__sflush_r+0xae>
 800895e:	2301      	movs	r3, #1
 8008960:	4628      	mov	r0, r5
 8008962:	47b0      	blx	r6
 8008964:	4602      	mov	r2, r0
 8008966:	1c50      	adds	r0, r2, #1
 8008968:	d1c9      	bne.n	80088fe <__sflush_r+0x32>
 800896a:	682b      	ldr	r3, [r5, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d0c6      	beq.n	80088fe <__sflush_r+0x32>
 8008970:	2b1d      	cmp	r3, #29
 8008972:	d001      	beq.n	8008978 <__sflush_r+0xac>
 8008974:	2b16      	cmp	r3, #22
 8008976:	d11e      	bne.n	80089b6 <__sflush_r+0xea>
 8008978:	602f      	str	r7, [r5, #0]
 800897a:	2000      	movs	r0, #0
 800897c:	e022      	b.n	80089c4 <__sflush_r+0xf8>
 800897e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008982:	b21b      	sxth	r3, r3
 8008984:	e01b      	b.n	80089be <__sflush_r+0xf2>
 8008986:	690f      	ldr	r7, [r1, #16]
 8008988:	2f00      	cmp	r7, #0
 800898a:	d0f6      	beq.n	800897a <__sflush_r+0xae>
 800898c:	0793      	lsls	r3, r2, #30
 800898e:	680e      	ldr	r6, [r1, #0]
 8008990:	bf08      	it	eq
 8008992:	694b      	ldreq	r3, [r1, #20]
 8008994:	600f      	str	r7, [r1, #0]
 8008996:	bf18      	it	ne
 8008998:	2300      	movne	r3, #0
 800899a:	eba6 0807 	sub.w	r8, r6, r7
 800899e:	608b      	str	r3, [r1, #8]
 80089a0:	f1b8 0f00 	cmp.w	r8, #0
 80089a4:	dde9      	ble.n	800897a <__sflush_r+0xae>
 80089a6:	6a21      	ldr	r1, [r4, #32]
 80089a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80089aa:	4643      	mov	r3, r8
 80089ac:	463a      	mov	r2, r7
 80089ae:	4628      	mov	r0, r5
 80089b0:	47b0      	blx	r6
 80089b2:	2800      	cmp	r0, #0
 80089b4:	dc08      	bgt.n	80089c8 <__sflush_r+0xfc>
 80089b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089be:	81a3      	strh	r3, [r4, #12]
 80089c0:	f04f 30ff 	mov.w	r0, #4294967295
 80089c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089c8:	4407      	add	r7, r0
 80089ca:	eba8 0800 	sub.w	r8, r8, r0
 80089ce:	e7e7      	b.n	80089a0 <__sflush_r+0xd4>
 80089d0:	20400001 	.word	0x20400001

080089d4 <_fflush_r>:
 80089d4:	b538      	push	{r3, r4, r5, lr}
 80089d6:	690b      	ldr	r3, [r1, #16]
 80089d8:	4605      	mov	r5, r0
 80089da:	460c      	mov	r4, r1
 80089dc:	b913      	cbnz	r3, 80089e4 <_fflush_r+0x10>
 80089de:	2500      	movs	r5, #0
 80089e0:	4628      	mov	r0, r5
 80089e2:	bd38      	pop	{r3, r4, r5, pc}
 80089e4:	b118      	cbz	r0, 80089ee <_fflush_r+0x1a>
 80089e6:	6a03      	ldr	r3, [r0, #32]
 80089e8:	b90b      	cbnz	r3, 80089ee <_fflush_r+0x1a>
 80089ea:	f7ff f9af 	bl	8007d4c <__sinit>
 80089ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d0f3      	beq.n	80089de <_fflush_r+0xa>
 80089f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80089f8:	07d0      	lsls	r0, r2, #31
 80089fa:	d404      	bmi.n	8008a06 <_fflush_r+0x32>
 80089fc:	0599      	lsls	r1, r3, #22
 80089fe:	d402      	bmi.n	8008a06 <_fflush_r+0x32>
 8008a00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a02:	f7ff fb9a 	bl	800813a <__retarget_lock_acquire_recursive>
 8008a06:	4628      	mov	r0, r5
 8008a08:	4621      	mov	r1, r4
 8008a0a:	f7ff ff5f 	bl	80088cc <__sflush_r>
 8008a0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a10:	07da      	lsls	r2, r3, #31
 8008a12:	4605      	mov	r5, r0
 8008a14:	d4e4      	bmi.n	80089e0 <_fflush_r+0xc>
 8008a16:	89a3      	ldrh	r3, [r4, #12]
 8008a18:	059b      	lsls	r3, r3, #22
 8008a1a:	d4e1      	bmi.n	80089e0 <_fflush_r+0xc>
 8008a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a1e:	f7ff fb8d 	bl	800813c <__retarget_lock_release_recursive>
 8008a22:	e7dd      	b.n	80089e0 <_fflush_r+0xc>

08008a24 <__swhatbuf_r>:
 8008a24:	b570      	push	{r4, r5, r6, lr}
 8008a26:	460c      	mov	r4, r1
 8008a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2c:	2900      	cmp	r1, #0
 8008a2e:	b096      	sub	sp, #88	@ 0x58
 8008a30:	4615      	mov	r5, r2
 8008a32:	461e      	mov	r6, r3
 8008a34:	da0d      	bge.n	8008a52 <__swhatbuf_r+0x2e>
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a3c:	f04f 0100 	mov.w	r1, #0
 8008a40:	bf14      	ite	ne
 8008a42:	2340      	movne	r3, #64	@ 0x40
 8008a44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a48:	2000      	movs	r0, #0
 8008a4a:	6031      	str	r1, [r6, #0]
 8008a4c:	602b      	str	r3, [r5, #0]
 8008a4e:	b016      	add	sp, #88	@ 0x58
 8008a50:	bd70      	pop	{r4, r5, r6, pc}
 8008a52:	466a      	mov	r2, sp
 8008a54:	f000 f848 	bl	8008ae8 <_fstat_r>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	dbec      	blt.n	8008a36 <__swhatbuf_r+0x12>
 8008a5c:	9901      	ldr	r1, [sp, #4]
 8008a5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a66:	4259      	negs	r1, r3
 8008a68:	4159      	adcs	r1, r3
 8008a6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a6e:	e7eb      	b.n	8008a48 <__swhatbuf_r+0x24>

08008a70 <__smakebuf_r>:
 8008a70:	898b      	ldrh	r3, [r1, #12]
 8008a72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a74:	079d      	lsls	r5, r3, #30
 8008a76:	4606      	mov	r6, r0
 8008a78:	460c      	mov	r4, r1
 8008a7a:	d507      	bpl.n	8008a8c <__smakebuf_r+0x1c>
 8008a7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a80:	6023      	str	r3, [r4, #0]
 8008a82:	6123      	str	r3, [r4, #16]
 8008a84:	2301      	movs	r3, #1
 8008a86:	6163      	str	r3, [r4, #20]
 8008a88:	b003      	add	sp, #12
 8008a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a8c:	ab01      	add	r3, sp, #4
 8008a8e:	466a      	mov	r2, sp
 8008a90:	f7ff ffc8 	bl	8008a24 <__swhatbuf_r>
 8008a94:	9f00      	ldr	r7, [sp, #0]
 8008a96:	4605      	mov	r5, r0
 8008a98:	4639      	mov	r1, r7
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f7ff fbbc 	bl	8008218 <_malloc_r>
 8008aa0:	b948      	cbnz	r0, 8008ab6 <__smakebuf_r+0x46>
 8008aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aa6:	059a      	lsls	r2, r3, #22
 8008aa8:	d4ee      	bmi.n	8008a88 <__smakebuf_r+0x18>
 8008aaa:	f023 0303 	bic.w	r3, r3, #3
 8008aae:	f043 0302 	orr.w	r3, r3, #2
 8008ab2:	81a3      	strh	r3, [r4, #12]
 8008ab4:	e7e2      	b.n	8008a7c <__smakebuf_r+0xc>
 8008ab6:	89a3      	ldrh	r3, [r4, #12]
 8008ab8:	6020      	str	r0, [r4, #0]
 8008aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008abe:	81a3      	strh	r3, [r4, #12]
 8008ac0:	9b01      	ldr	r3, [sp, #4]
 8008ac2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ac6:	b15b      	cbz	r3, 8008ae0 <__smakebuf_r+0x70>
 8008ac8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008acc:	4630      	mov	r0, r6
 8008ace:	f000 f81d 	bl	8008b0c <_isatty_r>
 8008ad2:	b128      	cbz	r0, 8008ae0 <__smakebuf_r+0x70>
 8008ad4:	89a3      	ldrh	r3, [r4, #12]
 8008ad6:	f023 0303 	bic.w	r3, r3, #3
 8008ada:	f043 0301 	orr.w	r3, r3, #1
 8008ade:	81a3      	strh	r3, [r4, #12]
 8008ae0:	89a3      	ldrh	r3, [r4, #12]
 8008ae2:	431d      	orrs	r5, r3
 8008ae4:	81a5      	strh	r5, [r4, #12]
 8008ae6:	e7cf      	b.n	8008a88 <__smakebuf_r+0x18>

08008ae8 <_fstat_r>:
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	4d07      	ldr	r5, [pc, #28]	@ (8008b08 <_fstat_r+0x20>)
 8008aec:	2300      	movs	r3, #0
 8008aee:	4604      	mov	r4, r0
 8008af0:	4608      	mov	r0, r1
 8008af2:	4611      	mov	r1, r2
 8008af4:	602b      	str	r3, [r5, #0]
 8008af6:	f7f9 fc18 	bl	800232a <_fstat>
 8008afa:	1c43      	adds	r3, r0, #1
 8008afc:	d102      	bne.n	8008b04 <_fstat_r+0x1c>
 8008afe:	682b      	ldr	r3, [r5, #0]
 8008b00:	b103      	cbz	r3, 8008b04 <_fstat_r+0x1c>
 8008b02:	6023      	str	r3, [r4, #0]
 8008b04:	bd38      	pop	{r3, r4, r5, pc}
 8008b06:	bf00      	nop
 8008b08:	200008ac 	.word	0x200008ac

08008b0c <_isatty_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	4d06      	ldr	r5, [pc, #24]	@ (8008b28 <_isatty_r+0x1c>)
 8008b10:	2300      	movs	r3, #0
 8008b12:	4604      	mov	r4, r0
 8008b14:	4608      	mov	r0, r1
 8008b16:	602b      	str	r3, [r5, #0]
 8008b18:	f7f9 fc17 	bl	800234a <_isatty>
 8008b1c:	1c43      	adds	r3, r0, #1
 8008b1e:	d102      	bne.n	8008b26 <_isatty_r+0x1a>
 8008b20:	682b      	ldr	r3, [r5, #0]
 8008b22:	b103      	cbz	r3, 8008b26 <_isatty_r+0x1a>
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	bd38      	pop	{r3, r4, r5, pc}
 8008b28:	200008ac 	.word	0x200008ac

08008b2c <_sbrk_r>:
 8008b2c:	b538      	push	{r3, r4, r5, lr}
 8008b2e:	4d06      	ldr	r5, [pc, #24]	@ (8008b48 <_sbrk_r+0x1c>)
 8008b30:	2300      	movs	r3, #0
 8008b32:	4604      	mov	r4, r0
 8008b34:	4608      	mov	r0, r1
 8008b36:	602b      	str	r3, [r5, #0]
 8008b38:	f7f9 fc20 	bl	800237c <_sbrk>
 8008b3c:	1c43      	adds	r3, r0, #1
 8008b3e:	d102      	bne.n	8008b46 <_sbrk_r+0x1a>
 8008b40:	682b      	ldr	r3, [r5, #0]
 8008b42:	b103      	cbz	r3, 8008b46 <_sbrk_r+0x1a>
 8008b44:	6023      	str	r3, [r4, #0]
 8008b46:	bd38      	pop	{r3, r4, r5, pc}
 8008b48:	200008ac 	.word	0x200008ac

08008b4c <_init>:
 8008b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4e:	bf00      	nop
 8008b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b52:	bc08      	pop	{r3}
 8008b54:	469e      	mov	lr, r3
 8008b56:	4770      	bx	lr

08008b58 <_fini>:
 8008b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5a:	bf00      	nop
 8008b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b5e:	bc08      	pop	{r3}
 8008b60:	469e      	mov	lr, r3
 8008b62:	4770      	bx	lr
