
swm_programmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088c0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08008a70  08008a70  00009a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c10  08008c10  0000a068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008c10  08008c10  00009c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c18  08008c18  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c18  08008c18  00009c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c1c  08008c1c  00009c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008c20  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a068  2**0
                  CONTENTS
 10 .bss          000007fc  20000068  20000068  0000a068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000864  20000864  0000a068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d8b0  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fe1  00000000  00000000  00027948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b70  00000000  00000000  0002b930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001552  00000000  00000000  0002d4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029470  00000000  00000000  0002e9f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000228d7  00000000  00000000  00057e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb75a  00000000  00000000  0007a739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00165e93  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007c88  00000000  00000000  00165ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0016db60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008a58 	.word	0x08008a58

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08008a58 	.word	0x08008a58

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f001 fed4 	bl	800236c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f846 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 fae0 	bl	8000b8c <MX_GPIO_Init>
  MX_CRC_Init();
 80005cc:	f000 f8ac 	bl	8000728 <MX_CRC_Init>
  MX_DMA2D_Init();
 80005d0:	f000 f8be 	bl	8000750 <MX_DMA2D_Init>
  MX_FMC_Init();
 80005d4:	f000 fa8a 	bl	8000aec <MX_FMC_Init>
  MX_I2C3_Init();
 80005d8:	f000 f8ec 	bl	80007b4 <MX_I2C3_Init>
  MX_LTDC_Init();
 80005dc:	f000 f92a 	bl	8000834 <MX_LTDC_Init>
  MX_SPI5_Init();
 80005e0:	f000 f9a8 	bl	8000934 <MX_SPI5_Init>
  MX_TIM1_Init();
 80005e4:	f000 f9dc 	bl	80009a0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005e8:	f000 fa2a 	bl	8000a40 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 80005ec:	f000 fa52 	bl	8000a94 <MX_USB_OTG_HS_HCD_Init>
  /* USER CODE BEGIN 2 */

  //-----------------------------MY CODE ----------------------------------------
  if (SWD_Init() != SWD_ERROR_OK) Error_Handler(); /* early exit on failure */
 80005f0:	f001 f908 	bl	8001804 <SWD_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <main+0x42>
 80005fa:	f000 fbe9 	bl	8000dd0 <Error_Handler>

  if (SWD_Halt_Target(), SWD_Unlock_Flash()!= SWD_ERROR_OK || SWD_Erase_Page(FLASH_BASE)!= SWD_ERROR_OK || SWD_Write_Firmware()!= SWD_ERROR_OK){
 80005fe:	f001 f8df 	bl	80017c0 <SWD_Halt_Target>
 8000602:	f001 fa17 	bl	8001a34 <SWD_Unlock_Flash>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d10b      	bne.n	8000624 <main+0x68>
 800060c:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8000610:	f001 fa22 	bl	8001a58 <SWD_Erase_Page>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d104      	bne.n	8000624 <main+0x68>
 800061a:	f001 fa85 	bl	8001b28 <SWD_Write_Firmware>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <main+0x6c>
 8000624:	2301      	movs	r3, #1
 8000626:	e000      	b.n	800062a <main+0x6e>
 8000628:	2300      	movs	r3, #0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <main+0x76>
	  Error_Handler();/* any step failed   */
 800062e:	f000 fbcf 	bl	8000dd0 <Error_Handler>
	}

	if (SWD_Verify_Firmware() == SWD_ERROR_OK)
 8000632:	f001 fa9f 	bl	8001b74 <SWD_Verify_Firmware>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d102      	bne.n	8000642 <main+0x86>
	  SWD_Lock_Flash();
 800063c:	f001 fae2 	bl	8001c04 <SWD_Lock_Flash>
 8000640:	e003      	b.n	800064a <main+0x8e>
	else
	  SWD_LOG("Firmware verification failed. Lock skipped.\n");
 8000642:	4803      	ldr	r0, [pc, #12]	@ (8000650 <main+0x94>)
 8000644:	f007 fba6 	bl	8007d94 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000648:	bf00      	nop
 800064a:	bf00      	nop
 800064c:	e7fd      	b.n	800064a <main+0x8e>
 800064e:	bf00      	nop
 8000650:	08008a70 	.word	0x08008a70

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	@ 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2230      	movs	r2, #48	@ 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f007 fc76 	bl	8007f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b28      	ldr	r3, [pc, #160]	@ (8000720 <SystemClock_Config+0xcc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	4a27      	ldr	r2, [pc, #156]	@ (8000720 <SystemClock_Config+0xcc>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	@ 0x40
 8000688:	4b25      	ldr	r3, [pc, #148]	@ (8000720 <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b22      	ldr	r3, [pc, #136]	@ (8000724 <SystemClock_Config+0xd0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a0:	4a20      	ldr	r2, [pc, #128]	@ (8000724 <SystemClock_Config+0xd0>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000724 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b4:	2301      	movs	r3, #1
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006cc:	2348      	movs	r3, #72	@ 0x48
 80006ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006d4:	2303      	movs	r3, #3
 80006d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f004 fecb 	bl	8005478 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006e8:	f000 fb72 	bl	8000dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2302      	movs	r3, #2
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2102      	movs	r1, #2
 8000708:	4618      	mov	r0, r3
 800070a:	f005 f92d 	bl	8005968 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000714:	f000 fb5c 	bl	8000dd0 <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3750      	adds	r7, #80	@ 0x50
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_CRC_Init+0x20>)
 800072e:	4a07      	ldr	r2, [pc, #28]	@ (800074c <MX_CRC_Init+0x24>)
 8000730:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <MX_CRC_Init+0x20>)
 8000734:	f001 ff62 	bl	80025fc <HAL_CRC_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800073e:	f000 fb47 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000084 	.word	0x20000084
 800074c:	40023000 	.word	0x40023000

08000750 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000754:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <MX_DMA2D_Init+0x5c>)
 8000756:	4a16      	ldr	r2, [pc, #88]	@ (80007b0 <MX_DMA2D_Init+0x60>)
 8000758:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800075a:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <MX_DMA2D_Init+0x5c>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <MX_DMA2D_Init+0x5c>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000766:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <MX_DMA2D_Init+0x5c>)
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800076c:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_DMA2D_Init+0x5c>)
 800076e:	2200      	movs	r2, #0
 8000770:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_DMA2D_Init+0x5c>)
 8000774:	2200      	movs	r2, #0
 8000776:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <MX_DMA2D_Init+0x5c>)
 800077a:	2200      	movs	r2, #0
 800077c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800077e:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <MX_DMA2D_Init+0x5c>)
 8000780:	2200      	movs	r2, #0
 8000782:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000784:	4809      	ldr	r0, [pc, #36]	@ (80007ac <MX_DMA2D_Init+0x5c>)
 8000786:	f001 ff55 	bl	8002634 <HAL_DMA2D_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000790:	f000 fb1e 	bl	8000dd0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000794:	2101      	movs	r1, #1
 8000796:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_DMA2D_Init+0x5c>)
 8000798:	f002 f8a6 	bl	80028e8 <HAL_DMA2D_ConfigLayer>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80007a2:	f000 fb15 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000008c 	.word	0x2000008c
 80007b0:	4002b000 	.word	0x4002b000

080007b4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <MX_I2C3_Init+0x74>)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	@ (800082c <MX_I2C3_Init+0x78>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80007be:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <MX_I2C3_Init+0x74>)
 80007c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000830 <MX_I2C3_Init+0x7c>)
 80007c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c4:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <MX_I2C3_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80007ca:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <MX_I2C3_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <MX_I2C3_Init+0x74>)
 80007d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007d6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d8:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <MX_I2C3_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80007de:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_I2C3_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e4:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <MX_I2C3_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_I2C3_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007f0:	480d      	ldr	r0, [pc, #52]	@ (8000828 <MX_I2C3_Init+0x74>)
 80007f2:	f004 f919 	bl	8004a28 <HAL_I2C_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007fc:	f000 fae8 	bl	8000dd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000800:	2100      	movs	r1, #0
 8000802:	4809      	ldr	r0, [pc, #36]	@ (8000828 <MX_I2C3_Init+0x74>)
 8000804:	f004 fa54 	bl	8004cb0 <HAL_I2CEx_ConfigAnalogFilter>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800080e:	f000 fadf 	bl	8000dd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000812:	2100      	movs	r1, #0
 8000814:	4804      	ldr	r0, [pc, #16]	@ (8000828 <MX_I2C3_Init+0x74>)
 8000816:	f004 fa87 	bl	8004d28 <HAL_I2CEx_ConfigDigitalFilter>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000820:	f000 fad6 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000cc 	.word	0x200000cc
 800082c:	40005c00 	.word	0x40005c00
 8000830:	000186a0 	.word	0x000186a0

08000834 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08e      	sub	sp, #56	@ 0x38
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2234      	movs	r2, #52	@ 0x34
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f007 fb87 	bl	8007f54 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000846:	4b39      	ldr	r3, [pc, #228]	@ (800092c <MX_LTDC_Init+0xf8>)
 8000848:	4a39      	ldr	r2, [pc, #228]	@ (8000930 <MX_LTDC_Init+0xfc>)
 800084a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800084c:	4b37      	ldr	r3, [pc, #220]	@ (800092c <MX_LTDC_Init+0xf8>)
 800084e:	2200      	movs	r2, #0
 8000850:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000852:	4b36      	ldr	r3, [pc, #216]	@ (800092c <MX_LTDC_Init+0xf8>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000858:	4b34      	ldr	r3, [pc, #208]	@ (800092c <MX_LTDC_Init+0xf8>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800085e:	4b33      	ldr	r3, [pc, #204]	@ (800092c <MX_LTDC_Init+0xf8>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000864:	4b31      	ldr	r3, [pc, #196]	@ (800092c <MX_LTDC_Init+0xf8>)
 8000866:	2209      	movs	r2, #9
 8000868:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800086a:	4b30      	ldr	r3, [pc, #192]	@ (800092c <MX_LTDC_Init+0xf8>)
 800086c:	2201      	movs	r2, #1
 800086e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000870:	4b2e      	ldr	r3, [pc, #184]	@ (800092c <MX_LTDC_Init+0xf8>)
 8000872:	221d      	movs	r2, #29
 8000874:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000876:	4b2d      	ldr	r3, [pc, #180]	@ (800092c <MX_LTDC_Init+0xf8>)
 8000878:	2203      	movs	r2, #3
 800087a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800087c:	4b2b      	ldr	r3, [pc, #172]	@ (800092c <MX_LTDC_Init+0xf8>)
 800087e:	f240 120d 	movw	r2, #269	@ 0x10d
 8000882:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000884:	4b29      	ldr	r3, [pc, #164]	@ (800092c <MX_LTDC_Init+0xf8>)
 8000886:	f240 1243 	movw	r2, #323	@ 0x143
 800088a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 800088c:	4b27      	ldr	r3, [pc, #156]	@ (800092c <MX_LTDC_Init+0xf8>)
 800088e:	f240 1217 	movw	r2, #279	@ 0x117
 8000892:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000894:	4b25      	ldr	r3, [pc, #148]	@ (800092c <MX_LTDC_Init+0xf8>)
 8000896:	f240 1247 	movw	r2, #327	@ 0x147
 800089a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800089c:	4b23      	ldr	r3, [pc, #140]	@ (800092c <MX_LTDC_Init+0xf8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80008a4:	4b21      	ldr	r3, [pc, #132]	@ (800092c <MX_LTDC_Init+0xf8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008ac:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <MX_LTDC_Init+0xf8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008b4:	481d      	ldr	r0, [pc, #116]	@ (800092c <MX_LTDC_Init+0xf8>)
 80008b6:	f004 fa77 	bl	8004da8 <HAL_LTDC_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80008c0:	f000 fa86 	bl	8000dd0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80008c8:	23f0      	movs	r3, #240	@ 0xf0
 80008ca:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80008d0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80008d4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80008d6:	2302      	movs	r3, #2
 80008d8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80008da:	23ff      	movs	r3, #255	@ 0xff
 80008dc:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80008e2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008e6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80008e8:	2307      	movs	r3, #7
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80008ec:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 80008f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 80008f2:	23f0      	movs	r3, #240	@ 0xf0
 80008f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 80008f6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80008fa:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	@ (800092c <MX_LTDC_Init+0xf8>)
 8000916:	f004 fbd9 	bl	80050cc <HAL_LTDC_ConfigLayer>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000920:	f000 fa56 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	3738      	adds	r7, #56	@ 0x38
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000120 	.word	0x20000120
 8000930:	40016800 	.word	0x40016800

08000934 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000938:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <MX_SPI5_Init+0x64>)
 800093a:	4a18      	ldr	r2, [pc, #96]	@ (800099c <MX_SPI5_Init+0x68>)
 800093c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800093e:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <MX_SPI5_Init+0x64>)
 8000940:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000944:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000946:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <MX_SPI5_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800094c:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <MX_SPI5_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000952:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <MX_SPI5_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000958:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <MX_SPI5_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800095e:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <MX_SPI5_Init+0x64>)
 8000960:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000964:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000966:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <MX_SPI5_Init+0x64>)
 8000968:	2218      	movs	r2, #24
 800096a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800096c:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <MX_SPI5_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000972:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <MX_SPI5_Init+0x64>)
 8000974:	2200      	movs	r2, #0
 8000976:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000978:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <MX_SPI5_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800097e:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <MX_SPI5_Init+0x64>)
 8000980:	220a      	movs	r2, #10
 8000982:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000984:	4804      	ldr	r0, [pc, #16]	@ (8000998 <MX_SPI5_Init+0x64>)
 8000986:	f005 fc35 	bl	80061f4 <HAL_SPI_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000990:	f000 fa1e 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200001c8 	.word	0x200001c8
 800099c:	40015000 	.word	0x40015000

080009a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	463b      	mov	r3, r7
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a38 <MX_TIM1_Init+0x98>)
 80009be:	4a1f      	ldr	r2, [pc, #124]	@ (8000a3c <MX_TIM1_Init+0x9c>)
 80009c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a38 <MX_TIM1_Init+0x98>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a38 <MX_TIM1_Init+0x98>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <MX_TIM1_Init+0x98>)
 80009d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d6:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <MX_TIM1_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009dc:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <MX_TIM1_Init+0x98>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <MX_TIM1_Init+0x98>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009e8:	4813      	ldr	r0, [pc, #76]	@ (8000a38 <MX_TIM1_Init+0x98>)
 80009ea:	f005 fc8c 	bl	8006306 <HAL_TIM_Base_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009f4:	f000 f9ec 	bl	8000dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	4619      	mov	r1, r3
 8000a04:	480c      	ldr	r0, [pc, #48]	@ (8000a38 <MX_TIM1_Init+0x98>)
 8000a06:	f005 fe2d 	bl	8006664 <HAL_TIM_ConfigClockSource>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a10:	f000 f9de 	bl	8000dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a14:	2300      	movs	r3, #0
 8000a16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <MX_TIM1_Init+0x98>)
 8000a22:	f006 f855 	bl	8006ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a2c:	f000 f9d0 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000220 	.word	0x20000220
 8000a3c:	40010000 	.word	0x40010000

08000a40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a44:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	@ (8000a90 <MX_USART1_UART_Init+0x50>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a78:	f006 f8ba 	bl	8006bf0 <HAL_UART_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a82:	f000 f9a5 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000268 	.word	0x20000268
 8000a90:	40011000 	.word	0x40011000

08000a94 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000a9a:	4a13      	ldr	r2, [pc, #76]	@ (8000ae8 <MX_USB_OTG_HS_HCD_Init+0x54>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000aa0:	220c      	movs	r2, #12
 8000aa2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000abc:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ad0:	f002 f979 	bl	8002dc6 <HAL_HCD_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8000ada:	f000 f979 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200002b0 	.word	0x200002b0
 8000ae8:	40040000 	.word	0x40040000

08000aec <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
 8000b00:	615a      	str	r2, [r3, #20]
 8000b02:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b04:	4b1f      	ldr	r3, [pc, #124]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b06:	4a20      	ldr	r2, [pc, #128]	@ (8000b88 <MX_FMC_Init+0x9c>)
 8000b08:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b10:	4b1c      	ldr	r3, [pc, #112]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b16:	4b1b      	ldr	r3, [pc, #108]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b18:	2204      	movs	r2, #4
 8000b1a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b1c:	4b19      	ldr	r3, [pc, #100]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b1e:	2210      	movs	r2, #16
 8000b20:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b22:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b24:	2240      	movs	r2, #64	@ 0x40
 8000b26:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b28:	4b16      	ldr	r3, [pc, #88]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b2a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000b2e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b30:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b36:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b3c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b4a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b50:	2307      	movs	r3, #7
 8000b52:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b54:	2304      	movs	r3, #4
 8000b56:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b58:	2307      	movs	r3, #7
 8000b5a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b60:	2302      	movs	r3, #2
 8000b62:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <MX_FMC_Init+0x98>)
 8000b6e:	f005 fb0d 	bl	800618c <HAL_SDRAM_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b78:	f000 f92a 	bl	8000dd0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b7c:	bf00      	nop
 8000b7e:	3720      	adds	r7, #32
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000690 	.word	0x20000690
 8000b88:	a0000140 	.word	0xa0000140

08000b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08e      	sub	sp, #56	@ 0x38
 8000b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
 8000ba6:	4b7b      	ldr	r3, [pc, #492]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a7a      	ldr	r2, [pc, #488]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b78      	ldr	r3, [pc, #480]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	623b      	str	r3, [r7, #32]
 8000bbc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
 8000bc2:	4b74      	ldr	r3, [pc, #464]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a73      	ldr	r2, [pc, #460]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000bc8:	f043 0320 	orr.w	r3, r3, #32
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b71      	ldr	r3, [pc, #452]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0320 	and.w	r3, r3, #32
 8000bd6:	61fb      	str	r3, [r7, #28]
 8000bd8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
 8000bde:	4b6d      	ldr	r3, [pc, #436]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a6c      	ldr	r2, [pc, #432]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b6a      	ldr	r3, [pc, #424]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bf2:	61bb      	str	r3, [r7, #24]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	4b66      	ldr	r3, [pc, #408]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a65      	ldr	r2, [pc, #404]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b63      	ldr	r3, [pc, #396]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b5f      	ldr	r3, [pc, #380]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a5e      	ldr	r2, [pc, #376]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b5c      	ldr	r3, [pc, #368]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b58      	ldr	r3, [pc, #352]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a57      	ldr	r2, [pc, #348]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b55      	ldr	r3, [pc, #340]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	4b51      	ldr	r3, [pc, #324]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a50      	ldr	r2, [pc, #320]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c54:	f043 0310 	orr.w	r3, r3, #16
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b4e      	ldr	r3, [pc, #312]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0310 	and.w	r3, r3, #16
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4b4a      	ldr	r3, [pc, #296]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a49      	ldr	r2, [pc, #292]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c70:	f043 0308 	orr.w	r3, r3, #8
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b47      	ldr	r3, [pc, #284]	@ (8000d94 <MX_GPIO_Init+0x208>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f003 0308 	and.w	r3, r3, #8
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2116      	movs	r1, #22
 8000c86:	4844      	ldr	r0, [pc, #272]	@ (8000d98 <MX_GPIO_Init+0x20c>)
 8000c88:	f002 f884 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2180      	movs	r1, #128	@ 0x80
 8000c90:	4842      	ldr	r0, [pc, #264]	@ (8000d9c <MX_GPIO_Init+0x210>)
 8000c92:	f002 f87f 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000c9c:	4840      	ldr	r0, [pc, #256]	@ (8000da0 <MX_GPIO_Init+0x214>)
 8000c9e:	f002 f879 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000ca8:	483e      	ldr	r0, [pc, #248]	@ (8000da4 <MX_GPIO_Init+0x218>)
 8000caa:	f002 f873 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000cae:	2316      	movs	r3, #22
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4834      	ldr	r0, [pc, #208]	@ (8000d98 <MX_GPIO_Init+0x20c>)
 8000cc6:	f001 fea1 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000cca:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cd0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cde:	4619      	mov	r1, r3
 8000ce0:	482e      	ldr	r0, [pc, #184]	@ (8000d9c <MX_GPIO_Init+0x210>)
 8000ce2:	f001 fe93 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000ce6:	2380      	movs	r3, #128	@ 0x80
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4827      	ldr	r0, [pc, #156]	@ (8000d9c <MX_GPIO_Init+0x210>)
 8000cfe:	f001 fe85 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d02:	2320      	movs	r3, #32
 8000d04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d06:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	4820      	ldr	r0, [pc, #128]	@ (8000d98 <MX_GPIO_Init+0x20c>)
 8000d18:	f001 fe78 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	481e      	ldr	r0, [pc, #120]	@ (8000da8 <MX_GPIO_Init+0x21c>)
 8000d30:	f001 fe6c 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000d34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000d42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d46:	4619      	mov	r1, r3
 8000d48:	4815      	ldr	r0, [pc, #84]	@ (8000da0 <MX_GPIO_Init+0x214>)
 8000d4a:	f001 fe5f 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000d4e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	480e      	ldr	r0, [pc, #56]	@ (8000da0 <MX_GPIO_Init+0x214>)
 8000d68:	f001 fe50 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d6c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000d70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d82:	4619      	mov	r1, r3
 8000d84:	4807      	ldr	r0, [pc, #28]	@ (8000da4 <MX_GPIO_Init+0x218>)
 8000d86:	f001 fe41 	bl	8002a0c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d8a:	bf00      	nop
 8000d8c:	3738      	adds	r7, #56	@ 0x38
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	40020c00 	.word	0x40020c00
 8000da4:	40021800 	.word	0x40021800
 8000da8:	40020400 	.word	0x40020400

08000dac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a04      	ldr	r2, [pc, #16]	@ (8000dcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d101      	bne.n	8000dc2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000dbe:	f001 faf7 	bl	80023b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40001000 	.word	0x40001000

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
}
 8000dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <Error_Handler+0x8>

08000ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <HAL_MspInit+0x4c>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dea:	4a0f      	ldr	r2, [pc, #60]	@ (8000e28 <HAL_MspInit+0x4c>)
 8000dec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000df2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e28 <HAL_MspInit+0x4c>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	603b      	str	r3, [r7, #0]
 8000e02:	4b09      	ldr	r3, [pc, #36]	@ (8000e28 <HAL_MspInit+0x4c>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e06:	4a08      	ldr	r2, [pc, #32]	@ (8000e28 <HAL_MspInit+0x4c>)
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0e:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <HAL_MspInit+0x4c>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800

08000e2c <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0b      	ldr	r2, [pc, #44]	@ (8000e68 <HAL_CRC_MspInit+0x3c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d10d      	bne.n	8000e5a <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <HAL_CRC_MspInit+0x40>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a09      	ldr	r2, [pc, #36]	@ (8000e6c <HAL_CRC_MspInit+0x40>)
 8000e48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <HAL_CRC_MspInit+0x40>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40023000 	.word	0x40023000
 8000e6c:	40023800 	.word	0x40023800

08000e70 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0e      	ldr	r2, [pc, #56]	@ (8000eb8 <HAL_DMA2D_MspInit+0x48>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d115      	bne.n	8000eae <HAL_DMA2D_MspInit+0x3e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <HAL_DMA2D_MspInit+0x4c>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a0c      	ldr	r2, [pc, #48]	@ (8000ebc <HAL_DMA2D_MspInit+0x4c>)
 8000e8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e92:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <HAL_DMA2D_MspInit+0x4c>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2105      	movs	r1, #5
 8000ea2:	205a      	movs	r0, #90	@ 0x5a
 8000ea4:	f001 fb80 	bl	80025a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000ea8:	205a      	movs	r0, #90	@ 0x5a
 8000eaa:	f001 fb99 	bl	80025e0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	4002b000 	.word	0x4002b000
 8000ebc:	40023800 	.word	0x40023800

08000ec0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	@ 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a29      	ldr	r2, [pc, #164]	@ (8000f84 <HAL_I2C_MspInit+0xc4>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d14b      	bne.n	8000f7a <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b28      	ldr	r3, [pc, #160]	@ (8000f88 <HAL_I2C_MspInit+0xc8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	4a27      	ldr	r2, [pc, #156]	@ (8000f88 <HAL_I2C_MspInit+0xc8>)
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef2:	4b25      	ldr	r3, [pc, #148]	@ (8000f88 <HAL_I2C_MspInit+0xc8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b21      	ldr	r3, [pc, #132]	@ (8000f88 <HAL_I2C_MspInit+0xc8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	4a20      	ldr	r2, [pc, #128]	@ (8000f88 <HAL_I2C_MspInit+0xc8>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f88 <HAL_I2C_MspInit+0xc8>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f20:	2312      	movs	r3, #18
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4815      	ldr	r0, [pc, #84]	@ (8000f8c <HAL_I2C_MspInit+0xcc>)
 8000f38:	f001 fd68 	bl	8002a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f42:	2312      	movs	r3, #18
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f4e:	2304      	movs	r3, #4
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	480d      	ldr	r0, [pc, #52]	@ (8000f90 <HAL_I2C_MspInit+0xd0>)
 8000f5a:	f001 fd57 	bl	8002a0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	4b09      	ldr	r3, [pc, #36]	@ (8000f88 <HAL_I2C_MspInit+0xc8>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f66:	4a08      	ldr	r2, [pc, #32]	@ (8000f88 <HAL_I2C_MspInit+0xc8>)
 8000f68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f6e:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <HAL_I2C_MspInit+0xc8>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	@ 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40005c00 	.word	0x40005c00
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	40020000 	.word	0x40020000

08000f94 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b09a      	sub	sp, #104	@ 0x68
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb0:	2230      	movs	r2, #48	@ 0x30
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f006 ffcd 	bl	8007f54 <memset>
  if(hltdc->Instance==LTDC)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a85      	ldr	r2, [pc, #532]	@ (80011d4 <HAL_LTDC_MspInit+0x240>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	f040 8102 	bne.w	80011ca <HAL_LTDC_MspInit+0x236>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000fca:	2332      	movs	r3, #50	@ 0x32
 8000fcc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f004 ff16 	bl	8005e0c <HAL_RCCEx_PeriphCLKConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000fe6:	f7ff fef3 	bl	8000dd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
 8000fee:	4b7a      	ldr	r3, [pc, #488]	@ (80011d8 <HAL_LTDC_MspInit+0x244>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	4a79      	ldr	r2, [pc, #484]	@ (80011d8 <HAL_LTDC_MspInit+0x244>)
 8000ff4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffa:	4b77      	ldr	r3, [pc, #476]	@ (80011d8 <HAL_LTDC_MspInit+0x244>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001002:	623b      	str	r3, [r7, #32]
 8001004:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
 800100a:	4b73      	ldr	r3, [pc, #460]	@ (80011d8 <HAL_LTDC_MspInit+0x244>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	4a72      	ldr	r2, [pc, #456]	@ (80011d8 <HAL_LTDC_MspInit+0x244>)
 8001010:	f043 0320 	orr.w	r3, r3, #32
 8001014:	6313      	str	r3, [r2, #48]	@ 0x30
 8001016:	4b70      	ldr	r3, [pc, #448]	@ (80011d8 <HAL_LTDC_MspInit+0x244>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	f003 0320 	and.w	r3, r3, #32
 800101e:	61fb      	str	r3, [r7, #28]
 8001020:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
 8001026:	4b6c      	ldr	r3, [pc, #432]	@ (80011d8 <HAL_LTDC_MspInit+0x244>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	4a6b      	ldr	r2, [pc, #428]	@ (80011d8 <HAL_LTDC_MspInit+0x244>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
 8001032:	4b69      	ldr	r3, [pc, #420]	@ (80011d8 <HAL_LTDC_MspInit+0x244>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	61bb      	str	r3, [r7, #24]
 800103c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	4b65      	ldr	r3, [pc, #404]	@ (80011d8 <HAL_LTDC_MspInit+0x244>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4a64      	ldr	r2, [pc, #400]	@ (80011d8 <HAL_LTDC_MspInit+0x244>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
 800104e:	4b62      	ldr	r3, [pc, #392]	@ (80011d8 <HAL_LTDC_MspInit+0x244>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	4b5e      	ldr	r3, [pc, #376]	@ (80011d8 <HAL_LTDC_MspInit+0x244>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	4a5d      	ldr	r2, [pc, #372]	@ (80011d8 <HAL_LTDC_MspInit+0x244>)
 8001064:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001068:	6313      	str	r3, [r2, #48]	@ 0x30
 800106a:	4b5b      	ldr	r3, [pc, #364]	@ (80011d8 <HAL_LTDC_MspInit+0x244>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b57      	ldr	r3, [pc, #348]	@ (80011d8 <HAL_LTDC_MspInit+0x244>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	4a56      	ldr	r2, [pc, #344]	@ (80011d8 <HAL_LTDC_MspInit+0x244>)
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	6313      	str	r3, [r2, #48]	@ 0x30
 8001086:	4b54      	ldr	r3, [pc, #336]	@ (80011d8 <HAL_LTDC_MspInit+0x244>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	4b50      	ldr	r3, [pc, #320]	@ (80011d8 <HAL_LTDC_MspInit+0x244>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	4a4f      	ldr	r2, [pc, #316]	@ (80011d8 <HAL_LTDC_MspInit+0x244>)
 800109c:	f043 0308 	orr.w	r3, r3, #8
 80010a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a2:	4b4d      	ldr	r3, [pc, #308]	@ (80011d8 <HAL_LTDC_MspInit+0x244>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80010ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010b2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010c0:	230e      	movs	r3, #14
 80010c2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80010c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010c8:	4619      	mov	r1, r3
 80010ca:	4844      	ldr	r0, [pc, #272]	@ (80011dc <HAL_LTDC_MspInit+0x248>)
 80010cc:	f001 fc9e 	bl	8002a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80010d0:	f641 0358 	movw	r3, #6232	@ 0x1858
 80010d4:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010e2:	230e      	movs	r3, #14
 80010e4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010ea:	4619      	mov	r1, r3
 80010ec:	483c      	ldr	r0, [pc, #240]	@ (80011e0 <HAL_LTDC_MspInit+0x24c>)
 80010ee:	f001 fc8d 	bl	8002a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80010f2:	2303      	movs	r3, #3
 80010f4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001102:	2309      	movs	r3, #9
 8001104:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800110a:	4619      	mov	r1, r3
 800110c:	4835      	ldr	r0, [pc, #212]	@ (80011e4 <HAL_LTDC_MspInit+0x250>)
 800110e:	f001 fc7d 	bl	8002a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001112:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001116:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001124:	230e      	movs	r3, #14
 8001126:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001128:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800112c:	4619      	mov	r1, r3
 800112e:	482d      	ldr	r0, [pc, #180]	@ (80011e4 <HAL_LTDC_MspInit+0x250>)
 8001130:	f001 fc6c 	bl	8002a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001134:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001138:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001146:	230e      	movs	r3, #14
 8001148:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800114a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800114e:	4619      	mov	r1, r3
 8001150:	4825      	ldr	r0, [pc, #148]	@ (80011e8 <HAL_LTDC_MspInit+0x254>)
 8001152:	f001 fc5b 	bl	8002a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001156:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800115a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001168:	230e      	movs	r3, #14
 800116a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001170:	4619      	mov	r1, r3
 8001172:	481e      	ldr	r0, [pc, #120]	@ (80011ec <HAL_LTDC_MspInit+0x258>)
 8001174:	f001 fc4a 	bl	8002a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001178:	2348      	movs	r3, #72	@ 0x48
 800117a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001188:	230e      	movs	r3, #14
 800118a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800118c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001190:	4619      	mov	r1, r3
 8001192:	4817      	ldr	r0, [pc, #92]	@ (80011f0 <HAL_LTDC_MspInit+0x25c>)
 8001194:	f001 fc3a 	bl	8002a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001198:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800119c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011aa:	2309      	movs	r3, #9
 80011ac:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b2:	4619      	mov	r1, r3
 80011b4:	480c      	ldr	r0, [pc, #48]	@ (80011e8 <HAL_LTDC_MspInit+0x254>)
 80011b6:	f001 fc29 	bl	8002a0c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2105      	movs	r1, #5
 80011be:	2058      	movs	r0, #88	@ 0x58
 80011c0:	f001 f9f2 	bl	80025a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011c4:	2058      	movs	r0, #88	@ 0x58
 80011c6:	f001 fa0b 	bl	80025e0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 80011ca:	bf00      	nop
 80011cc:	3768      	adds	r7, #104	@ 0x68
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40016800 	.word	0x40016800
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40021400 	.word	0x40021400
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020400 	.word	0x40020400
 80011e8:	40021800 	.word	0x40021800
 80011ec:	40020800 	.word	0x40020800
 80011f0:	40020c00 	.word	0x40020c00

080011f4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	@ 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a19      	ldr	r2, [pc, #100]	@ (8001278 <HAL_SPI_MspInit+0x84>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d12c      	bne.n	8001270 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b18      	ldr	r3, [pc, #96]	@ (800127c <HAL_SPI_MspInit+0x88>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	4a17      	ldr	r2, [pc, #92]	@ (800127c <HAL_SPI_MspInit+0x88>)
 8001220:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001224:	6453      	str	r3, [r2, #68]	@ 0x44
 8001226:	4b15      	ldr	r3, [pc, #84]	@ (800127c <HAL_SPI_MspInit+0x88>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <HAL_SPI_MspInit+0x88>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a10      	ldr	r2, [pc, #64]	@ (800127c <HAL_SPI_MspInit+0x88>)
 800123c:	f043 0320 	orr.w	r3, r3, #32
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <HAL_SPI_MspInit+0x88>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0320 	and.w	r3, r3, #32
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800124e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001260:	2305      	movs	r3, #5
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	4805      	ldr	r0, [pc, #20]	@ (8001280 <HAL_SPI_MspInit+0x8c>)
 800126c:	f001 fbce 	bl	8002a0c <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001270:	bf00      	nop
 8001272:	3728      	adds	r7, #40	@ 0x28
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40015000 	.word	0x40015000
 800127c:	40023800 	.word	0x40023800
 8001280:	40021400 	.word	0x40021400

08001284 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0b      	ldr	r2, [pc, #44]	@ (80012c0 <HAL_TIM_Base_MspInit+0x3c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d10d      	bne.n	80012b2 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b0a      	ldr	r3, [pc, #40]	@ (80012c4 <HAL_TIM_Base_MspInit+0x40>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129e:	4a09      	ldr	r2, [pc, #36]	@ (80012c4 <HAL_TIM_Base_MspInit+0x40>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012a6:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <HAL_TIM_Base_MspInit+0x40>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40010000 	.word	0x40010000
 80012c4:	40023800 	.word	0x40023800

080012c8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	@ 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a19      	ldr	r2, [pc, #100]	@ (800134c <HAL_UART_MspInit+0x84>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d12c      	bne.n	8001344 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <HAL_UART_MspInit+0x88>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	4a17      	ldr	r2, [pc, #92]	@ (8001350 <HAL_UART_MspInit+0x88>)
 80012f4:	f043 0310 	orr.w	r3, r3, #16
 80012f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <HAL_UART_MspInit+0x88>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	f003 0310 	and.w	r3, r3, #16
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <HAL_UART_MspInit+0x88>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a10      	ldr	r2, [pc, #64]	@ (8001350 <HAL_UART_MspInit+0x88>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <HAL_UART_MspInit+0x88>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001322:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001334:	2307      	movs	r3, #7
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	4805      	ldr	r0, [pc, #20]	@ (8001354 <HAL_UART_MspInit+0x8c>)
 8001340:	f001 fb64 	bl	8002a0c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	@ 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40011000 	.word	0x40011000
 8001350:	40023800 	.word	0x40023800
 8001354:	40020000 	.word	0x40020000

08001358 <HAL_HCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhcd: HCD handle pointer
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	@ 0x28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_HS)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a24      	ldr	r2, [pc, #144]	@ (8001408 <HAL_HCD_MspInit+0xb0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d141      	bne.n	80013fe <HAL_HCD_MspInit+0xa6>
  {
    /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b23      	ldr	r3, [pc, #140]	@ (800140c <HAL_HCD_MspInit+0xb4>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	4a22      	ldr	r2, [pc, #136]	@ (800140c <HAL_HCD_MspInit+0xb4>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	6313      	str	r3, [r2, #48]	@ 0x30
 800138a:	4b20      	ldr	r3, [pc, #128]	@ (800140c <HAL_HCD_MspInit+0xb4>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001396:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80013a8:	230c      	movs	r3, #12
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	4817      	ldr	r0, [pc, #92]	@ (8001410 <HAL_HCD_MspInit+0xb8>)
 80013b4:	f001 fb2a 	bl	8002a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80013b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	4810      	ldr	r0, [pc, #64]	@ (8001410 <HAL_HCD_MspInit+0xb8>)
 80013ce:	f001 fb1d 	bl	8002a0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b0d      	ldr	r3, [pc, #52]	@ (800140c <HAL_HCD_MspInit+0xb4>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a0c      	ldr	r2, [pc, #48]	@ (800140c <HAL_HCD_MspInit+0xb4>)
 80013dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <HAL_HCD_MspInit+0xb4>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	204d      	movs	r0, #77	@ 0x4d
 80013f4:	f001 f8d8 	bl	80025a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80013f8:	204d      	movs	r0, #77	@ 0x4d
 80013fa:	f001 f8f1 	bl	80025e0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 80013fe:	bf00      	nop
 8001400:	3728      	adds	r7, #40	@ 0x28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40040000 	.word	0x40040000
 800140c:	40023800 	.word	0x40023800
 8001410:	40020400 	.word	0x40020400

08001414 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001428:	4b3b      	ldr	r3, [pc, #236]	@ (8001518 <HAL_FMC_MspInit+0x104>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d16f      	bne.n	8001510 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001430:	4b39      	ldr	r3, [pc, #228]	@ (8001518 <HAL_FMC_MspInit+0x104>)
 8001432:	2201      	movs	r2, #1
 8001434:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	4b38      	ldr	r3, [pc, #224]	@ (800151c <HAL_FMC_MspInit+0x108>)
 800143c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800143e:	4a37      	ldr	r2, [pc, #220]	@ (800151c <HAL_FMC_MspInit+0x108>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6393      	str	r3, [r2, #56]	@ 0x38
 8001446:	4b35      	ldr	r3, [pc, #212]	@ (800151c <HAL_FMC_MspInit+0x108>)
 8001448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001452:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001456:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001464:	230c      	movs	r3, #12
 8001466:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	4619      	mov	r1, r3
 800146c:	482c      	ldr	r0, [pc, #176]	@ (8001520 <HAL_FMC_MspInit+0x10c>)
 800146e:	f001 facd 	bl	8002a0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001472:	2301      	movs	r3, #1
 8001474:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001482:	230c      	movs	r3, #12
 8001484:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	4619      	mov	r1, r3
 800148a:	4826      	ldr	r0, [pc, #152]	@ (8001524 <HAL_FMC_MspInit+0x110>)
 800148c:	f001 fabe 	bl	8002a0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001490:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001494:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014a2:	230c      	movs	r3, #12
 80014a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	4619      	mov	r1, r3
 80014aa:	481f      	ldr	r0, [pc, #124]	@ (8001528 <HAL_FMC_MspInit+0x114>)
 80014ac:	f001 faae 	bl	8002a0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80014b0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80014b4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014c2:	230c      	movs	r3, #12
 80014c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	4818      	ldr	r0, [pc, #96]	@ (800152c <HAL_FMC_MspInit+0x118>)
 80014cc:	f001 fa9e 	bl	8002a0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80014d0:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80014d4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014e2:	230c      	movs	r3, #12
 80014e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	4619      	mov	r1, r3
 80014ea:	4811      	ldr	r0, [pc, #68]	@ (8001530 <HAL_FMC_MspInit+0x11c>)
 80014ec:	f001 fa8e 	bl	8002a0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80014f0:	2360      	movs	r3, #96	@ 0x60
 80014f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001500:	230c      	movs	r3, #12
 8001502:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	4619      	mov	r1, r3
 8001508:	480a      	ldr	r0, [pc, #40]	@ (8001534 <HAL_FMC_MspInit+0x120>)
 800150a:	f001 fa7f 	bl	8002a0c <HAL_GPIO_Init>
 800150e:	e000      	b.n	8001512 <HAL_FMC_MspInit+0xfe>
    return;
 8001510:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	200006c4 	.word	0x200006c4
 800151c:	40023800 	.word	0x40023800
 8001520:	40021400 	.word	0x40021400
 8001524:	40020800 	.word	0x40020800
 8001528:	40021800 	.word	0x40021800
 800152c:	40021000 	.word	0x40021000
 8001530:	40020c00 	.word	0x40020c00
 8001534:	40020400 	.word	0x40020400

08001538 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001540:	f7ff ff68 	bl	8001414 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08e      	sub	sp, #56	@ 0x38
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	4b33      	ldr	r3, [pc, #204]	@ (8001630 <HAL_InitTick+0xe4>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001564:	4a32      	ldr	r2, [pc, #200]	@ (8001630 <HAL_InitTick+0xe4>)
 8001566:	f043 0310 	orr.w	r3, r3, #16
 800156a:	6413      	str	r3, [r2, #64]	@ 0x40
 800156c:	4b30      	ldr	r3, [pc, #192]	@ (8001630 <HAL_InitTick+0xe4>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001570:	f003 0310 	and.w	r3, r3, #16
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001578:	f107 0210 	add.w	r2, r7, #16
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4611      	mov	r1, r2
 8001582:	4618      	mov	r0, r3
 8001584:	f004 fc10 	bl	8005da8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001588:	6a3b      	ldr	r3, [r7, #32]
 800158a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800158c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800158e:	2b00      	cmp	r3, #0
 8001590:	d103      	bne.n	800159a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001592:	f004 fbe1 	bl	8005d58 <HAL_RCC_GetPCLK1Freq>
 8001596:	6378      	str	r0, [r7, #52]	@ 0x34
 8001598:	e004      	b.n	80015a4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800159a:	f004 fbdd 	bl	8005d58 <HAL_RCC_GetPCLK1Freq>
 800159e:	4603      	mov	r3, r0
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015a6:	4a23      	ldr	r2, [pc, #140]	@ (8001634 <HAL_InitTick+0xe8>)
 80015a8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ac:	0c9b      	lsrs	r3, r3, #18
 80015ae:	3b01      	subs	r3, #1
 80015b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015b2:	4b21      	ldr	r3, [pc, #132]	@ (8001638 <HAL_InitTick+0xec>)
 80015b4:	4a21      	ldr	r2, [pc, #132]	@ (800163c <HAL_InitTick+0xf0>)
 80015b6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <HAL_InitTick+0xec>)
 80015ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015be:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001638 <HAL_InitTick+0xec>)
 80015c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <HAL_InitTick+0xec>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <HAL_InitTick+0xec>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d2:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <HAL_InitTick+0xec>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80015d8:	4817      	ldr	r0, [pc, #92]	@ (8001638 <HAL_InitTick+0xec>)
 80015da:	f004 fe94 	bl	8006306 <HAL_TIM_Base_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80015e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d11b      	bne.n	8001624 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015ec:	4812      	ldr	r0, [pc, #72]	@ (8001638 <HAL_InitTick+0xec>)
 80015ee:	f004 fed9 	bl	80063a4 <HAL_TIM_Base_Start_IT>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80015f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d111      	bne.n	8001624 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001600:	2036      	movs	r0, #54	@ 0x36
 8001602:	f000 ffed 	bl	80025e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b0f      	cmp	r3, #15
 800160a:	d808      	bhi.n	800161e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800160c:	2200      	movs	r2, #0
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	2036      	movs	r0, #54	@ 0x36
 8001612:	f000 ffc9 	bl	80025a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <HAL_InitTick+0xf4>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	e002      	b.n	8001624 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001624:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001628:	4618      	mov	r0, r3
 800162a:	3738      	adds	r7, #56	@ 0x38
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40023800 	.word	0x40023800
 8001634:	431bde83 	.word	0x431bde83
 8001638:	200006c8 	.word	0x200006c8
 800163c:	40001000 	.word	0x40001000
 8001640:	20000004 	.word	0x20000004

08001644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <NMI_Handler+0x4>

0800164c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <HardFault_Handler+0x4>

08001654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <MemManage_Handler+0x4>

0800165c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <UsageFault_Handler+0x4>

0800166c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016a8:	4802      	ldr	r0, [pc, #8]	@ (80016b4 <TIM6_DAC_IRQHandler+0x10>)
 80016aa:	f004 feeb 	bl	8006484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200006c8 	.word	0x200006c8

080016b8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80016bc:	4802      	ldr	r0, [pc, #8]	@ (80016c8 <OTG_HS_IRQHandler+0x10>)
 80016be:	f001 fbe9 	bl	8002e94 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200002b0 	.word	0x200002b0

080016cc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80016d0:	4802      	ldr	r0, [pc, #8]	@ (80016dc <LTDC_IRQHandler+0x10>)
 80016d2:	f003 fc39 	bl	8004f48 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000120 	.word	0x20000120

080016e0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80016e4:	4802      	ldr	r0, [pc, #8]	@ (80016f0 <DMA2D_IRQHandler+0x10>)
 80016e6:	f000 ffee 	bl	80026c6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000008c 	.word	0x2000008c

080016f4 <SWD_Write_Bit>:
 * SWD_Write_Bit
 * Writes a single bit to the SWDIO line and toggles SWCLK.
 * Parameters:
 *   bit – the bit value (0 or 1) to send.
 */
void SWD_Write_Bit(uint8_t bit) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(PORT_SWD, PIN_SWDIO, bit ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	2b00      	cmp	r3, #0
 8001702:	bf14      	ite	ne
 8001704:	2301      	movne	r3, #1
 8001706:	2300      	moveq	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	461a      	mov	r2, r3
 800170c:	2180      	movs	r1, #128	@ 0x80
 800170e:	4804      	ldr	r0, [pc, #16]	@ (8001720 <SWD_Write_Bit+0x2c>)
 8001710:	f001 fb40 	bl	8002d94 <HAL_GPIO_WritePin>
    SWCLK_Cycle();
 8001714:	f000 fb3e 	bl	8001d94 <SWCLK_Cycle>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40020400 	.word	0x40020400

08001724 <SWD_Write_DP>:
swd_error_t SWD_WriteReg(bool ap, uint8_t reg, uint32_t data, bool ignore_ack);
swd_error_t SWD_ReadReg (bool ap, uint8_t reg, uint32_t *data, bool ignore_ack);

/* Convenience wrappers (ignore_ack = false) */
static inline swd_error_t SWD_Write_DP(uint8_t reg, uint32_t data)
{ return SWD_WriteReg(false, reg, data, false); }
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
 8001730:	79f9      	ldrb	r1, [r7, #7]
 8001732:	2300      	movs	r3, #0
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	2000      	movs	r0, #0
 8001738:	f000 fb7a 	bl	8001e30 <SWD_WriteReg>
 800173c:	4603      	mov	r3, r0
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <SWD_Read_DP>:

static inline swd_error_t SWD_Read_DP(uint8_t reg, uint32_t *data)
{ return SWD_ReadReg(false, reg, data, false); }
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	6039      	str	r1, [r7, #0]
 8001750:	71fb      	strb	r3, [r7, #7]
 8001752:	79f9      	ldrb	r1, [r7, #7]
 8001754:	2300      	movs	r3, #0
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	2000      	movs	r0, #0
 800175a:	f000 fc47 	bl	8001fec <SWD_ReadReg>
 800175e:	4603      	mov	r3, r0
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <SWD_Send_SwitchSequence>:

/* -----------------------------------------------------------------------------
 *  Send 16 bit SWJ sequence 0xE79E  (switch JTAG ➜ SWD)
 * --------------------------------------------------------------------------*/
static void SWD_Send_SwitchSequence(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
    const uint16_t seq = 0xE79E;
 800176e:	f24e 739e 	movw	r3, #59294	@ 0xe79e
 8001772:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < 16; ++i)
 8001774:	2300      	movs	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	e00d      	b.n	8001796 <SWD_Send_SwitchSequence+0x2e>
    	SWD_Write_Bit((seq >> i) & 1);
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	fa42 f303 	asr.w	r3, r2, r3
 8001782:	b2db      	uxtb	r3, r3
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	b2db      	uxtb	r3, r3
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff ffb2 	bl	80016f4 <SWD_Write_Bit>
    for (int i = 0; i < 16; ++i)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3301      	adds	r3, #1
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	ddee      	ble.n	800177a <SWD_Send_SwitchSequence+0x12>
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <SWD_Read_IDCODE>:

/* -----------------------------------------------------------------------------
 *  Read 32 bit IDCODE (DP register 0x00)
 * --------------------------------------------------------------------------*/
static swd_error_t SWD_Read_IDCODE(uint32_t *idcode)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
    return SWD_Read_DP(0x0, idcode);   /* A3:A2 = 00b */
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	2000      	movs	r0, #0
 80017b2:	f7ff ffc8 	bl	8001746 <SWD_Read_DP>
 80017b6:	4603      	mov	r3, r0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <SWD_Halt_Target>:

/* -----------------------------------------------------------------------------
 *  Halt target core via DHCSR (0xE000EDF0)
 * --------------------------------------------------------------------------*/
void SWD_Halt_Target(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
    SWD_Write_TAR(0xE000EDF0);           /* DHCSR address */
 80017c4:	4803      	ldr	r0, [pc, #12]	@ (80017d4 <SWD_Halt_Target+0x14>)
 80017c6:	f000 f90c 	bl	80019e2 <SWD_Write_TAR>
    SWD_Write_DRW(0xA05F0003);           /* HALT + DBGKEY */
 80017ca:	4803      	ldr	r0, [pc, #12]	@ (80017d8 <SWD_Halt_Target+0x18>)
 80017cc:	f000 f916 	bl	80019fc <SWD_Write_DRW>
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	e000edf0 	.word	0xe000edf0
 80017d8:	a05f0003 	.word	0xa05f0003

080017dc <SWD_PowerUpDebugInterface>:

/* -----------------------------------------------------------------------------
 *  Power up debug interface (CDBGPWRUPREQ | CSYSPWRUPREQ)
 * --------------------------------------------------------------------------*/
static swd_error_t SWD_PowerUpDebugInterface(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
    return SWD_Write_DP(DP_CTRL_STAT, (1u << 28) | (1u << 30));
 80017e0:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 80017e4:	2001      	movs	r0, #1
 80017e6:	f7ff ff9d 	bl	8001724 <SWD_Write_DP>
 80017ea:	4603      	mov	r3, r0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <SWD_Select_AHB_AP>:

/* -----------------------------------------------------------------------------
 *  Select default AHB AP  (APSEL = 0, APBANKSEL = 0)
 * --------------------------------------------------------------------------*/
static swd_error_t SWD_Select_AHB_AP(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
    return SWD_Write_DP(DP_SELECT, 0x00000000);
 80017f4:	2100      	movs	r1, #0
 80017f6:	2002      	movs	r0, #2
 80017f8:	f7ff ff94 	bl	8001724 <SWD_Write_DP>
 80017fc:	4603      	mov	r3, r0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <SWD_Init>:

/* -----------------------------------------------------------------------------
 *  Public init sequence – returns swd_error_t
 * --------------------------------------------------------------------------*/
swd_error_t SWD_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
    SWD_GPIO_Init();
 800180a:	f000 fa8d 	bl	8001d28 <SWD_GPIO_Init>
    HAL_Delay(10);
 800180e:	200a      	movs	r0, #10
 8001810:	f000 fdee 	bl	80023f0 <HAL_Delay>

    /* Line reset and switch JTAG ➜ SWD */
    SWD_LineReset();
 8001814:	f000 fad4 	bl	8001dc0 <SWD_LineReset>
    SWD_Send_SwitchSequence();
 8001818:	f7ff ffa6 	bl	8001768 <SWD_Send_SwitchSequence>
    SWD_LineReset();
 800181c:	f000 fad0 	bl	8001dc0 <SWD_LineReset>

    /* Read IDCODE */
    uint32_t id;
    if (SWD_Read_IDCODE(&id) != SWD_ERROR_OK) {
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff ffbf 	bl	80017a6 <SWD_Read_IDCODE>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d004      	beq.n	8001838 <SWD_Init+0x34>
        printf("[SWD] Failed to read IDCODE\n");
 800182e:	481f      	ldr	r0, [pc, #124]	@ (80018ac <SWD_Init+0xa8>)
 8001830:	f006 fab0 	bl	8007d94 <puts>
        return SWD_ERROR_FAULT;
 8001834:	2302      	movs	r3, #2
 8001836:	e035      	b.n	80018a4 <SWD_Init+0xa0>
    }
    printf("[SWD] IDCODE = 0x%08lX\n", id);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4619      	mov	r1, r3
 800183c:	481c      	ldr	r0, [pc, #112]	@ (80018b0 <SWD_Init+0xac>)
 800183e:	f006 fa41 	bl	8007cc4 <iprintf>

    /* Request debug power up */
    if (SWD_PowerUpDebugInterface() != SWD_ERROR_OK) {
 8001842:	f7ff ffcb 	bl	80017dc <SWD_PowerUpDebugInterface>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d004      	beq.n	8001856 <SWD_Init+0x52>
        printf("[SWD] CTRL/STAT write failed\n");
 800184c:	4819      	ldr	r0, [pc, #100]	@ (80018b4 <SWD_Init+0xb0>)
 800184e:	f006 faa1 	bl	8007d94 <puts>
        return SWD_ERROR_FAULT;
 8001852:	2302      	movs	r3, #2
 8001854:	e026      	b.n	80018a4 <SWD_Init+0xa0>
    }

    /* Wait for power up ACK */
    if (!SWD_PollPowerUp(1000)) {
 8001856:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800185a:	f000 f89a 	bl	8001992 <SWD_PollPowerUp>
 800185e:	4603      	mov	r3, r0
 8001860:	f083 0301 	eor.w	r3, r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d004      	beq.n	8001874 <SWD_Init+0x70>
        printf("[SWD] Power‑up timeout\n");
 800186a:	4813      	ldr	r0, [pc, #76]	@ (80018b8 <SWD_Init+0xb4>)
 800186c:	f006 fa92 	bl	8007d94 <puts>
        return SWD_ERROR_WAIT;
 8001870:	2301      	movs	r3, #1
 8001872:	e017      	b.n	80018a4 <SWD_Init+0xa0>
    }

    if (SWD_ClearSticky() != SWD_ERROR_OK) {
 8001874:	f000 f8cf 	bl	8001a16 <SWD_ClearSticky>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d004      	beq.n	8001888 <SWD_Init+0x84>
        printf("[SWD] Failed to clear sticky flags\\n");
 800187e:	480f      	ldr	r0, [pc, #60]	@ (80018bc <SWD_Init+0xb8>)
 8001880:	f006 fa20 	bl	8007cc4 <iprintf>
        return SWD_ERROR_FAULT;
 8001884:	2302      	movs	r3, #2
 8001886:	e00d      	b.n	80018a4 <SWD_Init+0xa0>
    }

    /* Default AP selection */
    if (SWD_Select_AHB_AP() != SWD_ERROR_OK) {
 8001888:	f7ff ffb2 	bl	80017f0 <SWD_Select_AHB_AP>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d004      	beq.n	800189c <SWD_Init+0x98>
        printf("[SWD] SELECT write failed\n");
 8001892:	480b      	ldr	r0, [pc, #44]	@ (80018c0 <SWD_Init+0xbc>)
 8001894:	f006 fa7e 	bl	8007d94 <puts>
        return SWD_ERROR_FAULT;
 8001898:	2302      	movs	r3, #2
 800189a:	e003      	b.n	80018a4 <SWD_Init+0xa0>
    }

    HAL_Delay(10);
 800189c:	200a      	movs	r0, #10
 800189e:	f000 fda7 	bl	80023f0 <HAL_Delay>
    return SWD_ERROR_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	08008a9c 	.word	0x08008a9c
 80018b0:	08008ab8 	.word	0x08008ab8
 80018b4:	08008ad0 	.word	0x08008ad0
 80018b8:	08008af0 	.word	0x08008af0
 80018bc:	08008b0c 	.word	0x08008b0c
 80018c0:	08008b34 	.word	0x08008b34

080018c4 <SWD_Write_DP>:
{ return SWD_WriteReg(false, reg, data, false); }
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
 80018d0:	79f9      	ldrb	r1, [r7, #7]
 80018d2:	2300      	movs	r3, #0
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	2000      	movs	r0, #0
 80018d8:	f000 faaa 	bl	8001e30 <SWD_WriteReg>
 80018dc:	4603      	mov	r3, r0
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <SWD_Read_DP>:
{ return SWD_ReadReg(false, reg, data, false); }
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	6039      	str	r1, [r7, #0]
 80018f0:	71fb      	strb	r3, [r7, #7]
 80018f2:	79f9      	ldrb	r1, [r7, #7]
 80018f4:	2300      	movs	r3, #0
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	2000      	movs	r0, #0
 80018fa:	f000 fb77 	bl	8001fec <SWD_ReadReg>
 80018fe:	4603      	mov	r3, r0
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <SWD_Write_AP>:

static inline swd_error_t SWD_Write_AP(uint8_t reg, uint32_t data)
{ return SWD_WriteReg(true,  reg, data, false); }
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
 8001914:	79f9      	ldrb	r1, [r7, #7]
 8001916:	2300      	movs	r3, #0
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	2001      	movs	r0, #1
 800191c:	f000 fa88 	bl	8001e30 <SWD_WriteReg>
 8001920:	4603      	mov	r3, r0
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <SWD_Read_AP>:

static inline swd_error_t SWD_Read_AP(uint8_t reg, uint32_t *data)
{ return SWD_ReadReg(true,  reg, data, false); }
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	6039      	str	r1, [r7, #0]
 8001934:	71fb      	strb	r3, [r7, #7]
 8001936:	79f9      	ldrb	r1, [r7, #7]
 8001938:	2300      	movs	r3, #0
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	2001      	movs	r0, #1
 800193e:	f000 fb55 	bl	8001fec <SWD_ReadReg>
 8001942:	4603      	mov	r3, r0
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <SWD_Read_AP_Retry>:
    }
    return SWD_ERROR_WAIT;
}

swd_error_t SWD_Read_AP_Retry(uint8_t reg, uint32_t *data, int tries)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	73fb      	strb	r3, [r7, #15]
    while (tries--) {
 800195a:	e010      	b.n	800197e <SWD_Read_AP_Retry+0x32>
        swd_error_t e = SWD_Read_AP(reg, data);
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	68b9      	ldr	r1, [r7, #8]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ffe2 	bl	800192a <SWD_Read_AP>
 8001966:	4603      	mov	r3, r0
 8001968:	75fb      	strb	r3, [r7, #23]
        if (e == SWD_ERROR_OK)   return e;
 800196a:	7dfb      	ldrb	r3, [r7, #23]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <SWD_Read_AP_Retry+0x28>
 8001970:	7dfb      	ldrb	r3, [r7, #23]
 8001972:	e00a      	b.n	800198a <SWD_Read_AP_Retry+0x3e>
        if (e != SWD_ERROR_WAIT) return e;
 8001974:	7dfb      	ldrb	r3, [r7, #23]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d001      	beq.n	800197e <SWD_Read_AP_Retry+0x32>
 800197a:	7dfb      	ldrb	r3, [r7, #23]
 800197c:	e005      	b.n	800198a <SWD_Read_AP_Retry+0x3e>
    while (tries--) {
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	1e5a      	subs	r2, r3, #1
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1e9      	bne.n	800195c <SWD_Read_AP_Retry+0x10>
    }
    return SWD_ERROR_WAIT;
 8001988:	2301      	movs	r3, #1
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <SWD_PollPowerUp>:

/* ---------------------------------------------------------------------------
 *  Poll DP_CTRL_STAT for power-up acknowledge
 *---------------------------------------------------------------------------*/
bool SWD_PollPowerUp(uint32_t timeout_ms)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b084      	sub	sp, #16
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
    uint32_t stat;

    while (timeout_ms--)
 800199a:	e018      	b.n	80019ce <SWD_PollPowerUp+0x3c>
    {
        if (SWD_Read_DP(DP_CTRL_STAT, &stat) != SWD_ERROR_OK)
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	4619      	mov	r1, r3
 80019a2:	2001      	movs	r0, #1
 80019a4:	f7ff ff9f 	bl	80018e6 <SWD_Read_DP>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10e      	bne.n	80019cc <SWD_PollPowerUp+0x3a>
            continue;                       /* retry on WAIT / FAULT */

        /* CDBGPWRUPACK (bit 29) && CSYSPWRUPACK (bit 31) */
        if ( (stat & (1u << 29)) && (stat & (1u << 31)) )
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d004      	beq.n	80019c2 <SWD_PollPowerUp+0x30>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	da01      	bge.n	80019c2 <SWD_PollPowerUp+0x30>
            return true;
 80019be:	2301      	movs	r3, #1
 80019c0:	e00b      	b.n	80019da <SWD_PollPowerUp+0x48>

        delay_us(1000);                     /* ~1 ms back-off   */
 80019c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019c6:	f000 f94f 	bl	8001c68 <delay_us>
 80019ca:	e000      	b.n	80019ce <SWD_PollPowerUp+0x3c>
            continue;                       /* retry on WAIT / FAULT */
 80019cc:	bf00      	nop
    while (timeout_ms--)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	1e5a      	subs	r2, r3, #1
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1e1      	bne.n	800199c <SWD_PollPowerUp+0xa>
    }
    return false;                            /* timeout          */
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <SWD_Write_TAR>:

/* ---------------------------------------------------------------------------
 *  Write Target Address Register (AP-TAR)
 *---------------------------------------------------------------------------*/
swd_error_t SWD_Write_TAR(uint32_t addr)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
    return SWD_Write_AP(AP_TAR, addr);       /* returns SWD_ERROR_* */
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	2001      	movs	r0, #1
 80019ee:	f7ff ff8b 	bl	8001908 <SWD_Write_AP>
 80019f2:	4603      	mov	r3, r0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <SWD_Write_DRW>:

/* ---------------------------------------------------------------------------
 *  Write Data Read/Write register (AP-DRW)
 *---------------------------------------------------------------------------*/
swd_error_t SWD_Write_DRW(uint32_t data)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
    return SWD_Write_AP(AP_DRW, data);
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	2003      	movs	r0, #3
 8001a08:	f7ff ff7e 	bl	8001908 <SWD_Write_AP>
 8001a0c:	4603      	mov	r3, r0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <SWD_ClearSticky>:
/* -----------------  Clear sticky error flags in DP --------------------
 *  Must be called after any transaction that returns ACK_FAULT,
 *  OR once straight after power-up (recommended).
 * -------------------------------------------------------------------*/
swd_error_t SWD_ClearSticky(void)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
    /* DP_ABORT is register index 0 (A3:A2 = 00b)                        *
     * We write a 1 to every “*_CLR” bit we want to clear.                */
    uint32_t value = DP_ABORT_STKERRCLR |
 8001a1c:	2338      	movs	r3, #56	@ 0x38
 8001a1e:	607b      	str	r3, [r7, #4]
                     DP_ABORT_WDERRCLR  |
                     DP_ABORT_ORUNERRCLR;

    return SWD_Write_DP(/*reg=*/0, value);
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff ff4e 	bl	80018c4 <SWD_Write_DP>
 8001a28:	4603      	mov	r3, r0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <SWD_Unlock_Flash>:
};
const uint32_t firmware_size = sizeof(firmware_bin) / sizeof(firmware_bin[0]);

/* Unlock flash controller ------------------------------------------------*/
swd_error_t SWD_Unlock_Flash(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
    if (SWD_Write_TAR(MSC_WRITECTRL) != SWD_ERROR_OK)
 8001a38:	4806      	ldr	r0, [pc, #24]	@ (8001a54 <SWD_Unlock_Flash+0x20>)
 8001a3a:	f7ff ffd2 	bl	80019e2 <SWD_Write_TAR>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <SWD_Unlock_Flash+0x14>
        return SWD_ERROR_FAULT;
 8001a44:	2302      	movs	r3, #2
 8001a46:	e003      	b.n	8001a50 <SWD_Unlock_Flash+0x1c>
    return SWD_Write_DRW(MSC_WRITECTRL_WREN);
 8001a48:	2001      	movs	r0, #1
 8001a4a:	f7ff ffd7 	bl	80019fc <SWD_Write_DRW>
 8001a4e:	4603      	mov	r3, r0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	400e0000 	.word	0x400e0000

08001a58 <SWD_Erase_Page>:

/* Erase single flash page ------------------------------------------------*/
swd_error_t SWD_Erase_Page(uint32_t page_address)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
    uint32_t status;

    SWD_Write_TAR(MSC_ADDRB);
 8001a60:	4812      	ldr	r0, [pc, #72]	@ (8001aac <SWD_Erase_Page+0x54>)
 8001a62:	f7ff ffbe 	bl	80019e2 <SWD_Write_TAR>
    SWD_Write_DRW(page_address);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffc8 	bl	80019fc <SWD_Write_DRW>

    SWD_Write_TAR(MSC_WRITECMD);
 8001a6c:	4810      	ldr	r0, [pc, #64]	@ (8001ab0 <SWD_Erase_Page+0x58>)
 8001a6e:	f7ff ffb8 	bl	80019e2 <SWD_Write_TAR>
    SWD_Write_DRW(MSC_WRITECMD_ERASEPAGE);
 8001a72:	2002      	movs	r0, #2
 8001a74:	f7ff ffc2 	bl	80019fc <SWD_Write_DRW>

    /* poll BUSY, retry on ACK‑WAIT */
    do {
        SWD_Write_TAR(MSC_STATUS);
 8001a78:	480e      	ldr	r0, [pc, #56]	@ (8001ab4 <SWD_Erase_Page+0x5c>)
 8001a7a:	f7ff ffb2 	bl	80019e2 <SWD_Write_TAR>
        if (SWD_Read_AP_Retry(AP_DRW, &status,
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	2232      	movs	r2, #50	@ 0x32
 8001a84:	4619      	mov	r1, r3
 8001a86:	2003      	movs	r0, #3
 8001a88:	f7ff ff60 	bl	800194c <SWD_Read_AP_Retry>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <SWD_Erase_Page+0x3e>
                              SWD_WAIT_RETRIES_DEFAULT) != SWD_ERROR_OK)
            return SWD_ERROR_FAULT;
 8001a92:	2302      	movs	r3, #2
 8001a94:	e005      	b.n	8001aa2 <SWD_Erase_Page+0x4a>
    } while (status & MSC_STATUS_BUSY);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1eb      	bne.n	8001a78 <SWD_Erase_Page+0x20>

    return SWD_ERROR_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	400e0004 	.word	0x400e0004
 8001ab0:	400e0008 	.word	0x400e0008
 8001ab4:	400e000c 	.word	0x400e000c

08001ab8 <SWD_Write_Word>:

/* Write one 32 bit word --------------------------------------------------*/
swd_error_t SWD_Write_Word(uint32_t addr, uint32_t data)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
    uint32_t status;

    SWD_Write_TAR(MSC_ADDRB);     SWD_Write_DRW(addr);
 8001ac2:	4815      	ldr	r0, [pc, #84]	@ (8001b18 <SWD_Write_Word+0x60>)
 8001ac4:	f7ff ff8d 	bl	80019e2 <SWD_Write_TAR>
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff97 	bl	80019fc <SWD_Write_DRW>
    SWD_Write_TAR(MSC_WDATA);     SWD_Write_DRW(data);
 8001ace:	4813      	ldr	r0, [pc, #76]	@ (8001b1c <SWD_Write_Word+0x64>)
 8001ad0:	f7ff ff87 	bl	80019e2 <SWD_Write_TAR>
 8001ad4:	6838      	ldr	r0, [r7, #0]
 8001ad6:	f7ff ff91 	bl	80019fc <SWD_Write_DRW>
    SWD_Write_TAR(MSC_WRITECMD);  SWD_Write_DRW(MSC_WRITECMD_WRITEWORD);
 8001ada:	4811      	ldr	r0, [pc, #68]	@ (8001b20 <SWD_Write_Word+0x68>)
 8001adc:	f7ff ff81 	bl	80019e2 <SWD_Write_TAR>
 8001ae0:	2004      	movs	r0, #4
 8001ae2:	f7ff ff8b 	bl	80019fc <SWD_Write_DRW>

    do {
        SWD_Write_TAR(MSC_STATUS);
 8001ae6:	480f      	ldr	r0, [pc, #60]	@ (8001b24 <SWD_Write_Word+0x6c>)
 8001ae8:	f7ff ff7b 	bl	80019e2 <SWD_Write_TAR>
        if (SWD_Read_AP_Retry(AP_DRW, &status,
 8001aec:	f107 030c 	add.w	r3, r7, #12
 8001af0:	2232      	movs	r2, #50	@ 0x32
 8001af2:	4619      	mov	r1, r3
 8001af4:	2003      	movs	r0, #3
 8001af6:	f7ff ff29 	bl	800194c <SWD_Read_AP_Retry>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <SWD_Write_Word+0x4c>
                              SWD_WAIT_RETRIES_DEFAULT) != SWD_ERROR_OK)
            return SWD_ERROR_FAULT;
 8001b00:	2302      	movs	r3, #2
 8001b02:	e005      	b.n	8001b10 <SWD_Write_Word+0x58>
    } while (status & MSC_STATUS_BUSY);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1eb      	bne.n	8001ae6 <SWD_Write_Word+0x2e>

    return SWD_ERROR_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	400e0004 	.word	0x400e0004
 8001b1c:	400e0010 	.word	0x400e0010
 8001b20:	400e0008 	.word	0x400e0008
 8001b24:	400e000c 	.word	0x400e000c

08001b28 <SWD_Write_Firmware>:

/* Bulk program firmware --------------------------------------------------*/
swd_error_t SWD_Write_Firmware(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
    for (uint32_t i = 0; i < firmware_size; ++i) {
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
 8001b32:	e014      	b.n	8001b5e <SWD_Write_Firmware+0x36>
        uint32_t addr = FLASH_BASE + (i * 4);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	603b      	str	r3, [r7, #0]
        if (SWD_Write_Word(addr, firmware_bin[i]) != SWD_ERROR_OK)
 8001b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b70 <SWD_Write_Firmware+0x48>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b46:	4619      	mov	r1, r3
 8001b48:	6838      	ldr	r0, [r7, #0]
 8001b4a:	f7ff ffb5 	bl	8001ab8 <SWD_Write_Word>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <SWD_Write_Firmware+0x30>
            return SWD_ERROR_FAULT;
 8001b54:	2302      	movs	r3, #2
 8001b56:	e007      	b.n	8001b68 <SWD_Write_Firmware+0x40>
    for (uint32_t i = 0; i < firmware_size; ++i) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	2204      	movs	r2, #4
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d3e6      	bcc.n	8001b34 <SWD_Write_Firmware+0xc>
    }
    return SWD_ERROR_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	08008bb4 	.word	0x08008bb4

08001b74 <SWD_Verify_Firmware>:

/* Verify programmed image ------------------------------------------------*/
swd_error_t SWD_Verify_Firmware(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
    for (uint32_t i = 0; i < firmware_size; ++i) {
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	e02d      	b.n	8001bdc <SWD_Verify_Firmware+0x68>
        uint32_t addr  = FLASH_BASE + (i * 4);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	60bb      	str	r3, [r7, #8]
        uint32_t value = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]

        SWD_Write_TAR(addr);
 8001b8e:	68b8      	ldr	r0, [r7, #8]
 8001b90:	f7ff ff27 	bl	80019e2 <SWD_Write_TAR>
        if (SWD_Read_AP_Retry(AP_DRW, &value,
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	2232      	movs	r2, #50	@ 0x32
 8001b98:	4619      	mov	r1, r3
 8001b9a:	2003      	movs	r0, #3
 8001b9c:	f7ff fed6 	bl	800194c <SWD_Read_AP_Retry>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d005      	beq.n	8001bb2 <SWD_Verify_Firmware+0x3e>
                              SWD_WAIT_RETRIES_DEFAULT) != SWD_ERROR_OK) {
            printf("Read error @ 0x%08lX\n", addr);
 8001ba6:	68b9      	ldr	r1, [r7, #8]
 8001ba8:	4812      	ldr	r0, [pc, #72]	@ (8001bf4 <SWD_Verify_Firmware+0x80>)
 8001baa:	f006 f88b 	bl	8007cc4 <iprintf>
            return SWD_ERROR_FAULT;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e01c      	b.n	8001bec <SWD_Verify_Firmware+0x78>
        }

        if (value != firmware_bin[i]) {
 8001bb2:	4a11      	ldr	r2, [pc, #68]	@ (8001bf8 <SWD_Verify_Firmware+0x84>)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d00a      	beq.n	8001bd6 <SWD_Verify_Firmware+0x62>
            printf("Mismatch @ 0x%08lX: exp 0x%08lX, got 0x%08lX\n",
                   addr, firmware_bin[i], value);
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf8 <SWD_Verify_Firmware+0x84>)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            printf("Mismatch @ 0x%08lX: exp 0x%08lX, got 0x%08lX\n",
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68b9      	ldr	r1, [r7, #8]
 8001bcc:	480b      	ldr	r0, [pc, #44]	@ (8001bfc <SWD_Verify_Firmware+0x88>)
 8001bce:	f006 f879 	bl	8007cc4 <iprintf>
            return SWD_ERROR_PARITY;
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	e00a      	b.n	8001bec <SWD_Verify_Firmware+0x78>
    for (uint32_t i = 0; i < firmware_size; ++i) {
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	2204      	movs	r2, #4
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d3cd      	bcc.n	8001b80 <SWD_Verify_Firmware+0xc>
        }
    }
    printf("[SWD] Firmware verified OK\n");
 8001be4:	4806      	ldr	r0, [pc, #24]	@ (8001c00 <SWD_Verify_Firmware+0x8c>)
 8001be6:	f006 f8d5 	bl	8007d94 <puts>
    return SWD_ERROR_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	08008b50 	.word	0x08008b50
 8001bf8:	08008bb4 	.word	0x08008bb4
 8001bfc:	08008b68 	.word	0x08008b68
 8001c00:	08008b98 	.word	0x08008b98

08001c04 <SWD_Lock_Flash>:

/* Relock flash controller ------------------------------------------------*/
swd_error_t SWD_Lock_Flash(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
    if (SWD_Write_TAR(MSC_LOCK) != SWD_ERROR_OK)
 8001c08:	4806      	ldr	r0, [pc, #24]	@ (8001c24 <SWD_Lock_Flash+0x20>)
 8001c0a:	f7ff feea 	bl	80019e2 <SWD_Write_TAR>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <SWD_Lock_Flash+0x14>
        return SWD_ERROR_FAULT;
 8001c14:	2302      	movs	r3, #2
 8001c16:	e003      	b.n	8001c20 <SWD_Lock_Flash+0x1c>
    return SWD_Write_DRW(MSC_LOCK_LOCKKEY);
 8001c18:	2001      	movs	r0, #1
 8001c1a:	f7ff feef 	bl	80019fc <SWD_Write_DRW>
 8001c1e:	4603      	mov	r3, r0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	400e0020 	.word	0x400e0020

08001c28 <enable_dwt_cycle_counter>:

/* -----------------------------------------------------------------------------
 *  DWT based micro second delay
 * --------------------------------------------------------------------------*/
static void enable_dwt_cycle_counter(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
    /* Enable DWT CYCCNT for high resolution timing */
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <enable_dwt_cycle_counter+0x38>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d105      	bne.n	8001c44 <enable_dwt_cycle_counter+0x1c>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001c38:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <enable_dwt_cycle_counter+0x38>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4a08      	ldr	r2, [pc, #32]	@ (8001c60 <enable_dwt_cycle_counter+0x38>)
 8001c3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c42:	60d3      	str	r3, [r2, #12]

    DWT->CYCCNT = 0;
 8001c44:	4b07      	ldr	r3, [pc, #28]	@ (8001c64 <enable_dwt_cycle_counter+0x3c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	605a      	str	r2, [r3, #4]
    DWT->CTRL  |= DWT_CTRL_CYCCNTENA_Msk;
 8001c4a:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <enable_dwt_cycle_counter+0x3c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a05      	ldr	r2, [pc, #20]	@ (8001c64 <enable_dwt_cycle_counter+0x3c>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6013      	str	r3, [r2, #0]
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000edf0 	.word	0xe000edf0
 8001c64:	e0001000 	.word	0xe0001000

08001c68 <delay_us>:

void delay_us(uint32_t us)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
    const uint32_t hclk   = HAL_RCC_GetHCLKFreq();     /* Core frequency (Hz)   */
 8001c70:	f004 f866 	bl	8005d40 <HAL_RCC_GetHCLKFreq>
 8001c74:	6178      	str	r0, [r7, #20]
    const uint32_t cycles = (hclk / 1000000UL) * us;
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	4a0c      	ldr	r2, [pc, #48]	@ (8001cac <delay_us+0x44>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	0c9a      	lsrs	r2, r3, #18
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	613b      	str	r3, [r7, #16]
    uint32_t start = DWT->CYCCNT;
 8001c88:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <delay_us+0x48>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	60fb      	str	r3, [r7, #12]

    while ((DWT->CYCCNT - start) < cycles) __NOP();
 8001c8e:	e000      	b.n	8001c92 <delay_us+0x2a>
 8001c90:	bf00      	nop
 8001c92:	4b07      	ldr	r3, [pc, #28]	@ (8001cb0 <delay_us+0x48>)
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d8f7      	bhi.n	8001c90 <delay_us+0x28>
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	431bde83 	.word	0x431bde83
 8001cb0:	e0001000 	.word	0xe0001000

08001cb4 <SWD_Set_IO_Mode_Output>:

/* -----------------------------------------------------------------------------
 *  GPIO configuration helpers
 * --------------------------------------------------------------------------*/
void SWD_Set_IO_Mode_Output(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef cfg = {0};
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
    cfg.Pin   = PIN_SWDIO;
 8001cc8:	2380      	movs	r3, #128	@ 0x80
 8001cca:	607b      	str	r3, [r7, #4]
    cfg.Mode  = GPIO_MODE_OUTPUT_PP;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
    cfg.Pull  = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
    cfg.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(PORT_SWD, &cfg);
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4803      	ldr	r0, [pc, #12]	@ (8001cec <SWD_Set_IO_Mode_Output+0x38>)
 8001cde:	f000 fe95 	bl	8002a0c <HAL_GPIO_Init>
}
 8001ce2:	bf00      	nop
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40020400 	.word	0x40020400

08001cf0 <SWD_Set_IO_Mode_Input>:

void SWD_Set_IO_Mode_Input(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef cfg = {0};
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
    cfg.Pin  = PIN_SWDIO;
 8001d04:	2380      	movs	r3, #128	@ 0x80
 8001d06:	607b      	str	r3, [r7, #4]
    cfg.Mode = GPIO_MODE_INPUT;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
    cfg.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PORT_SWD, &cfg);
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	4619      	mov	r1, r3
 8001d14:	4803      	ldr	r0, [pc, #12]	@ (8001d24 <SWD_Set_IO_Mode_Input+0x34>)
 8001d16:	f000 fe79 	bl	8002a0c <HAL_GPIO_Init>
}
 8001d1a:	bf00      	nop
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40020400 	.word	0x40020400

08001d28 <SWD_GPIO_Init>:

void SWD_GPIO_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
    /* Enable GPIO clock (change port if PORT_SWD != GPIOB) */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	603b      	str	r3, [r7, #0]
 8001d32:	4b16      	ldr	r3, [pc, #88]	@ (8001d8c <SWD_GPIO_Init+0x64>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	4a15      	ldr	r2, [pc, #84]	@ (8001d8c <SWD_GPIO_Init+0x64>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3e:	4b13      	ldr	r3, [pc, #76]	@ (8001d8c <SWD_GPIO_Init+0x64>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef cfg = {0};
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]

    /* SWCLK configured as push pull output */
    cfg.Pin   = PIN_SWCLK;
 8001d58:	2340      	movs	r3, #64	@ 0x40
 8001d5a:	607b      	str	r3, [r7, #4]
    cfg.Mode  = GPIO_MODE_OUTPUT_PP;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
    cfg.Pull  = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60fb      	str	r3, [r7, #12]
    cfg.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d64:	2303      	movs	r3, #3
 8001d66:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(PORT_SWD, &cfg);
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4808      	ldr	r0, [pc, #32]	@ (8001d90 <SWD_GPIO_Init+0x68>)
 8001d6e:	f000 fe4d 	bl	8002a0c <HAL_GPIO_Init>

    /* SWDIO default high (line idle) */
    SWD_Set_IO_Mode_Output();
 8001d72:	f7ff ff9f 	bl	8001cb4 <SWD_Set_IO_Mode_Output>
    HAL_GPIO_WritePin(PORT_SWD, PIN_SWDIO, GPIO_PIN_SET);
 8001d76:	2201      	movs	r2, #1
 8001d78:	2180      	movs	r1, #128	@ 0x80
 8001d7a:	4805      	ldr	r0, [pc, #20]	@ (8001d90 <SWD_GPIO_Init+0x68>)
 8001d7c:	f001 f80a 	bl	8002d94 <HAL_GPIO_WritePin>
    cfg.Pin = PIN_nRESET;
    HAL_GPIO_Init(PORT_SWD, &cfg);
    HAL_GPIO_WritePin(PORT_SWD, PIN_nRESET, GPIO_PIN_SET);
#endif

    enable_dwt_cycle_counter();
 8001d80:	f7ff ff52 	bl	8001c28 <enable_dwt_cycle_counter>
}
 8001d84:	bf00      	nop
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40020400 	.word	0x40020400

08001d94 <SWCLK_Cycle>:

/* -----------------------------------------------------------------------------
 *  SWCLK pulse helper (high → low)
 * --------------------------------------------------------------------------*/
void SWCLK_Cycle(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PORT_SWD, PIN_SWCLK, GPIO_PIN_SET);
 8001d98:	2201      	movs	r2, #1
 8001d9a:	2140      	movs	r1, #64	@ 0x40
 8001d9c:	4807      	ldr	r0, [pc, #28]	@ (8001dbc <SWCLK_Cycle+0x28>)
 8001d9e:	f000 fff9 	bl	8002d94 <HAL_GPIO_WritePin>
    delay_us(1);                    /* ≈1 MHz clock */
 8001da2:	2001      	movs	r0, #1
 8001da4:	f7ff ff60 	bl	8001c68 <delay_us>
    HAL_GPIO_WritePin(PORT_SWD, PIN_SWCLK, GPIO_PIN_RESET);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2140      	movs	r1, #64	@ 0x40
 8001dac:	4803      	ldr	r0, [pc, #12]	@ (8001dbc <SWCLK_Cycle+0x28>)
 8001dae:	f000 fff1 	bl	8002d94 <HAL_GPIO_WritePin>
    delay_us(1);
 8001db2:	2001      	movs	r0, #1
 8001db4:	f7ff ff58 	bl	8001c68 <delay_us>
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40020400 	.word	0x40020400

08001dc0 <SWD_LineReset>:

/* -----------------------------------------------------------------------------
 *  Line reset: 60 clock cycles, SWDIO kept high
 * --------------------------------------------------------------------------*/
void SWD_LineReset(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
    SWD_Set_IO_Mode_Output();
 8001dc6:	f7ff ff75 	bl	8001cb4 <SWD_Set_IO_Mode_Output>
    HAL_GPIO_WritePin(PORT_SWD, PIN_SWDIO, GPIO_PIN_SET);
 8001dca:	2201      	movs	r2, #1
 8001dcc:	2180      	movs	r1, #128	@ 0x80
 8001dce:	4809      	ldr	r0, [pc, #36]	@ (8001df4 <SWD_LineReset+0x34>)
 8001dd0:	f000 ffe0 	bl	8002d94 <HAL_GPIO_WritePin>

    for (uint8_t i = 0; i < 60; ++i)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	71fb      	strb	r3, [r7, #7]
 8001dd8:	e004      	b.n	8001de4 <SWD_LineReset+0x24>
        SWCLK_Cycle();
 8001dda:	f7ff ffdb 	bl	8001d94 <SWCLK_Cycle>
    for (uint8_t i = 0; i < 60; ++i)
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	3301      	adds	r3, #1
 8001de2:	71fb      	strb	r3, [r7, #7]
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	2b3b      	cmp	r3, #59	@ 0x3b
 8001de8:	d9f7      	bls.n	8001dda <SWD_LineReset+0x1a>
}
 8001dea:	bf00      	nop
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40020400 	.word	0x40020400

08001df8 <idle_cycles>:
        SWCLK_Cycle(); \
        bit_var = HAL_GPIO_ReadPin(PORT_SWD, PIN_SWDIO); \
    } while (0)

static inline void idle_cycles(uint8_t n)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
    SWD_Set_IO_Mode_Output();
 8001e02:	f7ff ff57 	bl	8001cb4 <SWD_Set_IO_Mode_Output>
    while (n--) SWD_WRITE_BIT(0);
 8001e06:	e006      	b.n	8001e16 <idle_cycles+0x1e>
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2180      	movs	r1, #128	@ 0x80
 8001e0c:	4807      	ldr	r0, [pc, #28]	@ (8001e2c <idle_cycles+0x34>)
 8001e0e:	f000 ffc1 	bl	8002d94 <HAL_GPIO_WritePin>
 8001e12:	f7ff ffbf 	bl	8001d94 <SWCLK_Cycle>
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	1e5a      	subs	r2, r3, #1
 8001e1a:	71fa      	strb	r2, [r7, #7]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f3      	bne.n	8001e08 <idle_cycles+0x10>
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40020400 	.word	0x40020400

08001e30 <SWD_WriteReg>:

/* -----------------------------------------------------------------------------
 *  Generic write (AP/DP) – returns swd_error_t
 * --------------------------------------------------------------------------*/
swd_error_t SWD_WriteReg(bool ap, uint8_t reg, uint32_t data, bool ignore_ack)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	603a      	str	r2, [r7, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	71bb      	strb	r3, [r7, #6]
 8001e42:	4613      	mov	r3, r2
 8001e44:	717b      	strb	r3, [r7, #5]
    uint8_t A2 =  reg       & 1;
 8001e46:	79bb      	ldrb	r3, [r7, #6]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	73fb      	strb	r3, [r7, #15]
    uint8_t A3 = (reg >> 1) & 1;
 8001e4e:	79bb      	ldrb	r3, [r7, #6]
 8001e50:	085b      	lsrs	r3, r3, #1
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	73bb      	strb	r3, [r7, #14]
    uint8_t head_parity = (ap + /*RnW=*/0 + A2 + A3) & 1;
 8001e5a:	79fa      	ldrb	r2, [r7, #7]
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	4413      	add	r3, r2
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	7bbb      	ldrb	r3, [r7, #14]
 8001e64:	4413      	add	r3, r2
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	737b      	strb	r3, [r7, #13]

    /* Header (host ➜ target) */
    SWD_Set_IO_Mode_Output();
 8001e6e:	f7ff ff21 	bl	8001cb4 <SWD_Set_IO_Mode_Output>
    SWD_WRITE_BIT(START_BIT);
 8001e72:	2201      	movs	r2, #1
 8001e74:	2180      	movs	r1, #128	@ 0x80
 8001e76:	485c      	ldr	r0, [pc, #368]	@ (8001fe8 <SWD_WriteReg+0x1b8>)
 8001e78:	f000 ff8c 	bl	8002d94 <HAL_GPIO_WritePin>
 8001e7c:	f7ff ff8a 	bl	8001d94 <SWCLK_Cycle>
    SWD_WRITE_BIT(ap);
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	461a      	mov	r2, r3
 8001e84:	2180      	movs	r1, #128	@ 0x80
 8001e86:	4858      	ldr	r0, [pc, #352]	@ (8001fe8 <SWD_WriteReg+0x1b8>)
 8001e88:	f000 ff84 	bl	8002d94 <HAL_GPIO_WritePin>
 8001e8c:	f7ff ff82 	bl	8001d94 <SWCLK_Cycle>
    SWD_WRITE_BIT(0);            /* RnW = 0 */
 8001e90:	2200      	movs	r2, #0
 8001e92:	2180      	movs	r1, #128	@ 0x80
 8001e94:	4854      	ldr	r0, [pc, #336]	@ (8001fe8 <SWD_WriteReg+0x1b8>)
 8001e96:	f000 ff7d 	bl	8002d94 <HAL_GPIO_WritePin>
 8001e9a:	f7ff ff7b 	bl	8001d94 <SWCLK_Cycle>
    SWD_WRITE_BIT(A2);
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bf14      	ite	ne
 8001ea4:	2301      	movne	r3, #1
 8001ea6:	2300      	moveq	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	461a      	mov	r2, r3
 8001eac:	2180      	movs	r1, #128	@ 0x80
 8001eae:	484e      	ldr	r0, [pc, #312]	@ (8001fe8 <SWD_WriteReg+0x1b8>)
 8001eb0:	f000 ff70 	bl	8002d94 <HAL_GPIO_WritePin>
 8001eb4:	f7ff ff6e 	bl	8001d94 <SWCLK_Cycle>
    SWD_WRITE_BIT(A3);
 8001eb8:	7bbb      	ldrb	r3, [r7, #14]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	bf14      	ite	ne
 8001ebe:	2301      	movne	r3, #1
 8001ec0:	2300      	moveq	r3, #0
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2180      	movs	r1, #128	@ 0x80
 8001ec8:	4847      	ldr	r0, [pc, #284]	@ (8001fe8 <SWD_WriteReg+0x1b8>)
 8001eca:	f000 ff63 	bl	8002d94 <HAL_GPIO_WritePin>
 8001ece:	f7ff ff61 	bl	8001d94 <SWCLK_Cycle>
    SWD_WRITE_BIT(head_parity);
 8001ed2:	7b7b      	ldrb	r3, [r7, #13]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bf14      	ite	ne
 8001ed8:	2301      	movne	r3, #1
 8001eda:	2300      	moveq	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2180      	movs	r1, #128	@ 0x80
 8001ee2:	4841      	ldr	r0, [pc, #260]	@ (8001fe8 <SWD_WriteReg+0x1b8>)
 8001ee4:	f000 ff56 	bl	8002d94 <HAL_GPIO_WritePin>
 8001ee8:	f7ff ff54 	bl	8001d94 <SWCLK_Cycle>
    SWD_WRITE_BIT(STOP_BIT);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2180      	movs	r1, #128	@ 0x80
 8001ef0:	483d      	ldr	r0, [pc, #244]	@ (8001fe8 <SWD_WriteReg+0x1b8>)
 8001ef2:	f000 ff4f 	bl	8002d94 <HAL_GPIO_WritePin>
 8001ef6:	f7ff ff4d 	bl	8001d94 <SWCLK_Cycle>
    SWD_WRITE_BIT(PARK_BIT);
 8001efa:	2201      	movs	r2, #1
 8001efc:	2180      	movs	r1, #128	@ 0x80
 8001efe:	483a      	ldr	r0, [pc, #232]	@ (8001fe8 <SWD_WriteReg+0x1b8>)
 8001f00:	f000 ff48 	bl	8002d94 <HAL_GPIO_WritePin>
 8001f04:	f7ff ff46 	bl	8001d94 <SWCLK_Cycle>

    /* Turn‑around (host→target) */
    SWD_Set_IO_Mode_Input();
 8001f08:	f7ff fef2 	bl	8001cf0 <SWD_Set_IO_Mode_Input>
    SWCLK_Cycle();
 8001f0c:	f7ff ff42 	bl	8001d94 <SWCLK_Cycle>

    /* Read ACK */
    uint32_t ack = 0, bit;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 3; ++i) { SWD_READ_BIT(bit); ack |= bit << i; }
 8001f14:	2300      	movs	r3, #0
 8001f16:	61bb      	str	r3, [r7, #24]
 8001f18:	e011      	b.n	8001f3e <SWD_WriteReg+0x10e>
 8001f1a:	f7ff ff3b 	bl	8001d94 <SWCLK_Cycle>
 8001f1e:	2180      	movs	r1, #128	@ 0x80
 8001f20:	4831      	ldr	r0, [pc, #196]	@ (8001fe8 <SWD_WriteReg+0x1b8>)
 8001f22:	f000 ff1f 	bl	8002d64 <HAL_GPIO_ReadPin>
 8001f26:	4603      	mov	r3, r0
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	69fa      	ldr	r2, [r7, #28]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61fb      	str	r3, [r7, #28]
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	ddea      	ble.n	8001f1a <SWD_WriteReg+0xea>

    if (ack != ACK_OK && !ignore_ack) {
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d011      	beq.n	8001f6e <SWD_WriteReg+0x13e>
 8001f4a:	797b      	ldrb	r3, [r7, #5]
 8001f4c:	f083 0301 	eor.w	r3, r3, #1
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00b      	beq.n	8001f6e <SWD_WriteReg+0x13e>
        return (ack == ACK_WAIT)  ? SWD_ERROR_WAIT   :
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d006      	beq.n	8001f6a <SWD_WriteReg+0x13a>
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d101      	bne.n	8001f66 <SWD_WriteReg+0x136>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e03c      	b.n	8001fe0 <SWD_WriteReg+0x1b0>
 8001f66:	2303      	movs	r3, #3
 8001f68:	e03a      	b.n	8001fe0 <SWD_WriteReg+0x1b0>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e038      	b.n	8001fe0 <SWD_WriteReg+0x1b0>
               (ack == ACK_FAULT) ? SWD_ERROR_FAULT  : SWD_ERROR_PROTOCOL;
    }

    /* Turn‑around (target→host) */
    SWCLK_Cycle();
 8001f6e:	f7ff ff11 	bl	8001d94 <SWCLK_Cycle>
    SWD_Set_IO_Mode_Output();
 8001f72:	f7ff fe9f 	bl	8001cb4 <SWD_Set_IO_Mode_Output>

    /* Send data + parity */
    uint8_t parity = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 32; ++i) {
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	e01b      	b.n	8001fb8 <SWD_WriteReg+0x188>
        bit = (data >> i) & 1; SWD_WRITE_BIT(bit); parity ^= bit; }
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	fa22 f303 	lsr.w	r3, r2, r3
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	bf14      	ite	ne
 8001f94:	2301      	movne	r3, #1
 8001f96:	2300      	moveq	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	2180      	movs	r1, #128	@ 0x80
 8001f9e:	4812      	ldr	r0, [pc, #72]	@ (8001fe8 <SWD_WriteReg+0x1b8>)
 8001fa0:	f000 fef8 	bl	8002d94 <HAL_GPIO_WritePin>
 8001fa4:	f7ff fef6 	bl	8001d94 <SWCLK_Cycle>
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	7dfb      	ldrb	r3, [r7, #23]
 8001fae:	4053      	eors	r3, r2
 8001fb0:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 32; ++i) {
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	2b1f      	cmp	r3, #31
 8001fbc:	dde0      	ble.n	8001f80 <SWD_WriteReg+0x150>
    SWD_WRITE_BIT(parity);
 8001fbe:	7dfb      	ldrb	r3, [r7, #23]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf14      	ite	ne
 8001fc4:	2301      	movne	r3, #1
 8001fc6:	2300      	moveq	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	2180      	movs	r1, #128	@ 0x80
 8001fce:	4806      	ldr	r0, [pc, #24]	@ (8001fe8 <SWD_WriteReg+0x1b8>)
 8001fd0:	f000 fee0 	bl	8002d94 <HAL_GPIO_WritePin>
 8001fd4:	f7ff fede 	bl	8001d94 <SWCLK_Cycle>

    idle_cycles(8);
 8001fd8:	2008      	movs	r0, #8
 8001fda:	f7ff ff0d 	bl	8001df8 <idle_cycles>
    return SWD_ERROR_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3720      	adds	r7, #32
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40020400 	.word	0x40020400

08001fec <SWD_ReadReg>:

/* -----------------------------------------------------------------------------
 *  Generic read (AP/DP)
 * --------------------------------------------------------------------------*/
swd_error_t SWD_ReadReg(bool ap, uint8_t reg, uint32_t *data, bool ignore_ack)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	@ 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	603a      	str	r2, [r7, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	71bb      	strb	r3, [r7, #6]
 8001ffe:	4613      	mov	r3, r2
 8002000:	717b      	strb	r3, [r7, #5]
    uint8_t A2 =  reg       & 1;
 8002002:	79bb      	ldrb	r3, [r7, #6]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	74fb      	strb	r3, [r7, #19]
    uint8_t A3 = (reg >> 1) & 1;
 800200a:	79bb      	ldrb	r3, [r7, #6]
 800200c:	085b      	lsrs	r3, r3, #1
 800200e:	b2db      	uxtb	r3, r3
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	74bb      	strb	r3, [r7, #18]
    uint8_t head_parity = (ap + /*RnW=*/1 + A2 + A3) & 1;
 8002016:	79fa      	ldrb	r2, [r7, #7]
 8002018:	7cfb      	ldrb	r3, [r7, #19]
 800201a:	4413      	add	r3, r2
 800201c:	b2da      	uxtb	r2, r3
 800201e:	7cbb      	ldrb	r3, [r7, #18]
 8002020:	4413      	add	r3, r2
 8002022:	b2db      	uxtb	r3, r3
 8002024:	3301      	adds	r3, #1
 8002026:	b2db      	uxtb	r3, r3
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	747b      	strb	r3, [r7, #17]

    SWD_Set_IO_Mode_Output();
 800202e:	f7ff fe41 	bl	8001cb4 <SWD_Set_IO_Mode_Output>
    SWD_WRITE_BIT(START_BIT);
 8002032:	2201      	movs	r2, #1
 8002034:	2180      	movs	r1, #128	@ 0x80
 8002036:	485c      	ldr	r0, [pc, #368]	@ (80021a8 <SWD_ReadReg+0x1bc>)
 8002038:	f000 feac 	bl	8002d94 <HAL_GPIO_WritePin>
 800203c:	f7ff feaa 	bl	8001d94 <SWCLK_Cycle>
    SWD_WRITE_BIT(ap);
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	461a      	mov	r2, r3
 8002044:	2180      	movs	r1, #128	@ 0x80
 8002046:	4858      	ldr	r0, [pc, #352]	@ (80021a8 <SWD_ReadReg+0x1bc>)
 8002048:	f000 fea4 	bl	8002d94 <HAL_GPIO_WritePin>
 800204c:	f7ff fea2 	bl	8001d94 <SWCLK_Cycle>
    SWD_WRITE_BIT(1);            /* RnW = 1 */
 8002050:	2201      	movs	r2, #1
 8002052:	2180      	movs	r1, #128	@ 0x80
 8002054:	4854      	ldr	r0, [pc, #336]	@ (80021a8 <SWD_ReadReg+0x1bc>)
 8002056:	f000 fe9d 	bl	8002d94 <HAL_GPIO_WritePin>
 800205a:	f7ff fe9b 	bl	8001d94 <SWCLK_Cycle>
    SWD_WRITE_BIT(A2);
 800205e:	7cfb      	ldrb	r3, [r7, #19]
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf14      	ite	ne
 8002064:	2301      	movne	r3, #1
 8002066:	2300      	moveq	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	2180      	movs	r1, #128	@ 0x80
 800206e:	484e      	ldr	r0, [pc, #312]	@ (80021a8 <SWD_ReadReg+0x1bc>)
 8002070:	f000 fe90 	bl	8002d94 <HAL_GPIO_WritePin>
 8002074:	f7ff fe8e 	bl	8001d94 <SWCLK_Cycle>
    SWD_WRITE_BIT(A3);
 8002078:	7cbb      	ldrb	r3, [r7, #18]
 800207a:	2b00      	cmp	r3, #0
 800207c:	bf14      	ite	ne
 800207e:	2301      	movne	r3, #1
 8002080:	2300      	moveq	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	2180      	movs	r1, #128	@ 0x80
 8002088:	4847      	ldr	r0, [pc, #284]	@ (80021a8 <SWD_ReadReg+0x1bc>)
 800208a:	f000 fe83 	bl	8002d94 <HAL_GPIO_WritePin>
 800208e:	f7ff fe81 	bl	8001d94 <SWCLK_Cycle>
    SWD_WRITE_BIT(head_parity);
 8002092:	7c7b      	ldrb	r3, [r7, #17]
 8002094:	2b00      	cmp	r3, #0
 8002096:	bf14      	ite	ne
 8002098:	2301      	movne	r3, #1
 800209a:	2300      	moveq	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	461a      	mov	r2, r3
 80020a0:	2180      	movs	r1, #128	@ 0x80
 80020a2:	4841      	ldr	r0, [pc, #260]	@ (80021a8 <SWD_ReadReg+0x1bc>)
 80020a4:	f000 fe76 	bl	8002d94 <HAL_GPIO_WritePin>
 80020a8:	f7ff fe74 	bl	8001d94 <SWCLK_Cycle>
    SWD_WRITE_BIT(STOP_BIT);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2180      	movs	r1, #128	@ 0x80
 80020b0:	483d      	ldr	r0, [pc, #244]	@ (80021a8 <SWD_ReadReg+0x1bc>)
 80020b2:	f000 fe6f 	bl	8002d94 <HAL_GPIO_WritePin>
 80020b6:	f7ff fe6d 	bl	8001d94 <SWCLK_Cycle>
    SWD_WRITE_BIT(PARK_BIT);
 80020ba:	2201      	movs	r2, #1
 80020bc:	2180      	movs	r1, #128	@ 0x80
 80020be:	483a      	ldr	r0, [pc, #232]	@ (80021a8 <SWD_ReadReg+0x1bc>)
 80020c0:	f000 fe68 	bl	8002d94 <HAL_GPIO_WritePin>
 80020c4:	f7ff fe66 	bl	8001d94 <SWCLK_Cycle>

    /* Turn‑around */
    SWD_Set_IO_Mode_Input();
 80020c8:	f7ff fe12 	bl	8001cf0 <SWD_Set_IO_Mode_Input>
    SWCLK_Cycle();
 80020cc:	f7ff fe62 	bl	8001d94 <SWCLK_Cycle>

    uint32_t ack = 0, bit;
 80020d0:	2300      	movs	r3, #0
 80020d2:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < 3; ++i) { SWD_READ_BIT(bit); ack |= bit << i; }
 80020d4:	2300      	movs	r3, #0
 80020d6:	623b      	str	r3, [r7, #32]
 80020d8:	e011      	b.n	80020fe <SWD_ReadReg+0x112>
 80020da:	f7ff fe5b 	bl	8001d94 <SWCLK_Cycle>
 80020de:	2180      	movs	r1, #128	@ 0x80
 80020e0:	4831      	ldr	r0, [pc, #196]	@ (80021a8 <SWD_ReadReg+0x1bc>)
 80020e2:	f000 fe3f 	bl	8002d64 <HAL_GPIO_ReadPin>
 80020e6:	4603      	mov	r3, r0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020f4:	4313      	orrs	r3, r2
 80020f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	3301      	adds	r3, #1
 80020fc:	623b      	str	r3, [r7, #32]
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	2b02      	cmp	r3, #2
 8002102:	ddea      	ble.n	80020da <SWD_ReadReg+0xee>

    if (ack != ACK_OK && !ignore_ack) {
 8002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002106:	2b01      	cmp	r3, #1
 8002108:	d011      	beq.n	800212e <SWD_ReadReg+0x142>
 800210a:	797b      	ldrb	r3, [r7, #5]
 800210c:	f083 0301 	eor.w	r3, r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00b      	beq.n	800212e <SWD_ReadReg+0x142>
        return (ack == ACK_WAIT)  ? SWD_ERROR_WAIT   :
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	2b02      	cmp	r3, #2
 800211a:	d006      	beq.n	800212a <SWD_ReadReg+0x13e>
 800211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211e:	2b04      	cmp	r3, #4
 8002120:	d101      	bne.n	8002126 <SWD_ReadReg+0x13a>
 8002122:	2302      	movs	r3, #2
 8002124:	e03c      	b.n	80021a0 <SWD_ReadReg+0x1b4>
 8002126:	2303      	movs	r3, #3
 8002128:	e03a      	b.n	80021a0 <SWD_ReadReg+0x1b4>
 800212a:	2301      	movs	r3, #1
 800212c:	e038      	b.n	80021a0 <SWD_ReadReg+0x1b4>
               (ack == ACK_FAULT) ? SWD_ERROR_FAULT  : SWD_ERROR_PROTOCOL;
    }

    /* Read 32‑bit data */
    uint32_t val = 0; uint8_t parity = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	2300      	movs	r3, #0
 8002134:	76fb      	strb	r3, [r7, #27]
    for (int i = 0; i < 32; ++i) { SWD_READ_BIT(bit); val |= bit << i; parity ^= bit; }
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	e016      	b.n	800216a <SWD_ReadReg+0x17e>
 800213c:	f7ff fe2a 	bl	8001d94 <SWCLK_Cycle>
 8002140:	2180      	movs	r1, #128	@ 0x80
 8002142:	4819      	ldr	r0, [pc, #100]	@ (80021a8 <SWD_ReadReg+0x1bc>)
 8002144:	f000 fe0e 	bl	8002d64 <HAL_GPIO_ReadPin>
 8002148:	4603      	mov	r3, r0
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	4313      	orrs	r3, r2
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	7efb      	ldrb	r3, [r7, #27]
 8002160:	4053      	eors	r3, r2
 8002162:	76fb      	strb	r3, [r7, #27]
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	3301      	adds	r3, #1
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2b1f      	cmp	r3, #31
 800216e:	dde5      	ble.n	800213c <SWD_ReadReg+0x150>

    /* Parity bit */
    uint8_t parity_bit; SWD_READ_BIT(parity_bit);
 8002170:	f7ff fe10 	bl	8001d94 <SWCLK_Cycle>
 8002174:	2180      	movs	r1, #128	@ 0x80
 8002176:	480c      	ldr	r0, [pc, #48]	@ (80021a8 <SWD_ReadReg+0x1bc>)
 8002178:	f000 fdf4 	bl	8002d64 <HAL_GPIO_ReadPin>
 800217c:	4603      	mov	r3, r0
 800217e:	743b      	strb	r3, [r7, #16]
    if (parity != parity_bit) { idle_cycles(8); return SWD_ERROR_PARITY; }
 8002180:	7efa      	ldrb	r2, [r7, #27]
 8002182:	7c3b      	ldrb	r3, [r7, #16]
 8002184:	429a      	cmp	r2, r3
 8002186:	d004      	beq.n	8002192 <SWD_ReadReg+0x1a6>
 8002188:	2008      	movs	r0, #8
 800218a:	f7ff fe35 	bl	8001df8 <idle_cycles>
 800218e:	2304      	movs	r3, #4
 8002190:	e006      	b.n	80021a0 <SWD_ReadReg+0x1b4>

    *data = val;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	601a      	str	r2, [r3, #0]
    idle_cycles(8);
 8002198:	2008      	movs	r0, #8
 800219a:	f7ff fe2d 	bl	8001df8 <idle_cycles>
    return SWD_ERROR_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3728      	adds	r7, #40	@ 0x28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40020400 	.word	0x40020400

080021ac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	e00a      	b.n	80021d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021be:	f3af 8000 	nop.w
 80021c2:	4601      	mov	r1, r0
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	60ba      	str	r2, [r7, #8]
 80021ca:	b2ca      	uxtb	r2, r1
 80021cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	3301      	adds	r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	429a      	cmp	r2, r3
 80021da:	dbf0      	blt.n	80021be <_read+0x12>
  }

  return len;
 80021dc:	687b      	ldr	r3, [r7, #4]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b086      	sub	sp, #24
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	e009      	b.n	800220c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	60ba      	str	r2, [r7, #8]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	3301      	adds	r3, #1
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	429a      	cmp	r2, r3
 8002212:	dbf1      	blt.n	80021f8 <_write+0x12>
  }
  return len;
 8002214:	687b      	ldr	r3, [r7, #4]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <_close>:

int _close(int file)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002226:	f04f 33ff 	mov.w	r3, #4294967295
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002246:	605a      	str	r2, [r3, #4]
  return 0;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <_isatty>:

int _isatty(int file)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800225e:	2301      	movs	r3, #1
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002290:	4a14      	ldr	r2, [pc, #80]	@ (80022e4 <_sbrk+0x5c>)
 8002292:	4b15      	ldr	r3, [pc, #84]	@ (80022e8 <_sbrk+0x60>)
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800229c:	4b13      	ldr	r3, [pc, #76]	@ (80022ec <_sbrk+0x64>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022a4:	4b11      	ldr	r3, [pc, #68]	@ (80022ec <_sbrk+0x64>)
 80022a6:	4a12      	ldr	r2, [pc, #72]	@ (80022f0 <_sbrk+0x68>)
 80022a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022aa:	4b10      	ldr	r3, [pc, #64]	@ (80022ec <_sbrk+0x64>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d207      	bcs.n	80022c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b8:	f005 fe9a 	bl	8007ff0 <__errno>
 80022bc:	4603      	mov	r3, r0
 80022be:	220c      	movs	r2, #12
 80022c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022c2:	f04f 33ff 	mov.w	r3, #4294967295
 80022c6:	e009      	b.n	80022dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c8:	4b08      	ldr	r3, [pc, #32]	@ (80022ec <_sbrk+0x64>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ce:	4b07      	ldr	r3, [pc, #28]	@ (80022ec <_sbrk+0x64>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	4a05      	ldr	r2, [pc, #20]	@ (80022ec <_sbrk+0x64>)
 80022d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022da:	68fb      	ldr	r3, [r7, #12]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20030000 	.word	0x20030000
 80022e8:	00000400 	.word	0x00000400
 80022ec:	20000710 	.word	0x20000710
 80022f0:	20000868 	.word	0x20000868

080022f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022f8:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <SystemInit+0x20>)
 80022fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fe:	4a05      	ldr	r2, [pc, #20]	@ (8002314 <SystemInit+0x20>)
 8002300:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002304:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002318:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002350 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800231c:	f7ff ffea 	bl	80022f4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002320:	480c      	ldr	r0, [pc, #48]	@ (8002354 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002322:	490d      	ldr	r1, [pc, #52]	@ (8002358 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002324:	4a0d      	ldr	r2, [pc, #52]	@ (800235c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002328:	e002      	b.n	8002330 <LoopCopyDataInit>

0800232a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800232a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800232c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232e:	3304      	adds	r3, #4

08002330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002334:	d3f9      	bcc.n	800232a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002336:	4a0a      	ldr	r2, [pc, #40]	@ (8002360 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002338:	4c0a      	ldr	r4, [pc, #40]	@ (8002364 <LoopFillZerobss+0x22>)
  movs r3, #0
 800233a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800233c:	e001      	b.n	8002342 <LoopFillZerobss>

0800233e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800233e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002340:	3204      	adds	r2, #4

08002342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002344:	d3fb      	bcc.n	800233e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002346:	f005 fe59 	bl	8007ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800234a:	f7fe f937 	bl	80005bc <main>
  bx  lr    
 800234e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002350:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002358:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800235c:	08008c20 	.word	0x08008c20
  ldr r2, =_sbss
 8002360:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002364:	20000864 	.word	0x20000864

08002368 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002368:	e7fe      	b.n	8002368 <ADC_IRQHandler>
	...

0800236c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002370:	4b0e      	ldr	r3, [pc, #56]	@ (80023ac <HAL_Init+0x40>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0d      	ldr	r2, [pc, #52]	@ (80023ac <HAL_Init+0x40>)
 8002376:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800237a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800237c:	4b0b      	ldr	r3, [pc, #44]	@ (80023ac <HAL_Init+0x40>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0a      	ldr	r2, [pc, #40]	@ (80023ac <HAL_Init+0x40>)
 8002382:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002386:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002388:	4b08      	ldr	r3, [pc, #32]	@ (80023ac <HAL_Init+0x40>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a07      	ldr	r2, [pc, #28]	@ (80023ac <HAL_Init+0x40>)
 800238e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002392:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002394:	2003      	movs	r0, #3
 8002396:	f000 f8fc 	bl	8002592 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800239a:	200f      	movs	r0, #15
 800239c:	f7ff f8d6 	bl	800154c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023a0:	f7fe fd1c 	bl	8000ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40023c00 	.word	0x40023c00

080023b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b4:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <HAL_IncTick+0x20>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <HAL_IncTick+0x24>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4413      	add	r3, r2
 80023c0:	4a04      	ldr	r2, [pc, #16]	@ (80023d4 <HAL_IncTick+0x24>)
 80023c2:	6013      	str	r3, [r2, #0]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000008 	.word	0x20000008
 80023d4:	20000714 	.word	0x20000714

080023d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return uwTick;
 80023dc:	4b03      	ldr	r3, [pc, #12]	@ (80023ec <HAL_GetTick+0x14>)
 80023de:	681b      	ldr	r3, [r3, #0]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000714 	.word	0x20000714

080023f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f8:	f7ff ffee 	bl	80023d8 <HAL_GetTick>
 80023fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002408:	d005      	beq.n	8002416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800240a:	4b0a      	ldr	r3, [pc, #40]	@ (8002434 <HAL_Delay+0x44>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4413      	add	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002416:	bf00      	nop
 8002418:	f7ff ffde 	bl	80023d8 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	429a      	cmp	r2, r3
 8002426:	d8f7      	bhi.n	8002418 <HAL_Delay+0x28>
  {
  }
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000008 	.word	0x20000008

08002438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002448:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002454:	4013      	ands	r3, r2
 8002456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002460:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246a:	4a04      	ldr	r2, [pc, #16]	@ (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	60d3      	str	r3, [r2, #12]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002484:	4b04      	ldr	r3, [pc, #16]	@ (8002498 <__NVIC_GetPriorityGrouping+0x18>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	f003 0307 	and.w	r3, r3, #7
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	db0b      	blt.n	80024c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	f003 021f 	and.w	r2, r3, #31
 80024b4:	4907      	ldr	r1, [pc, #28]	@ (80024d4 <__NVIC_EnableIRQ+0x38>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	2001      	movs	r0, #1
 80024be:	fa00 f202 	lsl.w	r2, r0, r2
 80024c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	e000e100 	.word	0xe000e100

080024d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	6039      	str	r1, [r7, #0]
 80024e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	db0a      	blt.n	8002502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	490c      	ldr	r1, [pc, #48]	@ (8002524 <__NVIC_SetPriority+0x4c>)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	0112      	lsls	r2, r2, #4
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	440b      	add	r3, r1
 80024fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002500:	e00a      	b.n	8002518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	b2da      	uxtb	r2, r3
 8002506:	4908      	ldr	r1, [pc, #32]	@ (8002528 <__NVIC_SetPriority+0x50>)
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	3b04      	subs	r3, #4
 8002510:	0112      	lsls	r2, r2, #4
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	440b      	add	r3, r1
 8002516:	761a      	strb	r2, [r3, #24]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	e000e100 	.word	0xe000e100
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	@ 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f1c3 0307 	rsb	r3, r3, #7
 8002546:	2b04      	cmp	r3, #4
 8002548:	bf28      	it	cs
 800254a:	2304      	movcs	r3, #4
 800254c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3304      	adds	r3, #4
 8002552:	2b06      	cmp	r3, #6
 8002554:	d902      	bls.n	800255c <NVIC_EncodePriority+0x30>
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3b03      	subs	r3, #3
 800255a:	e000      	b.n	800255e <NVIC_EncodePriority+0x32>
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002560:	f04f 32ff 	mov.w	r2, #4294967295
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43da      	mvns	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	401a      	ands	r2, r3
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002574:	f04f 31ff 	mov.w	r1, #4294967295
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	fa01 f303 	lsl.w	r3, r1, r3
 800257e:	43d9      	mvns	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002584:	4313      	orrs	r3, r2
         );
}
 8002586:	4618      	mov	r0, r3
 8002588:	3724      	adds	r7, #36	@ 0x24
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff ff4c 	bl	8002438 <__NVIC_SetPriorityGrouping>
}
 80025a0:	bf00      	nop
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ba:	f7ff ff61 	bl	8002480 <__NVIC_GetPriorityGrouping>
 80025be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	68b9      	ldr	r1, [r7, #8]
 80025c4:	6978      	ldr	r0, [r7, #20]
 80025c6:	f7ff ffb1 	bl	800252c <NVIC_EncodePriority>
 80025ca:	4602      	mov	r2, r0
 80025cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff ff80 	bl	80024d8 <__NVIC_SetPriority>
}
 80025d8:	bf00      	nop
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff ff54 	bl	800249c <__NVIC_EnableIRQ>
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e00e      	b.n	800262c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	795b      	ldrb	r3, [r3, #5]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d105      	bne.n	8002624 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7fe fc04 	bl	8000e2c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e03b      	b.n	80026be <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7fe fc08 	bl	8000e70 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002684:	f023 0107 	bic.w	r1, r3, #7
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800269e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68d1      	ldr	r1, [r2, #12]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	430b      	orrs	r3, r1
 80026ac:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b084      	sub	sp, #16
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d026      	beq.n	8002736 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d021      	beq.n	8002736 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002700:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002706:	f043 0201 	orr.w	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2201      	movs	r2, #1
 8002714:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2204      	movs	r2, #4
 800271a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b00      	cmp	r3, #0
 800273e:	d026      	beq.n	800278e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d021      	beq.n	800278e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002758:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2220      	movs	r2, #32
 8002760:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002766:	f043 0202 	orr.w	r2, r3, #2
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2204      	movs	r2, #4
 8002772:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d026      	beq.n	80027e6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d021      	beq.n	80027e6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027b0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2208      	movs	r2, #8
 80027b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027be:	f043 0204 	orr.w	r2, r3, #4
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2204      	movs	r2, #4
 80027ca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d013      	beq.n	8002818 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00e      	beq.n	8002818 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002808:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2204      	movs	r2, #4
 8002810:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f853 	bl	80028be <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d024      	beq.n	800286c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01f      	beq.n	800286c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800283a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2202      	movs	r2, #2
 8002842:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	2b00      	cmp	r3, #0
 8002874:	d01f      	beq.n	80028b6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01a      	beq.n	80028b6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800288e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2210      	movs	r2, #16
 8002896:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f80e 	bl	80028d2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_DMA2D_ConfigLayer+0x20>
 8002904:	2302      	movs	r3, #2
 8002906:	e079      	b.n	80029fc <HAL_DMA2D_ConfigLayer+0x114>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	3318      	adds	r3, #24
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	041b      	lsls	r3, r3, #16
 800292e:	4313      	orrs	r3, r2
 8002930:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002932:	4b35      	ldr	r3, [pc, #212]	@ (8002a08 <HAL_DMA2D_ConfigLayer+0x120>)
 8002934:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b0a      	cmp	r3, #10
 800293c:	d003      	beq.n	8002946 <HAL_DMA2D_ConfigLayer+0x5e>
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b09      	cmp	r3, #9
 8002944:	d107      	bne.n	8002956 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	e005      	b.n	8002962 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	061b      	lsls	r3, r3, #24
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	4313      	orrs	r3, r2
 8002960:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d120      	bne.n	80029aa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	43db      	mvns	r3, r3
 8002972:	ea02 0103 	and.w	r1, r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	430a      	orrs	r2, r1
 800297e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b0a      	cmp	r3, #10
 8002990:	d003      	beq.n	800299a <HAL_DMA2D_ConfigLayer+0xb2>
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b09      	cmp	r3, #9
 8002998:	d127      	bne.n	80029ea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80029a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80029a8:	e01f      	b.n	80029ea <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	69da      	ldr	r2, [r3, #28]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	ea02 0103 	and.w	r1, r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	430a      	orrs	r2, r1
 80029c0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b0a      	cmp	r3, #10
 80029d2:	d003      	beq.n	80029dc <HAL_DMA2D_ConfigLayer+0xf4>
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b09      	cmp	r3, #9
 80029da:	d106      	bne.n	80029ea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80029e8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	371c      	adds	r7, #28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	ff03000f 	.word	0xff03000f

08002a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b089      	sub	sp, #36	@ 0x24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
 8002a26:	e177      	b.n	8002d18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a28:	2201      	movs	r2, #1
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	f040 8166 	bne.w	8002d12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d005      	beq.n	8002a5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d130      	bne.n	8002ac0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	2203      	movs	r2, #3
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a94:	2201      	movs	r2, #1
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	091b      	lsrs	r3, r3, #4
 8002aaa:	f003 0201 	and.w	r2, r3, #1
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d017      	beq.n	8002afc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d123      	bne.n	8002b50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	08da      	lsrs	r2, r3, #3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3208      	adds	r2, #8
 8002b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	220f      	movs	r2, #15
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	691a      	ldr	r2, [r3, #16]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	08da      	lsrs	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3208      	adds	r2, #8
 8002b4a:	69b9      	ldr	r1, [r7, #24]
 8002b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 0203 	and.w	r2, r3, #3
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 80c0 	beq.w	8002d12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	4b66      	ldr	r3, [pc, #408]	@ (8002d30 <HAL_GPIO_Init+0x324>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9a:	4a65      	ldr	r2, [pc, #404]	@ (8002d30 <HAL_GPIO_Init+0x324>)
 8002b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ba2:	4b63      	ldr	r3, [pc, #396]	@ (8002d30 <HAL_GPIO_Init+0x324>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bae:	4a61      	ldr	r2, [pc, #388]	@ (8002d34 <HAL_GPIO_Init+0x328>)
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	089b      	lsrs	r3, r3, #2
 8002bb4:	3302      	adds	r3, #2
 8002bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	220f      	movs	r2, #15
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a58      	ldr	r2, [pc, #352]	@ (8002d38 <HAL_GPIO_Init+0x32c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d037      	beq.n	8002c4a <HAL_GPIO_Init+0x23e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a57      	ldr	r2, [pc, #348]	@ (8002d3c <HAL_GPIO_Init+0x330>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d031      	beq.n	8002c46 <HAL_GPIO_Init+0x23a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a56      	ldr	r2, [pc, #344]	@ (8002d40 <HAL_GPIO_Init+0x334>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d02b      	beq.n	8002c42 <HAL_GPIO_Init+0x236>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a55      	ldr	r2, [pc, #340]	@ (8002d44 <HAL_GPIO_Init+0x338>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d025      	beq.n	8002c3e <HAL_GPIO_Init+0x232>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a54      	ldr	r2, [pc, #336]	@ (8002d48 <HAL_GPIO_Init+0x33c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d01f      	beq.n	8002c3a <HAL_GPIO_Init+0x22e>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a53      	ldr	r2, [pc, #332]	@ (8002d4c <HAL_GPIO_Init+0x340>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d019      	beq.n	8002c36 <HAL_GPIO_Init+0x22a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a52      	ldr	r2, [pc, #328]	@ (8002d50 <HAL_GPIO_Init+0x344>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d013      	beq.n	8002c32 <HAL_GPIO_Init+0x226>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a51      	ldr	r2, [pc, #324]	@ (8002d54 <HAL_GPIO_Init+0x348>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00d      	beq.n	8002c2e <HAL_GPIO_Init+0x222>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a50      	ldr	r2, [pc, #320]	@ (8002d58 <HAL_GPIO_Init+0x34c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d007      	beq.n	8002c2a <HAL_GPIO_Init+0x21e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a4f      	ldr	r2, [pc, #316]	@ (8002d5c <HAL_GPIO_Init+0x350>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d101      	bne.n	8002c26 <HAL_GPIO_Init+0x21a>
 8002c22:	2309      	movs	r3, #9
 8002c24:	e012      	b.n	8002c4c <HAL_GPIO_Init+0x240>
 8002c26:	230a      	movs	r3, #10
 8002c28:	e010      	b.n	8002c4c <HAL_GPIO_Init+0x240>
 8002c2a:	2308      	movs	r3, #8
 8002c2c:	e00e      	b.n	8002c4c <HAL_GPIO_Init+0x240>
 8002c2e:	2307      	movs	r3, #7
 8002c30:	e00c      	b.n	8002c4c <HAL_GPIO_Init+0x240>
 8002c32:	2306      	movs	r3, #6
 8002c34:	e00a      	b.n	8002c4c <HAL_GPIO_Init+0x240>
 8002c36:	2305      	movs	r3, #5
 8002c38:	e008      	b.n	8002c4c <HAL_GPIO_Init+0x240>
 8002c3a:	2304      	movs	r3, #4
 8002c3c:	e006      	b.n	8002c4c <HAL_GPIO_Init+0x240>
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e004      	b.n	8002c4c <HAL_GPIO_Init+0x240>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e002      	b.n	8002c4c <HAL_GPIO_Init+0x240>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <HAL_GPIO_Init+0x240>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	f002 0203 	and.w	r2, r2, #3
 8002c52:	0092      	lsls	r2, r2, #2
 8002c54:	4093      	lsls	r3, r2
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c5c:	4935      	ldr	r1, [pc, #212]	@ (8002d34 <HAL_GPIO_Init+0x328>)
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	089b      	lsrs	r3, r3, #2
 8002c62:	3302      	adds	r3, #2
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d60 <HAL_GPIO_Init+0x354>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	43db      	mvns	r3, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c8e:	4a34      	ldr	r2, [pc, #208]	@ (8002d60 <HAL_GPIO_Init+0x354>)
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c94:	4b32      	ldr	r3, [pc, #200]	@ (8002d60 <HAL_GPIO_Init+0x354>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cb8:	4a29      	ldr	r2, [pc, #164]	@ (8002d60 <HAL_GPIO_Init+0x354>)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cbe:	4b28      	ldr	r3, [pc, #160]	@ (8002d60 <HAL_GPIO_Init+0x354>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ce2:	4a1f      	ldr	r2, [pc, #124]	@ (8002d60 <HAL_GPIO_Init+0x354>)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d60 <HAL_GPIO_Init+0x354>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d0c:	4a14      	ldr	r2, [pc, #80]	@ (8002d60 <HAL_GPIO_Init+0x354>)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3301      	adds	r3, #1
 8002d16:	61fb      	str	r3, [r7, #28]
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	2b0f      	cmp	r3, #15
 8002d1c:	f67f ae84 	bls.w	8002a28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d20:	bf00      	nop
 8002d22:	bf00      	nop
 8002d24:	3724      	adds	r7, #36	@ 0x24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40013800 	.word	0x40013800
 8002d38:	40020000 	.word	0x40020000
 8002d3c:	40020400 	.word	0x40020400
 8002d40:	40020800 	.word	0x40020800
 8002d44:	40020c00 	.word	0x40020c00
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40021400 	.word	0x40021400
 8002d50:	40021800 	.word	0x40021800
 8002d54:	40021c00 	.word	0x40021c00
 8002d58:	40022000 	.word	0x40022000
 8002d5c:	40022400 	.word	0x40022400
 8002d60:	40013c00 	.word	0x40013c00

08002d64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	887b      	ldrh	r3, [r7, #2]
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
 8002d80:	e001      	b.n	8002d86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d82:	2300      	movs	r3, #0
 8002d84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	807b      	strh	r3, [r7, #2]
 8002da0:	4613      	mov	r3, r2
 8002da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002da4:	787b      	ldrb	r3, [r7, #1]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002daa:	887a      	ldrh	r2, [r7, #2]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002db0:	e003      	b.n	8002dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002db2:	887b      	ldrh	r3, [r7, #2]
 8002db4:	041a      	lsls	r2, r3, #16
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	619a      	str	r2, [r3, #24]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b086      	sub	sp, #24
 8002dca:	af02      	add	r7, sp, #8
 8002dcc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e059      	b.n	8002e8c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fe fab0 	bl	8001358 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e06:	d102      	bne.n	8002e0e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f004 fada 	bl	80073cc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	7c1a      	ldrb	r2, [r3, #16]
 8002e20:	f88d 2000 	strb.w	r2, [sp]
 8002e24:	3304      	adds	r3, #4
 8002e26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e28:	f004 fa6c 	bl	8007304 <USB_CoreInit>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2202      	movs	r2, #2
 8002e36:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e026      	b.n	8002e8c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2101      	movs	r1, #1
 8002e44:	4618      	mov	r0, r3
 8002e46:	f004 fad2 	bl	80073ee <USB_SetCurrentMode>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e017      	b.n	8002e8c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	7c1a      	ldrb	r2, [r3, #16]
 8002e64:	f88d 2000 	strb.w	r2, [sp]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e6c:	f004 fc36 	bl	80076dc <USB_HostInit>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e004      	b.n	8002e8c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f004 fbd7 	bl	800765e <USB_GetMode>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	f040 80fb 	bne.w	80030ae <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f004 fb9a 	bl	80075f6 <USB_ReadInterrupts>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80f1 	beq.w	80030ac <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f004 fb91 	bl	80075f6 <USB_ReadInterrupts>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ede:	d104      	bne.n	8002eea <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002ee8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f004 fb81 	bl	80075f6 <USB_ReadInterrupts>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002efa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002efe:	d104      	bne.n	8002f0a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002f08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f004 fb71 	bl	80075f6 <USB_ReadInterrupts>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f1a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f1e:	d104      	bne.n	8002f2a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f004 fb61 	bl	80075f6 <USB_ReadInterrupts>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d103      	bne.n	8002f46 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2202      	movs	r2, #2
 8002f44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f004 fb53 	bl	80075f6 <USB_ReadInterrupts>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f5a:	d120      	bne.n	8002f9e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002f64:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d113      	bne.n	8002f9e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002f76:	2110      	movs	r1, #16
 8002f78:	6938      	ldr	r0, [r7, #16]
 8002f7a:	f004 fa84 	bl	8007486 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002f7e:	6938      	ldr	r0, [r7, #16]
 8002f80:	f004 fab3 	bl	80074ea <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	7a5b      	ldrb	r3, [r3, #9]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d105      	bne.n	8002f98 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2101      	movs	r1, #1
 8002f92:	4618      	mov	r0, r3
 8002f94:	f004 fc66 	bl	8007864 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f89f 	bl	80030dc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f004 fb27 	bl	80075f6 <USB_ReadInterrupts>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fb2:	d102      	bne.n	8002fba <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f001 fcc4 	bl	8004942 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f004 fb19 	bl	80075f6 <USB_ReadInterrupts>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d106      	bne.n	8002fdc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f870 	bl	80030b4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2208      	movs	r2, #8
 8002fda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f004 fb08 	bl	80075f6 <USB_ReadInterrupts>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ff0:	d139      	bne.n	8003066 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f004 fc71 	bl	80078de <USB_HC_ReadInterrupt>
 8002ffc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	e025      	b.n	8003050 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d018      	beq.n	800304a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800302a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800302e:	d106      	bne.n	800303e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	4619      	mov	r1, r3
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f87c 	bl	8003134 <HCD_HC_IN_IRQHandler>
 800303c:	e005      	b.n	800304a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	4619      	mov	r1, r3
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 fede 	bl	8003e06 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	3301      	adds	r3, #1
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	795b      	ldrb	r3, [r3, #5]
 8003054:	461a      	mov	r2, r3
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	4293      	cmp	r3, r2
 800305a:	d3d3      	bcc.n	8003004 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003064:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f004 fac3 	bl	80075f6 <USB_ReadInterrupts>
 8003070:	4603      	mov	r3, r0
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	2b10      	cmp	r3, #16
 8003078:	d101      	bne.n	800307e <HAL_HCD_IRQHandler+0x1ea>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <HAL_HCD_IRQHandler+0x1ec>
 800307e:	2300      	movs	r3, #0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d014      	beq.n	80030ae <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0210 	bic.w	r2, r2, #16
 8003092:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f001 fb75 	bl	8004784 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699a      	ldr	r2, [r3, #24]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0210 	orr.w	r2, r2, #16
 80030a8:	619a      	str	r2, [r3, #24]
 80030aa:	e000      	b.n	80030ae <HAL_HCD_IRQHandler+0x21a>
      return;
 80030ac:	bf00      	nop
    }
  }
}
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	70fb      	strb	r3, [r7, #3]
 8003124:	4613      	mov	r3, r2
 8003126:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	4611      	mov	r1, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f004 fa62 	bl	800761c <USB_ReadChInterrupts>
 8003158:	4603      	mov	r3, r0
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b04      	cmp	r3, #4
 8003160:	d11a      	bne.n	8003198 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4413      	add	r3, r2
 800316a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800316e:	461a      	mov	r2, r3
 8003170:	2304      	movs	r3, #4
 8003172:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003174:	78fa      	ldrb	r2, [r7, #3]
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	334d      	adds	r3, #77	@ 0x4d
 8003184:	2207      	movs	r2, #7
 8003186:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	78fa      	ldrb	r2, [r7, #3]
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f004 fbb5 	bl	8007900 <USB_HC_Halt>
 8003196:	e09e      	b.n	80032d6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	4611      	mov	r1, r2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f004 fa3b 	bl	800761c <USB_ReadChInterrupts>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031b0:	d11b      	bne.n	80031ea <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031be:	461a      	mov	r2, r3
 80031c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	334d      	adds	r3, #77	@ 0x4d
 80031d6:	2208      	movs	r2, #8
 80031d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	4611      	mov	r1, r2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f004 fb8c 	bl	8007900 <USB_HC_Halt>
 80031e8:	e075      	b.n	80032d6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	4611      	mov	r1, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f004 fa12 	bl	800761c <USB_ReadChInterrupts>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d11a      	bne.n	8003238 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003202:	78fb      	ldrb	r3, [r7, #3]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4413      	add	r3, r2
 800320a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800320e:	461a      	mov	r2, r3
 8003210:	2308      	movs	r3, #8
 8003212:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003214:	78fa      	ldrb	r2, [r7, #3]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	334d      	adds	r3, #77	@ 0x4d
 8003224:	2206      	movs	r2, #6
 8003226:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f004 fb65 	bl	8007900 <USB_HC_Halt>
 8003236:	e04e      	b.n	80032d6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	4611      	mov	r1, r2
 8003240:	4618      	mov	r0, r3
 8003242:	f004 f9eb 	bl	800761c <USB_ReadChInterrupts>
 8003246:	4603      	mov	r3, r0
 8003248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800324c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003250:	d11b      	bne.n	800328a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4413      	add	r3, r2
 800325a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800325e:	461a      	mov	r2, r3
 8003260:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003264:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	334d      	adds	r3, #77	@ 0x4d
 8003276:	2209      	movs	r2, #9
 8003278:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	4611      	mov	r1, r2
 8003282:	4618      	mov	r0, r3
 8003284:	f004 fb3c 	bl	8007900 <USB_HC_Halt>
 8003288:	e025      	b.n	80032d6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f004 f9c2 	bl	800761c <USB_ReadChInterrupts>
 8003298:	4603      	mov	r3, r0
 800329a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800329e:	2b80      	cmp	r3, #128	@ 0x80
 80032a0:	d119      	bne.n	80032d6 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032ae:	461a      	mov	r2, r3
 80032b0:	2380      	movs	r3, #128	@ 0x80
 80032b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80032b4:	78fa      	ldrb	r2, [r7, #3]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	1a9b      	subs	r3, r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	334d      	adds	r3, #77	@ 0x4d
 80032c4:	2207      	movs	r2, #7
 80032c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	4611      	mov	r1, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f004 fb15 	bl	8007900 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	4611      	mov	r1, r2
 80032de:	4618      	mov	r0, r3
 80032e0:	f004 f99c 	bl	800761c <USB_ReadChInterrupts>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032ee:	d112      	bne.n	8003316 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	4611      	mov	r1, r2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f004 fb01 	bl	8007900 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80032fe:	78fb      	ldrb	r3, [r7, #3]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4413      	add	r3, r2
 8003306:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800330a:	461a      	mov	r2, r3
 800330c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003310:	6093      	str	r3, [r2, #8]
 8003312:	f000 bd75 	b.w	8003e00 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	4611      	mov	r1, r2
 800331e:	4618      	mov	r0, r3
 8003320:	f004 f97c 	bl	800761c <USB_ReadChInterrupts>
 8003324:	4603      	mov	r3, r0
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b01      	cmp	r3, #1
 800332c:	f040 8128 	bne.w	8003580 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800333c:	461a      	mov	r2, r3
 800333e:	2320      	movs	r3, #32
 8003340:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	331b      	adds	r3, #27
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d119      	bne.n	800338c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	331b      	adds	r3, #27
 8003368:	2200      	movs	r2, #0
 800336a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4413      	add	r3, r2
 8003374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	0151      	lsls	r1, r2, #5
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	440a      	add	r2, r1
 8003382:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800338a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	799b      	ldrb	r3, [r3, #6]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d01b      	beq.n	80033cc <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003394:	78fa      	ldrb	r2, [r7, #3]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	3330      	adds	r3, #48	@ 0x30
 80033a4:	6819      	ldr	r1, [r3, #0]
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	1ac9      	subs	r1, r1, r3
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4403      	add	r3, r0
 80033c8:	3338      	adds	r3, #56	@ 0x38
 80033ca:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80033cc:	78fa      	ldrb	r2, [r7, #3]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	334d      	adds	r3, #77	@ 0x4d
 80033dc:	2201      	movs	r2, #1
 80033de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80033e0:	78fa      	ldrb	r2, [r7, #3]
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	3344      	adds	r3, #68	@ 0x44
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003400:	461a      	mov	r2, r3
 8003402:	2301      	movs	r3, #1
 8003404:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003406:	78fa      	ldrb	r2, [r7, #3]
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	1a9b      	subs	r3, r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	3326      	adds	r3, #38	@ 0x26
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800341c:	78fa      	ldrb	r2, [r7, #3]
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	1a9b      	subs	r3, r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	3326      	adds	r3, #38	@ 0x26
 800342c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800342e:	2b02      	cmp	r3, #2
 8003430:	d110      	bne.n	8003454 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	4611      	mov	r1, r2
 800343a:	4618      	mov	r0, r3
 800343c:	f004 fa60 	bl	8007900 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4413      	add	r3, r2
 8003448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800344c:	461a      	mov	r2, r3
 800344e:	2310      	movs	r3, #16
 8003450:	6093      	str	r3, [r2, #8]
 8003452:	e03d      	b.n	80034d0 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003454:	78fa      	ldrb	r2, [r7, #3]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	3326      	adds	r3, #38	@ 0x26
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b03      	cmp	r3, #3
 8003468:	d00a      	beq.n	8003480 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800346a:	78fa      	ldrb	r2, [r7, #3]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	3326      	adds	r3, #38	@ 0x26
 800347a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800347c:	2b01      	cmp	r3, #1
 800347e:	d127      	bne.n	80034d0 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4413      	add	r3, r2
 8003488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	0151      	lsls	r1, r2, #5
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	440a      	add	r2, r1
 8003496:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800349a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800349e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80034a0:	78fa      	ldrb	r2, [r7, #3]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	334c      	adds	r3, #76	@ 0x4c
 80034b0:	2201      	movs	r2, #1
 80034b2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034b4:	78fa      	ldrb	r2, [r7, #3]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	334c      	adds	r3, #76	@ 0x4c
 80034c4:	781a      	ldrb	r2, [r3, #0]
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff fe24 	bl	8003118 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	799b      	ldrb	r3, [r3, #6]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d13b      	bne.n	8003550 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	3338      	adds	r3, #56	@ 0x38
 80034e8:	6819      	ldr	r1, [r3, #0]
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4403      	add	r3, r0
 80034f8:	3328      	adds	r3, #40	@ 0x28
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	440b      	add	r3, r1
 80034fe:	1e59      	subs	r1, r3, #1
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4403      	add	r3, r0
 800350e:	3328      	adds	r3, #40	@ 0x28
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	fbb1 f3f3 	udiv	r3, r1, r3
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 8470 	beq.w	8003e00 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003520:	78fa      	ldrb	r2, [r7, #3]
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	333c      	adds	r3, #60	@ 0x3c
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	78fa      	ldrb	r2, [r7, #3]
 8003534:	f083 0301 	eor.w	r3, r3, #1
 8003538:	b2d8      	uxtb	r0, r3
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	333c      	adds	r3, #60	@ 0x3c
 8003548:	4602      	mov	r2, r0
 800354a:	701a      	strb	r2, [r3, #0]
 800354c:	f000 bc58 	b.w	8003e00 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	333c      	adds	r3, #60	@ 0x3c
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	78fa      	ldrb	r2, [r7, #3]
 8003564:	f083 0301 	eor.w	r3, r3, #1
 8003568:	b2d8      	uxtb	r0, r3
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	333c      	adds	r3, #60	@ 0x3c
 8003578:	4602      	mov	r2, r0
 800357a:	701a      	strb	r2, [r3, #0]
 800357c:	f000 bc40 	b.w	8003e00 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	78fa      	ldrb	r2, [r7, #3]
 8003586:	4611      	mov	r1, r2
 8003588:	4618      	mov	r0, r3
 800358a:	f004 f847 	bl	800761c <USB_ReadChInterrupts>
 800358e:	4603      	mov	r3, r0
 8003590:	f003 0320 	and.w	r3, r3, #32
 8003594:	2b20      	cmp	r3, #32
 8003596:	d131      	bne.n	80035fc <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003598:	78fb      	ldrb	r3, [r7, #3]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035a4:	461a      	mov	r2, r3
 80035a6:	2320      	movs	r3, #32
 80035a8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80035aa:	78fa      	ldrb	r2, [r7, #3]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	331a      	adds	r3, #26
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	f040 841f 	bne.w	8003e00 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80035c2:	78fa      	ldrb	r2, [r7, #3]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	331b      	adds	r3, #27
 80035d2:	2201      	movs	r2, #1
 80035d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80035d6:	78fa      	ldrb	r2, [r7, #3]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	334d      	adds	r3, #77	@ 0x4d
 80035e6:	2203      	movs	r2, #3
 80035e8:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	4611      	mov	r1, r2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f004 f984 	bl	8007900 <USB_HC_Halt>
 80035f8:	f000 bc02 	b.w	8003e00 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f004 f809 	bl	800761c <USB_ReadChInterrupts>
 800360a:	4603      	mov	r3, r0
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b02      	cmp	r3, #2
 8003612:	f040 8305 	bne.w	8003c20 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003616:	78fb      	ldrb	r3, [r7, #3]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4413      	add	r3, r2
 800361e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003622:	461a      	mov	r2, r3
 8003624:	2302      	movs	r3, #2
 8003626:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003628:	78fa      	ldrb	r2, [r7, #3]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	334d      	adds	r3, #77	@ 0x4d
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d114      	bne.n	8003668 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800363e:	78fa      	ldrb	r2, [r7, #3]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	334d      	adds	r3, #77	@ 0x4d
 800364e:	2202      	movs	r2, #2
 8003650:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	334c      	adds	r3, #76	@ 0x4c
 8003662:	2201      	movs	r2, #1
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	e2cc      	b.n	8003c02 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	334d      	adds	r3, #77	@ 0x4d
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b06      	cmp	r3, #6
 800367c:	d114      	bne.n	80036a8 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	334d      	adds	r3, #77	@ 0x4d
 800368e:	2202      	movs	r2, #2
 8003690:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	334c      	adds	r3, #76	@ 0x4c
 80036a2:	2205      	movs	r2, #5
 80036a4:	701a      	strb	r2, [r3, #0]
 80036a6:	e2ac      	b.n	8003c02 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	334d      	adds	r3, #77	@ 0x4d
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b07      	cmp	r3, #7
 80036bc:	d00b      	beq.n	80036d6 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80036be:	78fa      	ldrb	r2, [r7, #3]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	334d      	adds	r3, #77	@ 0x4d
 80036ce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80036d0:	2b09      	cmp	r3, #9
 80036d2:	f040 80a6 	bne.w	8003822 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036d6:	78fa      	ldrb	r2, [r7, #3]
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	1a9b      	subs	r3, r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	334d      	adds	r3, #77	@ 0x4d
 80036e6:	2202      	movs	r2, #2
 80036e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	3344      	adds	r3, #68	@ 0x44
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	1c59      	adds	r1, r3, #1
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	1a9b      	subs	r3, r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4403      	add	r3, r0
 800370a:	3344      	adds	r3, #68	@ 0x44
 800370c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	3344      	adds	r3, #68	@ 0x44
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b02      	cmp	r3, #2
 8003722:	d943      	bls.n	80037ac <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003724:	78fa      	ldrb	r2, [r7, #3]
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	4613      	mov	r3, r2
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	3344      	adds	r3, #68	@ 0x44
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	331a      	adds	r3, #26
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d123      	bne.n	8003796 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	331b      	adds	r3, #27
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	331c      	adds	r3, #28
 8003772:	2200      	movs	r2, #0
 8003774:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003776:	78fb      	ldrb	r3, [r7, #3]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4413      	add	r3, r2
 800377e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	78fa      	ldrb	r2, [r7, #3]
 8003786:	0151      	lsls	r1, r2, #5
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	440a      	add	r2, r1
 800378c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003790:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003794:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003796:	78fa      	ldrb	r2, [r7, #3]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	1a9b      	subs	r3, r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	334c      	adds	r3, #76	@ 0x4c
 80037a6:	2204      	movs	r2, #4
 80037a8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037aa:	e229      	b.n	8003c00 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037ac:	78fa      	ldrb	r2, [r7, #3]
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	1a9b      	subs	r3, r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	334c      	adds	r3, #76	@ 0x4c
 80037bc:	2202      	movs	r2, #2
 80037be:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	3326      	adds	r3, #38	@ 0x26
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00b      	beq.n	80037ee <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	3326      	adds	r3, #38	@ 0x26
 80037e6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	f040 8209 	bne.w	8003c00 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80037ee:	78fb      	ldrb	r3, [r7, #3]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003804:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800380c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800380e:	78fb      	ldrb	r3, [r7, #3]
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	4413      	add	r3, r2
 8003816:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800381a:	461a      	mov	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003820:	e1ee      	b.n	8003c00 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	334d      	adds	r3, #77	@ 0x4d
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b05      	cmp	r3, #5
 8003836:	f040 80c8 	bne.w	80039ca <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	334d      	adds	r3, #77	@ 0x4d
 800384a:	2202      	movs	r2, #2
 800384c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	331b      	adds	r3, #27
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b01      	cmp	r3, #1
 8003862:	f040 81ce 	bne.w	8003c02 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003866:	78fa      	ldrb	r2, [r7, #3]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	3326      	adds	r3, #38	@ 0x26
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b03      	cmp	r3, #3
 800387a:	d16b      	bne.n	8003954 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800387c:	78fa      	ldrb	r2, [r7, #3]
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	1a9b      	subs	r3, r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	3348      	adds	r3, #72	@ 0x48
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	1c59      	adds	r1, r3, #1
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4403      	add	r3, r0
 800389c:	3348      	adds	r3, #72	@ 0x48
 800389e:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80038a0:	78fa      	ldrb	r2, [r7, #3]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	3348      	adds	r3, #72	@ 0x48
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d943      	bls.n	800393e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80038b6:	78fa      	ldrb	r2, [r7, #3]
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	4613      	mov	r3, r2
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	1a9b      	subs	r3, r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	3348      	adds	r3, #72	@ 0x48
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80038ca:	78fa      	ldrb	r2, [r7, #3]
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	331b      	adds	r3, #27
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80038de:	78fa      	ldrb	r2, [r7, #3]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	1a9b      	subs	r3, r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	3344      	adds	r3, #68	@ 0x44
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d809      	bhi.n	8003908 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	331c      	adds	r3, #28
 8003904:	2201      	movs	r2, #1
 8003906:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4413      	add	r3, r2
 8003910:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	78fa      	ldrb	r2, [r7, #3]
 8003918:	0151      	lsls	r1, r2, #5
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	440a      	add	r2, r1
 800391e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003922:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003926:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003928:	78fa      	ldrb	r2, [r7, #3]
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	1a9b      	subs	r3, r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	334c      	adds	r3, #76	@ 0x4c
 8003938:	2204      	movs	r2, #4
 800393a:	701a      	strb	r2, [r3, #0]
 800393c:	e014      	b.n	8003968 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800393e:	78fa      	ldrb	r2, [r7, #3]
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	1a9b      	subs	r3, r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	440b      	add	r3, r1
 800394c:	334c      	adds	r3, #76	@ 0x4c
 800394e:	2202      	movs	r2, #2
 8003950:	701a      	strb	r2, [r3, #0]
 8003952:	e009      	b.n	8003968 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003954:	78fa      	ldrb	r2, [r7, #3]
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	334c      	adds	r3, #76	@ 0x4c
 8003964:	2202      	movs	r2, #2
 8003966:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003968:	78fa      	ldrb	r2, [r7, #3]
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	4613      	mov	r3, r2
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	3326      	adds	r3, #38	@ 0x26
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00b      	beq.n	8003996 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800397e:	78fa      	ldrb	r2, [r7, #3]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	3326      	adds	r3, #38	@ 0x26
 800398e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003990:	2b02      	cmp	r3, #2
 8003992:	f040 8136 	bne.w	8003c02 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003996:	78fb      	ldrb	r3, [r7, #3]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4413      	add	r3, r2
 800399e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039ac:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039b4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80039b6:	78fb      	ldrb	r3, [r7, #3]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c2:	461a      	mov	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6013      	str	r3, [r2, #0]
 80039c8:	e11b      	b.n	8003c02 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	334d      	adds	r3, #77	@ 0x4d
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b03      	cmp	r3, #3
 80039de:	f040 8081 	bne.w	8003ae4 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	334d      	adds	r3, #77	@ 0x4d
 80039f2:	2202      	movs	r2, #2
 80039f4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	1a9b      	subs	r3, r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	331b      	adds	r3, #27
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	f040 80fa 	bne.w	8003c02 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a0e:	78fa      	ldrb	r2, [r7, #3]
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	1a9b      	subs	r3, r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	334c      	adds	r3, #76	@ 0x4c
 8003a1e:	2202      	movs	r2, #2
 8003a20:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003a22:	78fb      	ldrb	r3, [r7, #3]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	0151      	lsls	r1, r2, #5
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	440a      	add	r2, r1
 8003a38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a40:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003a42:	78fb      	ldrb	r3, [r7, #3]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	78fa      	ldrb	r2, [r7, #3]
 8003a52:	0151      	lsls	r1, r2, #5
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	440a      	add	r2, r1
 8003a58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a60:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	78fa      	ldrb	r2, [r7, #3]
 8003a72:	0151      	lsls	r1, r2, #5
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	440a      	add	r2, r1
 8003a78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a7c:	f023 0320 	bic.w	r3, r3, #32
 8003a80:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a82:	78fa      	ldrb	r2, [r7, #3]
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	4613      	mov	r3, r2
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	3326      	adds	r3, #38	@ 0x26
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00b      	beq.n	8003ab0 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a98:	78fa      	ldrb	r2, [r7, #3]
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	3326      	adds	r3, #38	@ 0x26
 8003aa8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	f040 80a9 	bne.w	8003c02 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ac6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ace:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003adc:	461a      	mov	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	e08e      	b.n	8003c02 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	334d      	adds	r3, #77	@ 0x4d
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d143      	bne.n	8003b82 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	334d      	adds	r3, #77	@ 0x4d
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b0e:	78fa      	ldrb	r2, [r7, #3]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	334c      	adds	r3, #76	@ 0x4c
 8003b1e:	2202      	movs	r2, #2
 8003b20:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b22:	78fa      	ldrb	r2, [r7, #3]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	3326      	adds	r3, #38	@ 0x26
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	3326      	adds	r3, #38	@ 0x26
 8003b48:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d159      	bne.n	8003c02 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b4e:	78fb      	ldrb	r3, [r7, #3]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b64:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b6c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b6e:	78fb      	ldrb	r3, [r7, #3]
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	e03f      	b.n	8003c02 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003b82:	78fa      	ldrb	r2, [r7, #3]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	334d      	adds	r3, #77	@ 0x4d
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d126      	bne.n	8003be6 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b98:	78fa      	ldrb	r2, [r7, #3]
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	1a9b      	subs	r3, r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	334d      	adds	r3, #77	@ 0x4d
 8003ba8:	2202      	movs	r2, #2
 8003baa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003bac:	78fa      	ldrb	r2, [r7, #3]
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	3344      	adds	r3, #68	@ 0x44
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	1c59      	adds	r1, r3, #1
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4403      	add	r3, r0
 8003bcc:	3344      	adds	r3, #68	@ 0x44
 8003bce:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003bd0:	78fa      	ldrb	r2, [r7, #3]
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	1a9b      	subs	r3, r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	334c      	adds	r3, #76	@ 0x4c
 8003be0:	2204      	movs	r2, #4
 8003be2:	701a      	strb	r2, [r3, #0]
 8003be4:	e00d      	b.n	8003c02 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	334d      	adds	r3, #77	@ 0x4d
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	f000 8100 	beq.w	8003dfe <HCD_HC_IN_IRQHandler+0xcca>
 8003bfe:	e000      	b.n	8003c02 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c00:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003c02:	78fa      	ldrb	r2, [r7, #3]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	334c      	adds	r3, #76	@ 0x4c
 8003c12:	781a      	ldrb	r2, [r3, #0]
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	4619      	mov	r1, r3
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff fa7d 	bl	8003118 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c1e:	e0ef      	b.n	8003e00 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	78fa      	ldrb	r2, [r7, #3]
 8003c26:	4611      	mov	r1, r2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f003 fcf7 	bl	800761c <USB_ReadChInterrupts>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c34:	2b40      	cmp	r3, #64	@ 0x40
 8003c36:	d12f      	bne.n	8003c98 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c44:	461a      	mov	r2, r3
 8003c46:	2340      	movs	r3, #64	@ 0x40
 8003c48:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	334d      	adds	r3, #77	@ 0x4d
 8003c5a:	2205      	movs	r2, #5
 8003c5c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003c5e:	78fa      	ldrb	r2, [r7, #3]
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	331a      	adds	r3, #26
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d109      	bne.n	8003c88 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003c74:	78fa      	ldrb	r2, [r7, #3]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	3344      	adds	r3, #68	@ 0x44
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	78fa      	ldrb	r2, [r7, #3]
 8003c8e:	4611      	mov	r1, r2
 8003c90:	4618      	mov	r0, r3
 8003c92:	f003 fe35 	bl	8007900 <USB_HC_Halt>
 8003c96:	e0b3      	b.n	8003e00 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	78fa      	ldrb	r2, [r7, #3]
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f003 fcbb 	bl	800761c <USB_ReadChInterrupts>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	f003 0310 	and.w	r3, r3, #16
 8003cac:	2b10      	cmp	r3, #16
 8003cae:	f040 80a7 	bne.w	8003e00 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003cb2:	78fa      	ldrb	r2, [r7, #3]
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	1a9b      	subs	r3, r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	3326      	adds	r3, #38	@ 0x26
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d11b      	bne.n	8003d00 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003cc8:	78fa      	ldrb	r2, [r7, #3]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	3344      	adds	r3, #68	@ 0x44
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	334d      	adds	r3, #77	@ 0x4d
 8003cec:	2204      	movs	r2, #4
 8003cee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	78fa      	ldrb	r2, [r7, #3]
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f003 fe01 	bl	8007900 <USB_HC_Halt>
 8003cfe:	e03f      	b.n	8003d80 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d00:	78fa      	ldrb	r2, [r7, #3]
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	4613      	mov	r3, r2
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	3326      	adds	r3, #38	@ 0x26
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003d16:	78fa      	ldrb	r2, [r7, #3]
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	440b      	add	r3, r1
 8003d24:	3326      	adds	r3, #38	@ 0x26
 8003d26:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d129      	bne.n	8003d80 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d2c:	78fa      	ldrb	r2, [r7, #3]
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	4613      	mov	r3, r2
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	1a9b      	subs	r3, r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	3344      	adds	r3, #68	@ 0x44
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	799b      	ldrb	r3, [r3, #6]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <HCD_HC_IN_IRQHandler+0xc2a>
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	331b      	adds	r3, #27
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d110      	bne.n	8003d80 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003d5e:	78fa      	ldrb	r2, [r7, #3]
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	4613      	mov	r3, r2
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	1a9b      	subs	r3, r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	334d      	adds	r3, #77	@ 0x4d
 8003d6e:	2204      	movs	r2, #4
 8003d70:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	78fa      	ldrb	r2, [r7, #3]
 8003d78:	4611      	mov	r1, r2
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f003 fdc0 	bl	8007900 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003d80:	78fa      	ldrb	r2, [r7, #3]
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	4613      	mov	r3, r2
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	331b      	adds	r3, #27
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d129      	bne.n	8003dea <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003d96:	78fa      	ldrb	r2, [r7, #3]
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	331b      	adds	r3, #27
 8003da6:	2200      	movs	r2, #0
 8003da8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003daa:	78fb      	ldrb	r3, [r7, #3]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	78fa      	ldrb	r2, [r7, #3]
 8003dba:	0151      	lsls	r1, r2, #5
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	440a      	add	r2, r1
 8003dc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003dc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dc8:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003dca:	78fb      	ldrb	r3, [r7, #3]
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	78fa      	ldrb	r2, [r7, #3]
 8003dda:	0151      	lsls	r1, r2, #5
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	440a      	add	r2, r1
 8003de0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003de4:	f043 0320 	orr.w	r3, r3, #32
 8003de8:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003df6:	461a      	mov	r2, r3
 8003df8:	2310      	movs	r3, #16
 8003dfa:	6093      	str	r3, [r2, #8]
 8003dfc:	e000      	b.n	8003e00 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003dfe:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b086      	sub	sp, #24
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	78fa      	ldrb	r2, [r7, #3]
 8003e22:	4611      	mov	r1, r2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f003 fbf9 	bl	800761c <USB_ReadChInterrupts>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d11b      	bne.n	8003e6c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e40:	461a      	mov	r2, r3
 8003e42:	2304      	movs	r3, #4
 8003e44:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003e46:	78fa      	ldrb	r2, [r7, #3]
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	1a9b      	subs	r3, r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	334d      	adds	r3, #77	@ 0x4d
 8003e56:	2207      	movs	r2, #7
 8003e58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	78fa      	ldrb	r2, [r7, #3]
 8003e60:	4611      	mov	r1, r2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f003 fd4c 	bl	8007900 <USB_HC_Halt>
 8003e68:	f000 bc89 	b.w	800477e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	4611      	mov	r1, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f003 fbd1 	bl	800761c <USB_ReadChInterrupts>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b20      	cmp	r3, #32
 8003e82:	f040 8082 	bne.w	8003f8a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e92:	461a      	mov	r2, r3
 8003e94:	2320      	movs	r3, #32
 8003e96:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003e98:	78fa      	ldrb	r2, [r7, #3]
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	3319      	adds	r3, #25
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d124      	bne.n	8003ef8 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003eae:	78fa      	ldrb	r2, [r7, #3]
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	3319      	adds	r3, #25
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	334c      	adds	r3, #76	@ 0x4c
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003ed6:	78fa      	ldrb	r2, [r7, #3]
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	4613      	mov	r3, r2
 8003edc:	011b      	lsls	r3, r3, #4
 8003ede:	1a9b      	subs	r3, r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	334d      	adds	r3, #77	@ 0x4d
 8003ee6:	2203      	movs	r2, #3
 8003ee8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	78fa      	ldrb	r2, [r7, #3]
 8003ef0:	4611      	mov	r1, r2
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f003 fd04 	bl	8007900 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	331a      	adds	r3, #26
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	f040 8437 	bne.w	800477e <HCD_HC_OUT_IRQHandler+0x978>
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	331b      	adds	r3, #27
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f040 842b 	bne.w	800477e <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	3326      	adds	r3, #38	@ 0x26
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d009      	beq.n	8003f52 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003f3e:	78fa      	ldrb	r2, [r7, #3]
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	331b      	adds	r3, #27
 8003f4e:	2201      	movs	r2, #1
 8003f50:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	334d      	adds	r3, #77	@ 0x4d
 8003f62:	2203      	movs	r2, #3
 8003f64:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	78fa      	ldrb	r2, [r7, #3]
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f003 fcc6 	bl	8007900 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003f74:	78fa      	ldrb	r2, [r7, #3]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	3344      	adds	r3, #68	@ 0x44
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	e3f9      	b.n	800477e <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	4611      	mov	r1, r2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f003 fb42 	bl	800761c <USB_ReadChInterrupts>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fa2:	d111      	bne.n	8003fc8 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fb6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	78fa      	ldrb	r2, [r7, #3]
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f003 fc9d 	bl	8007900 <USB_HC_Halt>
 8003fc6:	e3da      	b.n	800477e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	78fa      	ldrb	r2, [r7, #3]
 8003fce:	4611      	mov	r1, r2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f003 fb23 	bl	800761c <USB_ReadChInterrupts>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d168      	bne.n	80040b2 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003fe0:	78fa      	ldrb	r2, [r7, #3]
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	1a9b      	subs	r3, r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	3344      	adds	r3, #68	@ 0x44
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	78fa      	ldrb	r2, [r7, #3]
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f003 fb0d 	bl	800761c <USB_ReadChInterrupts>
 8004002:	4603      	mov	r3, r0
 8004004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004008:	2b40      	cmp	r3, #64	@ 0x40
 800400a:	d112      	bne.n	8004032 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800400c:	78fa      	ldrb	r2, [r7, #3]
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	3319      	adds	r3, #25
 800401c:	2201      	movs	r2, #1
 800401e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	4413      	add	r3, r2
 8004028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800402c:	461a      	mov	r2, r3
 800402e:	2340      	movs	r3, #64	@ 0x40
 8004030:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004032:	78fa      	ldrb	r2, [r7, #3]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	331b      	adds	r3, #27
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d019      	beq.n	800407c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004048:	78fa      	ldrb	r2, [r7, #3]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	331b      	adds	r3, #27
 8004058:	2200      	movs	r2, #0
 800405a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	4413      	add	r3, r2
 8004064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	78fa      	ldrb	r2, [r7, #3]
 800406c:	0151      	lsls	r1, r2, #5
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	440a      	add	r2, r1
 8004072:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800407a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4413      	add	r3, r2
 8004084:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004088:	461a      	mov	r2, r3
 800408a:	2301      	movs	r3, #1
 800408c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800408e:	78fa      	ldrb	r2, [r7, #3]
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	4613      	mov	r3, r2
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	1a9b      	subs	r3, r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	440b      	add	r3, r1
 800409c:	334d      	adds	r3, #77	@ 0x4d
 800409e:	2201      	movs	r2, #1
 80040a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	78fa      	ldrb	r2, [r7, #3]
 80040a8:	4611      	mov	r1, r2
 80040aa:	4618      	mov	r0, r3
 80040ac:	f003 fc28 	bl	8007900 <USB_HC_Halt>
 80040b0:	e365      	b.n	800477e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	4611      	mov	r1, r2
 80040ba:	4618      	mov	r0, r3
 80040bc:	f003 faae 	bl	800761c <USB_ReadChInterrupts>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c6:	2b40      	cmp	r3, #64	@ 0x40
 80040c8:	d139      	bne.n	800413e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80040ca:	78fa      	ldrb	r2, [r7, #3]
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	1a9b      	subs	r3, r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	440b      	add	r3, r1
 80040d8:	334d      	adds	r3, #77	@ 0x4d
 80040da:	2205      	movs	r2, #5
 80040dc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80040de:	78fa      	ldrb	r2, [r7, #3]
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	4613      	mov	r3, r2
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	1a9b      	subs	r3, r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	331a      	adds	r3, #26
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d109      	bne.n	8004108 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80040f4:	78fa      	ldrb	r2, [r7, #3]
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	1a9b      	subs	r3, r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	3319      	adds	r3, #25
 8004104:	2201      	movs	r2, #1
 8004106:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004108:	78fa      	ldrb	r2, [r7, #3]
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	4613      	mov	r3, r2
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	3344      	adds	r3, #68	@ 0x44
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	78fa      	ldrb	r2, [r7, #3]
 8004122:	4611      	mov	r1, r2
 8004124:	4618      	mov	r0, r3
 8004126:	f003 fbeb 	bl	8007900 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800412a:	78fb      	ldrb	r3, [r7, #3]
 800412c:	015a      	lsls	r2, r3, #5
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	4413      	add	r3, r2
 8004132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004136:	461a      	mov	r2, r3
 8004138:	2340      	movs	r3, #64	@ 0x40
 800413a:	6093      	str	r3, [r2, #8]
 800413c:	e31f      	b.n	800477e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	4611      	mov	r1, r2
 8004146:	4618      	mov	r0, r3
 8004148:	f003 fa68 	bl	800761c <USB_ReadChInterrupts>
 800414c:	4603      	mov	r3, r0
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b08      	cmp	r3, #8
 8004154:	d11a      	bne.n	800418c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004156:	78fb      	ldrb	r3, [r7, #3]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4413      	add	r3, r2
 800415e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004162:	461a      	mov	r2, r3
 8004164:	2308      	movs	r3, #8
 8004166:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004168:	78fa      	ldrb	r2, [r7, #3]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	334d      	adds	r3, #77	@ 0x4d
 8004178:	2206      	movs	r2, #6
 800417a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	78fa      	ldrb	r2, [r7, #3]
 8004182:	4611      	mov	r1, r2
 8004184:	4618      	mov	r0, r3
 8004186:	f003 fbbb 	bl	8007900 <USB_HC_Halt>
 800418a:	e2f8      	b.n	800477e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	78fa      	ldrb	r2, [r7, #3]
 8004192:	4611      	mov	r1, r2
 8004194:	4618      	mov	r0, r3
 8004196:	f003 fa41 	bl	800761c <USB_ReadChInterrupts>
 800419a:	4603      	mov	r3, r0
 800419c:	f003 0310 	and.w	r3, r3, #16
 80041a0:	2b10      	cmp	r3, #16
 80041a2:	d144      	bne.n	800422e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	3344      	adds	r3, #68	@ 0x44
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80041b8:	78fa      	ldrb	r2, [r7, #3]
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	4613      	mov	r3, r2
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	334d      	adds	r3, #77	@ 0x4d
 80041c8:	2204      	movs	r2, #4
 80041ca:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80041cc:	78fa      	ldrb	r2, [r7, #3]
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	4613      	mov	r3, r2
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	1a9b      	subs	r3, r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	3319      	adds	r3, #25
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d114      	bne.n	800420c <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80041e2:	78fa      	ldrb	r2, [r7, #3]
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	3318      	adds	r3, #24
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d109      	bne.n	800420c <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80041f8:	78fa      	ldrb	r2, [r7, #3]
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	3319      	adds	r3, #25
 8004208:	2201      	movs	r2, #1
 800420a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	78fa      	ldrb	r2, [r7, #3]
 8004212:	4611      	mov	r1, r2
 8004214:	4618      	mov	r0, r3
 8004216:	f003 fb73 	bl	8007900 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4413      	add	r3, r2
 8004222:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004226:	461a      	mov	r2, r3
 8004228:	2310      	movs	r3, #16
 800422a:	6093      	str	r3, [r2, #8]
 800422c:	e2a7      	b.n	800477e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	4611      	mov	r1, r2
 8004236:	4618      	mov	r0, r3
 8004238:	f003 f9f0 	bl	800761c <USB_ReadChInterrupts>
 800423c:	4603      	mov	r3, r0
 800423e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004242:	2b80      	cmp	r3, #128	@ 0x80
 8004244:	f040 8083 	bne.w	800434e <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	799b      	ldrb	r3, [r3, #6]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d111      	bne.n	8004274 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004250:	78fa      	ldrb	r2, [r7, #3]
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	1a9b      	subs	r3, r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	334d      	adds	r3, #77	@ 0x4d
 8004260:	2207      	movs	r2, #7
 8004262:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	78fa      	ldrb	r2, [r7, #3]
 800426a:	4611      	mov	r1, r2
 800426c:	4618      	mov	r0, r3
 800426e:	f003 fb47 	bl	8007900 <USB_HC_Halt>
 8004272:	e062      	b.n	800433a <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004274:	78fa      	ldrb	r2, [r7, #3]
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	3344      	adds	r3, #68	@ 0x44
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	1c59      	adds	r1, r3, #1
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	4613      	mov	r3, r2
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	1a9b      	subs	r3, r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4403      	add	r3, r0
 8004294:	3344      	adds	r3, #68	@ 0x44
 8004296:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004298:	78fa      	ldrb	r2, [r7, #3]
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	4613      	mov	r3, r2
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	3344      	adds	r3, #68	@ 0x44
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d922      	bls.n	80042f4 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80042ae:	78fa      	ldrb	r2, [r7, #3]
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	3344      	adds	r3, #68	@ 0x44
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80042c2:	78fa      	ldrb	r2, [r7, #3]
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	4613      	mov	r3, r2
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	440b      	add	r3, r1
 80042d0:	334c      	adds	r3, #76	@ 0x4c
 80042d2:	2204      	movs	r2, #4
 80042d4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80042d6:	78fa      	ldrb	r2, [r7, #3]
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	334c      	adds	r3, #76	@ 0x4c
 80042e6:	781a      	ldrb	r2, [r3, #0]
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	4619      	mov	r1, r3
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7fe ff13 	bl	8003118 <HAL_HCD_HC_NotifyURBChange_Callback>
 80042f2:	e022      	b.n	800433a <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042f4:	78fa      	ldrb	r2, [r7, #3]
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	4613      	mov	r3, r2
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	1a9b      	subs	r3, r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	334c      	adds	r3, #76	@ 0x4c
 8004304:	2202      	movs	r2, #2
 8004306:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	4413      	add	r3, r2
 8004310:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800431e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004326:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	4413      	add	r3, r2
 8004330:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004334:	461a      	mov	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800433a:	78fb      	ldrb	r3, [r7, #3]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	4413      	add	r3, r2
 8004342:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004346:	461a      	mov	r2, r3
 8004348:	2380      	movs	r3, #128	@ 0x80
 800434a:	6093      	str	r3, [r2, #8]
 800434c:	e217      	b.n	800477e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	78fa      	ldrb	r2, [r7, #3]
 8004354:	4611      	mov	r1, r2
 8004356:	4618      	mov	r0, r3
 8004358:	f003 f960 	bl	800761c <USB_ReadChInterrupts>
 800435c:	4603      	mov	r3, r0
 800435e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004366:	d11b      	bne.n	80043a0 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004368:	78fa      	ldrb	r2, [r7, #3]
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	4613      	mov	r3, r2
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	1a9b      	subs	r3, r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	334d      	adds	r3, #77	@ 0x4d
 8004378:	2209      	movs	r2, #9
 800437a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	78fa      	ldrb	r2, [r7, #3]
 8004382:	4611      	mov	r1, r2
 8004384:	4618      	mov	r0, r3
 8004386:	f003 fabb 	bl	8007900 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800438a:	78fb      	ldrb	r3, [r7, #3]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	4413      	add	r3, r2
 8004392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004396:	461a      	mov	r2, r3
 8004398:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800439c:	6093      	str	r3, [r2, #8]
 800439e:	e1ee      	b.n	800477e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	78fa      	ldrb	r2, [r7, #3]
 80043a6:	4611      	mov	r1, r2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f003 f937 	bl	800761c <USB_ReadChInterrupts>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	f040 81df 	bne.w	8004778 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80043ba:	78fb      	ldrb	r3, [r7, #3]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043c6:	461a      	mov	r2, r3
 80043c8:	2302      	movs	r3, #2
 80043ca:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80043cc:	78fa      	ldrb	r2, [r7, #3]
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	1a9b      	subs	r3, r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	334d      	adds	r3, #77	@ 0x4d
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	f040 8093 	bne.w	800450a <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043e4:	78fa      	ldrb	r2, [r7, #3]
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	4613      	mov	r3, r2
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	1a9b      	subs	r3, r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	440b      	add	r3, r1
 80043f2:	334d      	adds	r3, #77	@ 0x4d
 80043f4:	2202      	movs	r2, #2
 80043f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80043f8:	78fa      	ldrb	r2, [r7, #3]
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	4613      	mov	r3, r2
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	1a9b      	subs	r3, r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	440b      	add	r3, r1
 8004406:	334c      	adds	r3, #76	@ 0x4c
 8004408:	2201      	movs	r2, #1
 800440a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800440c:	78fa      	ldrb	r2, [r7, #3]
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	4613      	mov	r3, r2
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	1a9b      	subs	r3, r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	3326      	adds	r3, #38	@ 0x26
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d00b      	beq.n	800443a <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004422:	78fa      	ldrb	r2, [r7, #3]
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	1a9b      	subs	r3, r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	3326      	adds	r3, #38	@ 0x26
 8004432:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004434:	2b03      	cmp	r3, #3
 8004436:	f040 8190 	bne.w	800475a <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	799b      	ldrb	r3, [r3, #6]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d115      	bne.n	800446e <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	333d      	adds	r3, #61	@ 0x3d
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	78fa      	ldrb	r2, [r7, #3]
 8004456:	f083 0301 	eor.w	r3, r3, #1
 800445a:	b2d8      	uxtb	r0, r3
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	333d      	adds	r3, #61	@ 0x3d
 800446a:	4602      	mov	r2, r0
 800446c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	799b      	ldrb	r3, [r3, #6]
 8004472:	2b01      	cmp	r3, #1
 8004474:	f040 8171 	bne.w	800475a <HCD_HC_OUT_IRQHandler+0x954>
 8004478:	78fa      	ldrb	r2, [r7, #3]
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	3334      	adds	r3, #52	@ 0x34
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 8165 	beq.w	800475a <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004490:	78fa      	ldrb	r2, [r7, #3]
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	1a9b      	subs	r3, r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	3334      	adds	r3, #52	@ 0x34
 80044a0:	6819      	ldr	r1, [r3, #0]
 80044a2:	78fa      	ldrb	r2, [r7, #3]
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	1a9b      	subs	r3, r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4403      	add	r3, r0
 80044b0:	3328      	adds	r3, #40	@ 0x28
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	440b      	add	r3, r1
 80044b6:	1e59      	subs	r1, r3, #1
 80044b8:	78fa      	ldrb	r2, [r7, #3]
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	4613      	mov	r3, r2
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	1a9b      	subs	r3, r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4403      	add	r3, r0
 80044c6:	3328      	adds	r3, #40	@ 0x28
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80044ce:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 813f 	beq.w	800475a <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4613      	mov	r3, r2
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	333d      	adds	r3, #61	@ 0x3d
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	78fa      	ldrb	r2, [r7, #3]
 80044f0:	f083 0301 	eor.w	r3, r3, #1
 80044f4:	b2d8      	uxtb	r0, r3
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	333d      	adds	r3, #61	@ 0x3d
 8004504:	4602      	mov	r2, r0
 8004506:	701a      	strb	r2, [r3, #0]
 8004508:	e127      	b.n	800475a <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800450a:	78fa      	ldrb	r2, [r7, #3]
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	1a9b      	subs	r3, r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	334d      	adds	r3, #77	@ 0x4d
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b03      	cmp	r3, #3
 800451e:	d120      	bne.n	8004562 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004520:	78fa      	ldrb	r2, [r7, #3]
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	4613      	mov	r3, r2
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	1a9b      	subs	r3, r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	334d      	adds	r3, #77	@ 0x4d
 8004530:	2202      	movs	r2, #2
 8004532:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004534:	78fa      	ldrb	r2, [r7, #3]
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	4613      	mov	r3, r2
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	331b      	adds	r3, #27
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	2b01      	cmp	r3, #1
 8004548:	f040 8107 	bne.w	800475a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800454c:	78fa      	ldrb	r2, [r7, #3]
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	4613      	mov	r3, r2
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	1a9b      	subs	r3, r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	334c      	adds	r3, #76	@ 0x4c
 800455c:	2202      	movs	r2, #2
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	e0fb      	b.n	800475a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004562:	78fa      	ldrb	r2, [r7, #3]
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	4613      	mov	r3, r2
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	1a9b      	subs	r3, r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	334d      	adds	r3, #77	@ 0x4d
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b04      	cmp	r3, #4
 8004576:	d13a      	bne.n	80045ee <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004578:	78fa      	ldrb	r2, [r7, #3]
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	334d      	adds	r3, #77	@ 0x4d
 8004588:	2202      	movs	r2, #2
 800458a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800458c:	78fa      	ldrb	r2, [r7, #3]
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	4613      	mov	r3, r2
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	1a9b      	subs	r3, r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	334c      	adds	r3, #76	@ 0x4c
 800459c:	2202      	movs	r2, #2
 800459e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80045a0:	78fa      	ldrb	r2, [r7, #3]
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	4613      	mov	r3, r2
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	1a9b      	subs	r3, r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	440b      	add	r3, r1
 80045ae:	331b      	adds	r3, #27
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	f040 80d1 	bne.w	800475a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80045b8:	78fa      	ldrb	r2, [r7, #3]
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	1a9b      	subs	r3, r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	331b      	adds	r3, #27
 80045c8:	2200      	movs	r2, #0
 80045ca:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80045cc:	78fb      	ldrb	r3, [r7, #3]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	78fa      	ldrb	r2, [r7, #3]
 80045dc:	0151      	lsls	r1, r2, #5
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	440a      	add	r2, r1
 80045e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80045e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ea:	6053      	str	r3, [r2, #4]
 80045ec:	e0b5      	b.n	800475a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80045ee:	78fa      	ldrb	r2, [r7, #3]
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	4613      	mov	r3, r2
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	1a9b      	subs	r3, r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	334d      	adds	r3, #77	@ 0x4d
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b05      	cmp	r3, #5
 8004602:	d114      	bne.n	800462e <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004604:	78fa      	ldrb	r2, [r7, #3]
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	4613      	mov	r3, r2
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	1a9b      	subs	r3, r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	334d      	adds	r3, #77	@ 0x4d
 8004614:	2202      	movs	r2, #2
 8004616:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004618:	78fa      	ldrb	r2, [r7, #3]
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	4613      	mov	r3, r2
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	1a9b      	subs	r3, r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	334c      	adds	r3, #76	@ 0x4c
 8004628:	2202      	movs	r2, #2
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	e095      	b.n	800475a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800462e:	78fa      	ldrb	r2, [r7, #3]
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	1a9b      	subs	r3, r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	440b      	add	r3, r1
 800463c:	334d      	adds	r3, #77	@ 0x4d
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2b06      	cmp	r3, #6
 8004642:	d114      	bne.n	800466e <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004644:	78fa      	ldrb	r2, [r7, #3]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	334d      	adds	r3, #77	@ 0x4d
 8004654:	2202      	movs	r2, #2
 8004656:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004658:	78fa      	ldrb	r2, [r7, #3]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	1a9b      	subs	r3, r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	334c      	adds	r3, #76	@ 0x4c
 8004668:	2205      	movs	r2, #5
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	e075      	b.n	800475a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800466e:	78fa      	ldrb	r2, [r7, #3]
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	334d      	adds	r3, #77	@ 0x4d
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b07      	cmp	r3, #7
 8004682:	d00a      	beq.n	800469a <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004684:	78fa      	ldrb	r2, [r7, #3]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	1a9b      	subs	r3, r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	334d      	adds	r3, #77	@ 0x4d
 8004694:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004696:	2b09      	cmp	r3, #9
 8004698:	d170      	bne.n	800477c <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800469a:	78fa      	ldrb	r2, [r7, #3]
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	4613      	mov	r3, r2
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	1a9b      	subs	r3, r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	440b      	add	r3, r1
 80046a8:	334d      	adds	r3, #77	@ 0x4d
 80046aa:	2202      	movs	r2, #2
 80046ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80046ae:	78fa      	ldrb	r2, [r7, #3]
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	1a9b      	subs	r3, r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	3344      	adds	r3, #68	@ 0x44
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	1c59      	adds	r1, r3, #1
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	4613      	mov	r3, r2
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4403      	add	r3, r0
 80046ce:	3344      	adds	r3, #68	@ 0x44
 80046d0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046d2:	78fa      	ldrb	r2, [r7, #3]
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	1a9b      	subs	r3, r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	3344      	adds	r3, #68	@ 0x44
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d914      	bls.n	8004712 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80046e8:	78fa      	ldrb	r2, [r7, #3]
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	4613      	mov	r3, r2
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	1a9b      	subs	r3, r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	3344      	adds	r3, #68	@ 0x44
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80046fc:	78fa      	ldrb	r2, [r7, #3]
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	4613      	mov	r3, r2
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	1a9b      	subs	r3, r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	334c      	adds	r3, #76	@ 0x4c
 800470c:	2204      	movs	r2, #4
 800470e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004710:	e022      	b.n	8004758 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004712:	78fa      	ldrb	r2, [r7, #3]
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	4613      	mov	r3, r2
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	334c      	adds	r3, #76	@ 0x4c
 8004722:	2202      	movs	r2, #2
 8004724:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004726:	78fb      	ldrb	r3, [r7, #3]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	4413      	add	r3, r2
 800472e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800473c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004744:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004746:	78fb      	ldrb	r3, [r7, #3]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	4413      	add	r3, r2
 800474e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004752:	461a      	mov	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004758:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800475a:	78fa      	ldrb	r2, [r7, #3]
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	4613      	mov	r3, r2
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	1a9b      	subs	r3, r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	440b      	add	r3, r1
 8004768:	334c      	adds	r3, #76	@ 0x4c
 800476a:	781a      	ldrb	r2, [r3, #0]
 800476c:	78fb      	ldrb	r3, [r7, #3]
 800476e:	4619      	mov	r1, r3
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7fe fcd1 	bl	8003118 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004776:	e002      	b.n	800477e <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004778:	bf00      	nop
 800477a:	e000      	b.n	800477e <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800477c:	bf00      	nop
  }
}
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08a      	sub	sp, #40	@ 0x28
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	f003 030f 	and.w	r3, r3, #15
 80047a4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	0c5b      	lsrs	r3, r3, #17
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	091b      	lsrs	r3, r3, #4
 80047b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047b8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d004      	beq.n	80047ca <HCD_RXQLVL_IRQHandler+0x46>
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2b05      	cmp	r3, #5
 80047c4:	f000 80b6 	beq.w	8004934 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80047c8:	e0b7      	b.n	800493a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 80b3 	beq.w	8004938 <HCD_RXQLVL_IRQHandler+0x1b4>
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	4613      	mov	r3, r2
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	1a9b      	subs	r3, r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	332c      	adds	r3, #44	@ 0x2c
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 80a7 	beq.w	8004938 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	4613      	mov	r3, r2
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	1a9b      	subs	r3, r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	3338      	adds	r3, #56	@ 0x38
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	18d1      	adds	r1, r2, r3
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4613      	mov	r3, r2
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	1a9b      	subs	r3, r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4403      	add	r3, r0
 800480e:	3334      	adds	r3, #52	@ 0x34
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4299      	cmp	r1, r3
 8004814:	f200 8083 	bhi.w	800491e <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	4613      	mov	r3, r2
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	1a9b      	subs	r3, r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	332c      	adds	r3, #44	@ 0x2c
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	b292      	uxth	r2, r2
 8004832:	4619      	mov	r1, r3
 8004834:	f002 fe87 	bl	8007546 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4613      	mov	r3, r2
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	332c      	adds	r3, #44	@ 0x2c
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	18d1      	adds	r1, r2, r3
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	4613      	mov	r3, r2
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	1a9b      	subs	r3, r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4403      	add	r3, r0
 800485c:	332c      	adds	r3, #44	@ 0x2c
 800485e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4613      	mov	r3, r2
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	1a9b      	subs	r3, r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	3338      	adds	r3, #56	@ 0x38
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	18d1      	adds	r1, r2, r3
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4613      	mov	r3, r2
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	1a9b      	subs	r3, r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4403      	add	r3, r0
 8004884:	3338      	adds	r3, #56	@ 0x38
 8004886:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	4413      	add	r3, r2
 8004890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	0cdb      	lsrs	r3, r3, #19
 8004898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800489c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	4613      	mov	r3, r2
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	1a9b      	subs	r3, r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	3328      	adds	r3, #40	@ 0x28
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	461a      	mov	r2, r3
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d13f      	bne.n	8004938 <HCD_RXQLVL_IRQHandler+0x1b4>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d03c      	beq.n	8004938 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048d4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048dc:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ea:	461a      	mov	r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4613      	mov	r3, r2
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	333c      	adds	r3, #60	@ 0x3c
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	f083 0301 	eor.w	r3, r3, #1
 8004906:	b2d8      	uxtb	r0, r3
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4613      	mov	r3, r2
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	1a9b      	subs	r3, r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	440b      	add	r3, r1
 8004916:	333c      	adds	r3, #60	@ 0x3c
 8004918:	4602      	mov	r2, r0
 800491a:	701a      	strb	r2, [r3, #0]
      break;
 800491c:	e00c      	b.n	8004938 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4613      	mov	r3, r2
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	1a9b      	subs	r3, r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	440b      	add	r3, r1
 800492c:	334c      	adds	r3, #76	@ 0x4c
 800492e:	2204      	movs	r2, #4
 8004930:	701a      	strb	r2, [r3, #0]
      break;
 8004932:	e001      	b.n	8004938 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004934:	bf00      	nop
 8004936:	e000      	b.n	800493a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004938:	bf00      	nop
  }
}
 800493a:	bf00      	nop
 800493c:	3728      	adds	r7, #40	@ 0x28
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b086      	sub	sp, #24
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800496e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b02      	cmp	r3, #2
 8004978:	d10b      	bne.n	8004992 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b01      	cmp	r3, #1
 8004982:	d102      	bne.n	800498a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7fe fb9f 	bl	80030c8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f043 0302 	orr.w	r3, r3, #2
 8004990:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b08      	cmp	r3, #8
 800499a:	d132      	bne.n	8004a02 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f043 0308 	orr.w	r3, r3, #8
 80049a2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d126      	bne.n	80049fc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	7a5b      	ldrb	r3, [r3, #9]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d113      	bne.n	80049de <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80049bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049c0:	d106      	bne.n	80049d0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2102      	movs	r1, #2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f002 ff4b 	bl	8007864 <USB_InitFSLSPClkSel>
 80049ce:	e011      	b.n	80049f4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2101      	movs	r1, #1
 80049d6:	4618      	mov	r0, r3
 80049d8:	f002 ff44 	bl	8007864 <USB_InitFSLSPClkSel>
 80049dc:	e00a      	b.n	80049f4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	79db      	ldrb	r3, [r3, #7]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d106      	bne.n	80049f4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049ec:	461a      	mov	r2, r3
 80049ee:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80049f2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7fe fb7b 	bl	80030f0 <HAL_HCD_PortEnabled_Callback>
 80049fa:	e002      	b.n	8004a02 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7fe fb81 	bl	8003104 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d103      	bne.n	8004a14 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f043 0320 	orr.w	r3, r3, #32
 8004a12:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	6013      	str	r3, [r2, #0]
}
 8004a20:	bf00      	nop
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e12b      	b.n	8004c92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fc fa36 	bl	8000ec0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2224      	movs	r2, #36	@ 0x24
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0201 	bic.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a8c:	f001 f964 	bl	8005d58 <HAL_RCC_GetPCLK1Freq>
 8004a90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	4a81      	ldr	r2, [pc, #516]	@ (8004c9c <HAL_I2C_Init+0x274>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d807      	bhi.n	8004aac <HAL_I2C_Init+0x84>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a80      	ldr	r2, [pc, #512]	@ (8004ca0 <HAL_I2C_Init+0x278>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	bf94      	ite	ls
 8004aa4:	2301      	movls	r3, #1
 8004aa6:	2300      	movhi	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	e006      	b.n	8004aba <HAL_I2C_Init+0x92>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4a7d      	ldr	r2, [pc, #500]	@ (8004ca4 <HAL_I2C_Init+0x27c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	bf94      	ite	ls
 8004ab4:	2301      	movls	r3, #1
 8004ab6:	2300      	movhi	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e0e7      	b.n	8004c92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4a78      	ldr	r2, [pc, #480]	@ (8004ca8 <HAL_I2C_Init+0x280>)
 8004ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aca:	0c9b      	lsrs	r3, r3, #18
 8004acc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	4a6a      	ldr	r2, [pc, #424]	@ (8004c9c <HAL_I2C_Init+0x274>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d802      	bhi.n	8004afc <HAL_I2C_Init+0xd4>
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	3301      	adds	r3, #1
 8004afa:	e009      	b.n	8004b10 <HAL_I2C_Init+0xe8>
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004b02:	fb02 f303 	mul.w	r3, r2, r3
 8004b06:	4a69      	ldr	r2, [pc, #420]	@ (8004cac <HAL_I2C_Init+0x284>)
 8004b08:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0c:	099b      	lsrs	r3, r3, #6
 8004b0e:	3301      	adds	r3, #1
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	430b      	orrs	r3, r1
 8004b16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004b22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	495c      	ldr	r1, [pc, #368]	@ (8004c9c <HAL_I2C_Init+0x274>)
 8004b2c:	428b      	cmp	r3, r1
 8004b2e:	d819      	bhi.n	8004b64 <HAL_I2C_Init+0x13c>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	1e59      	subs	r1, r3, #1
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b3e:	1c59      	adds	r1, r3, #1
 8004b40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004b44:	400b      	ands	r3, r1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <HAL_I2C_Init+0x138>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	1e59      	subs	r1, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b58:	3301      	adds	r3, #1
 8004b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b5e:	e051      	b.n	8004c04 <HAL_I2C_Init+0x1dc>
 8004b60:	2304      	movs	r3, #4
 8004b62:	e04f      	b.n	8004c04 <HAL_I2C_Init+0x1dc>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d111      	bne.n	8004b90 <HAL_I2C_Init+0x168>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	1e58      	subs	r0, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6859      	ldr	r1, [r3, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	440b      	add	r3, r1
 8004b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b7e:	3301      	adds	r3, #1
 8004b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bf0c      	ite	eq
 8004b88:	2301      	moveq	r3, #1
 8004b8a:	2300      	movne	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	e012      	b.n	8004bb6 <HAL_I2C_Init+0x18e>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	1e58      	subs	r0, r3, #1
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6859      	ldr	r1, [r3, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	0099      	lsls	r1, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	bf0c      	ite	eq
 8004bb0:	2301      	moveq	r3, #1
 8004bb2:	2300      	movne	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <HAL_I2C_Init+0x196>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e022      	b.n	8004c04 <HAL_I2C_Init+0x1dc>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10e      	bne.n	8004be4 <HAL_I2C_Init+0x1bc>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1e58      	subs	r0, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6859      	ldr	r1, [r3, #4]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	440b      	add	r3, r1
 8004bd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bd8:	3301      	adds	r3, #1
 8004bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004be2:	e00f      	b.n	8004c04 <HAL_I2C_Init+0x1dc>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	1e58      	subs	r0, r3, #1
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6859      	ldr	r1, [r3, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	0099      	lsls	r1, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c04:	6879      	ldr	r1, [r7, #4]
 8004c06:	6809      	ldr	r1, [r1, #0]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69da      	ldr	r2, [r3, #28]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004c32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6911      	ldr	r1, [r2, #16]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	68d2      	ldr	r2, [r2, #12]
 8004c3e:	4311      	orrs	r1, r2
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6812      	ldr	r2, [r2, #0]
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695a      	ldr	r2, [r3, #20]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0201 	orr.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	000186a0 	.word	0x000186a0
 8004ca0:	001e847f 	.word	0x001e847f
 8004ca4:	003d08ff 	.word	0x003d08ff
 8004ca8:	431bde83 	.word	0x431bde83
 8004cac:	10624dd3 	.word	0x10624dd3

08004cb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	d129      	bne.n	8004d1a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2224      	movs	r2, #36	@ 0x24
 8004cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0201 	bic.w	r2, r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0210 	bic.w	r2, r2, #16
 8004cec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f042 0201 	orr.w	r2, r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	e000      	b.n	8004d1c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004d1a:	2302      	movs	r3, #2
  }
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b20      	cmp	r3, #32
 8004d40:	d12a      	bne.n	8004d98 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2224      	movs	r2, #36	@ 0x24
 8004d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0201 	bic.w	r2, r2, #1
 8004d58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d60:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004d62:	89fb      	ldrh	r3, [r7, #14]
 8004d64:	f023 030f 	bic.w	r3, r3, #15
 8004d68:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	89fb      	ldrh	r3, [r7, #14]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	89fa      	ldrh	r2, [r7, #14]
 8004d7a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0201 	orr.w	r2, r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	e000      	b.n	8004d9a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004d98:	2302      	movs	r3, #2
  }
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
	...

08004da8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e0bf      	b.n	8004f3a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d106      	bne.n	8004dd4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fc f8e0 	bl	8000f94 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699a      	ldr	r2, [r3, #24]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004dea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6999      	ldr	r1, [r3, #24]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e00:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6899      	ldr	r1, [r3, #8]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	4b4a      	ldr	r3, [pc, #296]	@ (8004f44 <HAL_LTDC_Init+0x19c>)
 8004e1c:	400b      	ands	r3, r1
 8004e1e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	041b      	lsls	r3, r3, #16
 8004e26:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6899      	ldr	r1, [r3, #8]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699a      	ldr	r2, [r3, #24]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68d9      	ldr	r1, [r3, #12]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	4b3e      	ldr	r3, [pc, #248]	@ (8004f44 <HAL_LTDC_Init+0x19c>)
 8004e4a:	400b      	ands	r3, r1
 8004e4c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68d9      	ldr	r1, [r3, #12]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1a      	ldr	r2, [r3, #32]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6919      	ldr	r1, [r3, #16]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	4b33      	ldr	r3, [pc, #204]	@ (8004f44 <HAL_LTDC_Init+0x19c>)
 8004e78:	400b      	ands	r3, r1
 8004e7a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e80:	041b      	lsls	r3, r3, #16
 8004e82:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6919      	ldr	r1, [r3, #16]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6959      	ldr	r1, [r3, #20]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	4b27      	ldr	r3, [pc, #156]	@ (8004f44 <HAL_LTDC_Init+0x19c>)
 8004ea6:	400b      	ands	r3, r1
 8004ea8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eae:	041b      	lsls	r3, r3, #16
 8004eb0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6959      	ldr	r1, [r3, #20]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ece:	021b      	lsls	r3, r3, #8
 8004ed0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004ed8:	041b      	lsls	r3, r3, #16
 8004eda:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004eea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0206 	orr.w	r2, r2, #6
 8004f16:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699a      	ldr	r2, [r3, #24]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0201 	orr.w	r2, r2, #1
 8004f26:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	f000f800 	.word	0xf000f800

08004f48 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f56:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d023      	beq.n	8004fb2 <HAL_LTDC_IRQHandler+0x6a>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d01e      	beq.n	8004fb2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0204 	bic.w	r2, r2, #4
 8004f82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2204      	movs	r2, #4
 8004f8a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004f92:	f043 0201 	orr.w	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2204      	movs	r2, #4
 8004fa0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f86f 	bl	8005090 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d023      	beq.n	8005004 <HAL_LTDC_IRQHandler+0xbc>
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d01e      	beq.n	8005004 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0202 	bic.w	r2, r2, #2
 8004fd4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004fe4:	f043 0202 	orr.w	r2, r3, #2
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2204      	movs	r2, #4
 8004ff2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f846 	bl	8005090 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d01b      	beq.n	8005046 <HAL_LTDC_IRQHandler+0xfe>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b00      	cmp	r3, #0
 8005016:	d016      	beq.n	8005046 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0201 	bic.w	r2, r2, #1
 8005026:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2201      	movs	r2, #1
 800502e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f82f 	bl	80050a4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01b      	beq.n	8005088 <HAL_LTDC_IRQHandler+0x140>
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b00      	cmp	r3, #0
 8005058:	d016      	beq.n	8005088 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0208 	bic.w	r2, r2, #8
 8005068:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2208      	movs	r2, #8
 8005070:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f818 	bl	80050b8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005088:	bf00      	nop
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80050cc:	b5b0      	push	{r4, r5, r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_LTDC_ConfigLayer+0x1a>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e02c      	b.n	8005140 <HAL_LTDC_ConfigLayer+0x74>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2202      	movs	r2, #2
 80050f2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2134      	movs	r1, #52	@ 0x34
 80050fc:	fb01 f303 	mul.w	r3, r1, r3
 8005100:	4413      	add	r3, r2
 8005102:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	4614      	mov	r4, r2
 800510a:	461d      	mov	r5, r3
 800510c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800510e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005118:	682b      	ldr	r3, [r5, #0]
 800511a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 f811 	bl	8005148 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2201      	movs	r2, #1
 800512c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bdb0      	pop	{r4, r5, r7, pc}

08005148 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005148:	b480      	push	{r7}
 800514a:	b089      	sub	sp, #36	@ 0x24
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	0c1b      	lsrs	r3, r3, #16
 8005160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005164:	4413      	add	r3, r2
 8005166:	041b      	lsls	r3, r3, #16
 8005168:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	01db      	lsls	r3, r3, #7
 8005174:	4413      	add	r3, r2
 8005176:	3384      	adds	r3, #132	@ 0x84
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	4611      	mov	r1, r2
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	01d2      	lsls	r2, r2, #7
 8005184:	440a      	add	r2, r1
 8005186:	3284      	adds	r2, #132	@ 0x84
 8005188:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800518c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	0c1b      	lsrs	r3, r3, #16
 800519a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800519e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80051a0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4619      	mov	r1, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	01db      	lsls	r3, r3, #7
 80051ac:	440b      	add	r3, r1
 80051ae:	3384      	adds	r3, #132	@ 0x84
 80051b0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80051b6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051c6:	4413      	add	r3, r2
 80051c8:	041b      	lsls	r3, r3, #16
 80051ca:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	01db      	lsls	r3, r3, #7
 80051d6:	4413      	add	r3, r2
 80051d8:	3384      	adds	r3, #132	@ 0x84
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	6812      	ldr	r2, [r2, #0]
 80051e0:	4611      	mov	r1, r2
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	01d2      	lsls	r2, r2, #7
 80051e6:	440a      	add	r2, r1
 80051e8:	3284      	adds	r2, #132	@ 0x84
 80051ea:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80051ee:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051fe:	4413      	add	r3, r2
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4619      	mov	r1, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	01db      	lsls	r3, r3, #7
 800520c:	440b      	add	r3, r1
 800520e:	3384      	adds	r3, #132	@ 0x84
 8005210:	4619      	mov	r1, r3
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	4313      	orrs	r3, r2
 8005216:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	01db      	lsls	r3, r3, #7
 8005222:	4413      	add	r3, r2
 8005224:	3384      	adds	r3, #132	@ 0x84
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	6812      	ldr	r2, [r2, #0]
 800522c:	4611      	mov	r1, r2
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	01d2      	lsls	r2, r2, #7
 8005232:	440a      	add	r2, r1
 8005234:	3284      	adds	r2, #132	@ 0x84
 8005236:	f023 0307 	bic.w	r3, r3, #7
 800523a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	461a      	mov	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	01db      	lsls	r3, r3, #7
 8005246:	4413      	add	r3, r2
 8005248:	3384      	adds	r3, #132	@ 0x84
 800524a:	461a      	mov	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005258:	021b      	lsls	r3, r3, #8
 800525a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005262:	041b      	lsls	r3, r3, #16
 8005264:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	061b      	lsls	r3, r3, #24
 800526c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	01db      	lsls	r3, r3, #7
 8005278:	4413      	add	r3, r2
 800527a:	3384      	adds	r3, #132	@ 0x84
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	01db      	lsls	r3, r3, #7
 8005288:	4413      	add	r3, r2
 800528a:	3384      	adds	r3, #132	@ 0x84
 800528c:	461a      	mov	r2, r3
 800528e:	2300      	movs	r3, #0
 8005290:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005298:	461a      	mov	r2, r3
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	431a      	orrs	r2, r3
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	431a      	orrs	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4619      	mov	r1, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	01db      	lsls	r3, r3, #7
 80052ac:	440b      	add	r3, r1
 80052ae:	3384      	adds	r3, #132	@ 0x84
 80052b0:	4619      	mov	r1, r3
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	461a      	mov	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	01db      	lsls	r3, r3, #7
 80052c2:	4413      	add	r3, r2
 80052c4:	3384      	adds	r3, #132	@ 0x84
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	6812      	ldr	r2, [r2, #0]
 80052cc:	4611      	mov	r1, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	01d2      	lsls	r2, r2, #7
 80052d2:	440a      	add	r2, r1
 80052d4:	3284      	adds	r2, #132	@ 0x84
 80052d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80052da:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	461a      	mov	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	01db      	lsls	r3, r3, #7
 80052e6:	4413      	add	r3, r2
 80052e8:	3384      	adds	r3, #132	@ 0x84
 80052ea:	461a      	mov	r2, r3
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	461a      	mov	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	01db      	lsls	r3, r3, #7
 80052fc:	4413      	add	r3, r2
 80052fe:	3384      	adds	r3, #132	@ 0x84
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	6812      	ldr	r2, [r2, #0]
 8005306:	4611      	mov	r1, r2
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	01d2      	lsls	r2, r2, #7
 800530c:	440a      	add	r2, r1
 800530e:	3284      	adds	r2, #132	@ 0x84
 8005310:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005314:	f023 0307 	bic.w	r3, r3, #7
 8005318:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	69da      	ldr	r2, [r3, #28]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	68f9      	ldr	r1, [r7, #12]
 8005324:	6809      	ldr	r1, [r1, #0]
 8005326:	4608      	mov	r0, r1
 8005328:	6879      	ldr	r1, [r7, #4]
 800532a:	01c9      	lsls	r1, r1, #7
 800532c:	4401      	add	r1, r0
 800532e:	3184      	adds	r1, #132	@ 0x84
 8005330:	4313      	orrs	r3, r2
 8005332:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	461a      	mov	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	01db      	lsls	r3, r3, #7
 800533e:	4413      	add	r3, r2
 8005340:	3384      	adds	r3, #132	@ 0x84
 8005342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	461a      	mov	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	01db      	lsls	r3, r3, #7
 800534e:	4413      	add	r3, r2
 8005350:	3384      	adds	r3, #132	@ 0x84
 8005352:	461a      	mov	r2, r3
 8005354:	2300      	movs	r3, #0
 8005356:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	461a      	mov	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	01db      	lsls	r3, r3, #7
 8005362:	4413      	add	r3, r2
 8005364:	3384      	adds	r3, #132	@ 0x84
 8005366:	461a      	mov	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d102      	bne.n	800537c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005376:	2304      	movs	r3, #4
 8005378:	61fb      	str	r3, [r7, #28]
 800537a:	e01b      	b.n	80053b4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d102      	bne.n	800538a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005384:	2303      	movs	r3, #3
 8005386:	61fb      	str	r3, [r7, #28]
 8005388:	e014      	b.n	80053b4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b04      	cmp	r3, #4
 8005390:	d00b      	beq.n	80053aa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005396:	2b02      	cmp	r3, #2
 8005398:	d007      	beq.n	80053aa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800539e:	2b03      	cmp	r3, #3
 80053a0:	d003      	beq.n	80053aa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80053a6:	2b07      	cmp	r3, #7
 80053a8:	d102      	bne.n	80053b0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80053aa:	2302      	movs	r3, #2
 80053ac:	61fb      	str	r3, [r7, #28]
 80053ae:	e001      	b.n	80053b4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80053b0:	2301      	movs	r3, #1
 80053b2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	461a      	mov	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	01db      	lsls	r3, r3, #7
 80053be:	4413      	add	r3, r2
 80053c0:	3384      	adds	r3, #132	@ 0x84
 80053c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	6812      	ldr	r2, [r2, #0]
 80053c8:	4611      	mov	r1, r2
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	01d2      	lsls	r2, r2, #7
 80053ce:	440a      	add	r2, r1
 80053d0:	3284      	adds	r2, #132	@ 0x84
 80053d2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80053d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	fb02 f303 	mul.w	r3, r2, r3
 80053e2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	6859      	ldr	r1, [r3, #4]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	1acb      	subs	r3, r1, r3
 80053ee:	69f9      	ldr	r1, [r7, #28]
 80053f0:	fb01 f303 	mul.w	r3, r1, r3
 80053f4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80053f6:	68f9      	ldr	r1, [r7, #12]
 80053f8:	6809      	ldr	r1, [r1, #0]
 80053fa:	4608      	mov	r0, r1
 80053fc:	6879      	ldr	r1, [r7, #4]
 80053fe:	01c9      	lsls	r1, r1, #7
 8005400:	4401      	add	r1, r0
 8005402:	3184      	adds	r1, #132	@ 0x84
 8005404:	4313      	orrs	r3, r2
 8005406:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	461a      	mov	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	01db      	lsls	r3, r3, #7
 8005412:	4413      	add	r3, r2
 8005414:	3384      	adds	r3, #132	@ 0x84
 8005416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	6812      	ldr	r2, [r2, #0]
 800541c:	4611      	mov	r1, r2
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	01d2      	lsls	r2, r2, #7
 8005422:	440a      	add	r2, r1
 8005424:	3284      	adds	r2, #132	@ 0x84
 8005426:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800542a:	f023 0307 	bic.w	r3, r3, #7
 800542e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	461a      	mov	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	01db      	lsls	r3, r3, #7
 800543a:	4413      	add	r3, r2
 800543c:	3384      	adds	r3, #132	@ 0x84
 800543e:	461a      	mov	r2, r3
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005444:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	01db      	lsls	r3, r3, #7
 8005450:	4413      	add	r3, r2
 8005452:	3384      	adds	r3, #132	@ 0x84
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	6812      	ldr	r2, [r2, #0]
 800545a:	4611      	mov	r1, r2
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	01d2      	lsls	r2, r2, #7
 8005460:	440a      	add	r2, r1
 8005462:	3284      	adds	r2, #132	@ 0x84
 8005464:	f043 0301 	orr.w	r3, r3, #1
 8005468:	6013      	str	r3, [r2, #0]
}
 800546a:	bf00      	nop
 800546c:	3724      	adds	r7, #36	@ 0x24
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
	...

08005478 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e267      	b.n	800595a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d075      	beq.n	8005582 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005496:	4b88      	ldr	r3, [pc, #544]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 030c 	and.w	r3, r3, #12
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d00c      	beq.n	80054bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054a2:	4b85      	ldr	r3, [pc, #532]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80054aa:	2b08      	cmp	r3, #8
 80054ac:	d112      	bne.n	80054d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054ae:	4b82      	ldr	r3, [pc, #520]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054ba:	d10b      	bne.n	80054d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054bc:	4b7e      	ldr	r3, [pc, #504]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d05b      	beq.n	8005580 <HAL_RCC_OscConfig+0x108>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d157      	bne.n	8005580 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e242      	b.n	800595a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054dc:	d106      	bne.n	80054ec <HAL_RCC_OscConfig+0x74>
 80054de:	4b76      	ldr	r3, [pc, #472]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a75      	ldr	r2, [pc, #468]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 80054e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	e01d      	b.n	8005528 <HAL_RCC_OscConfig+0xb0>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054f4:	d10c      	bne.n	8005510 <HAL_RCC_OscConfig+0x98>
 80054f6:	4b70      	ldr	r3, [pc, #448]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a6f      	ldr	r2, [pc, #444]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 80054fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	4b6d      	ldr	r3, [pc, #436]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a6c      	ldr	r2, [pc, #432]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 8005508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	e00b      	b.n	8005528 <HAL_RCC_OscConfig+0xb0>
 8005510:	4b69      	ldr	r3, [pc, #420]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a68      	ldr	r2, [pc, #416]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 8005516:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	4b66      	ldr	r3, [pc, #408]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a65      	ldr	r2, [pc, #404]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 8005522:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d013      	beq.n	8005558 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005530:	f7fc ff52 	bl	80023d8 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005538:	f7fc ff4e 	bl	80023d8 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b64      	cmp	r3, #100	@ 0x64
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e207      	b.n	800595a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554a:	4b5b      	ldr	r3, [pc, #364]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0f0      	beq.n	8005538 <HAL_RCC_OscConfig+0xc0>
 8005556:	e014      	b.n	8005582 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005558:	f7fc ff3e 	bl	80023d8 <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005560:	f7fc ff3a 	bl	80023d8 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b64      	cmp	r3, #100	@ 0x64
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e1f3      	b.n	800595a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005572:	4b51      	ldr	r3, [pc, #324]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1f0      	bne.n	8005560 <HAL_RCC_OscConfig+0xe8>
 800557e:	e000      	b.n	8005582 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d063      	beq.n	8005656 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800558e:	4b4a      	ldr	r3, [pc, #296]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 030c 	and.w	r3, r3, #12
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00b      	beq.n	80055b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800559a:	4b47      	ldr	r3, [pc, #284]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80055a2:	2b08      	cmp	r3, #8
 80055a4:	d11c      	bne.n	80055e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055a6:	4b44      	ldr	r3, [pc, #272]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d116      	bne.n	80055e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055b2:	4b41      	ldr	r3, [pc, #260]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d005      	beq.n	80055ca <HAL_RCC_OscConfig+0x152>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d001      	beq.n	80055ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e1c7      	b.n	800595a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ca:	4b3b      	ldr	r3, [pc, #236]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	4937      	ldr	r1, [pc, #220]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055de:	e03a      	b.n	8005656 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d020      	beq.n	800562a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055e8:	4b34      	ldr	r3, [pc, #208]	@ (80056bc <HAL_RCC_OscConfig+0x244>)
 80055ea:	2201      	movs	r2, #1
 80055ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ee:	f7fc fef3 	bl	80023d8 <HAL_GetTick>
 80055f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f4:	e008      	b.n	8005608 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055f6:	f7fc feef 	bl	80023d8 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e1a8      	b.n	800595a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005608:	4b2b      	ldr	r3, [pc, #172]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0f0      	beq.n	80055f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005614:	4b28      	ldr	r3, [pc, #160]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	4925      	ldr	r1, [pc, #148]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 8005624:	4313      	orrs	r3, r2
 8005626:	600b      	str	r3, [r1, #0]
 8005628:	e015      	b.n	8005656 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800562a:	4b24      	ldr	r3, [pc, #144]	@ (80056bc <HAL_RCC_OscConfig+0x244>)
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005630:	f7fc fed2 	bl	80023d8 <HAL_GetTick>
 8005634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005636:	e008      	b.n	800564a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005638:	f7fc fece 	bl	80023d8 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e187      	b.n	800595a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800564a:	4b1b      	ldr	r3, [pc, #108]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1f0      	bne.n	8005638 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b00      	cmp	r3, #0
 8005660:	d036      	beq.n	80056d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d016      	beq.n	8005698 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800566a:	4b15      	ldr	r3, [pc, #84]	@ (80056c0 <HAL_RCC_OscConfig+0x248>)
 800566c:	2201      	movs	r2, #1
 800566e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005670:	f7fc feb2 	bl	80023d8 <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005678:	f7fc feae 	bl	80023d8 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e167      	b.n	800595a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800568a:	4b0b      	ldr	r3, [pc, #44]	@ (80056b8 <HAL_RCC_OscConfig+0x240>)
 800568c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0f0      	beq.n	8005678 <HAL_RCC_OscConfig+0x200>
 8005696:	e01b      	b.n	80056d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005698:	4b09      	ldr	r3, [pc, #36]	@ (80056c0 <HAL_RCC_OscConfig+0x248>)
 800569a:	2200      	movs	r2, #0
 800569c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800569e:	f7fc fe9b 	bl	80023d8 <HAL_GetTick>
 80056a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056a4:	e00e      	b.n	80056c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056a6:	f7fc fe97 	bl	80023d8 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d907      	bls.n	80056c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e150      	b.n	800595a <HAL_RCC_OscConfig+0x4e2>
 80056b8:	40023800 	.word	0x40023800
 80056bc:	42470000 	.word	0x42470000
 80056c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056c4:	4b88      	ldr	r3, [pc, #544]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 80056c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1ea      	bne.n	80056a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 8097 	beq.w	800580c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056de:	2300      	movs	r3, #0
 80056e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056e2:	4b81      	ldr	r3, [pc, #516]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 80056e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10f      	bne.n	800570e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ee:	2300      	movs	r3, #0
 80056f0:	60bb      	str	r3, [r7, #8]
 80056f2:	4b7d      	ldr	r3, [pc, #500]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 80056f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f6:	4a7c      	ldr	r2, [pc, #496]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 80056f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80056fe:	4b7a      	ldr	r3, [pc, #488]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 8005700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005706:	60bb      	str	r3, [r7, #8]
 8005708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800570a:	2301      	movs	r3, #1
 800570c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800570e:	4b77      	ldr	r3, [pc, #476]	@ (80058ec <HAL_RCC_OscConfig+0x474>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005716:	2b00      	cmp	r3, #0
 8005718:	d118      	bne.n	800574c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800571a:	4b74      	ldr	r3, [pc, #464]	@ (80058ec <HAL_RCC_OscConfig+0x474>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a73      	ldr	r2, [pc, #460]	@ (80058ec <HAL_RCC_OscConfig+0x474>)
 8005720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005726:	f7fc fe57 	bl	80023d8 <HAL_GetTick>
 800572a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800572e:	f7fc fe53 	bl	80023d8 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e10c      	b.n	800595a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005740:	4b6a      	ldr	r3, [pc, #424]	@ (80058ec <HAL_RCC_OscConfig+0x474>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0f0      	beq.n	800572e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d106      	bne.n	8005762 <HAL_RCC_OscConfig+0x2ea>
 8005754:	4b64      	ldr	r3, [pc, #400]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 8005756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005758:	4a63      	ldr	r2, [pc, #396]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 800575a:	f043 0301 	orr.w	r3, r3, #1
 800575e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005760:	e01c      	b.n	800579c <HAL_RCC_OscConfig+0x324>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	2b05      	cmp	r3, #5
 8005768:	d10c      	bne.n	8005784 <HAL_RCC_OscConfig+0x30c>
 800576a:	4b5f      	ldr	r3, [pc, #380]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 800576c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800576e:	4a5e      	ldr	r2, [pc, #376]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 8005770:	f043 0304 	orr.w	r3, r3, #4
 8005774:	6713      	str	r3, [r2, #112]	@ 0x70
 8005776:	4b5c      	ldr	r3, [pc, #368]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 8005778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800577a:	4a5b      	ldr	r2, [pc, #364]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 800577c:	f043 0301 	orr.w	r3, r3, #1
 8005780:	6713      	str	r3, [r2, #112]	@ 0x70
 8005782:	e00b      	b.n	800579c <HAL_RCC_OscConfig+0x324>
 8005784:	4b58      	ldr	r3, [pc, #352]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 8005786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005788:	4a57      	ldr	r2, [pc, #348]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 800578a:	f023 0301 	bic.w	r3, r3, #1
 800578e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005790:	4b55      	ldr	r3, [pc, #340]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 8005792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005794:	4a54      	ldr	r2, [pc, #336]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 8005796:	f023 0304 	bic.w	r3, r3, #4
 800579a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d015      	beq.n	80057d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a4:	f7fc fe18 	bl	80023d8 <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057aa:	e00a      	b.n	80057c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ac:	f7fc fe14 	bl	80023d8 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e0cb      	b.n	800595a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c2:	4b49      	ldr	r3, [pc, #292]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 80057c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0ee      	beq.n	80057ac <HAL_RCC_OscConfig+0x334>
 80057ce:	e014      	b.n	80057fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057d0:	f7fc fe02 	bl	80023d8 <HAL_GetTick>
 80057d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057d6:	e00a      	b.n	80057ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057d8:	f7fc fdfe 	bl	80023d8 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e0b5      	b.n	800595a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ee:	4b3e      	ldr	r3, [pc, #248]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 80057f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1ee      	bne.n	80057d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057fa:	7dfb      	ldrb	r3, [r7, #23]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d105      	bne.n	800580c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005800:	4b39      	ldr	r3, [pc, #228]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 8005802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005804:	4a38      	ldr	r2, [pc, #224]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 8005806:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800580a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 80a1 	beq.w	8005958 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005816:	4b34      	ldr	r3, [pc, #208]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 030c 	and.w	r3, r3, #12
 800581e:	2b08      	cmp	r3, #8
 8005820:	d05c      	beq.n	80058dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	2b02      	cmp	r3, #2
 8005828:	d141      	bne.n	80058ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800582a:	4b31      	ldr	r3, [pc, #196]	@ (80058f0 <HAL_RCC_OscConfig+0x478>)
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005830:	f7fc fdd2 	bl	80023d8 <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005838:	f7fc fdce 	bl	80023d8 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e087      	b.n	800595a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584a:	4b27      	ldr	r3, [pc, #156]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1f0      	bne.n	8005838 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69da      	ldr	r2, [r3, #28]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005864:	019b      	lsls	r3, r3, #6
 8005866:	431a      	orrs	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586c:	085b      	lsrs	r3, r3, #1
 800586e:	3b01      	subs	r3, #1
 8005870:	041b      	lsls	r3, r3, #16
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005878:	061b      	lsls	r3, r3, #24
 800587a:	491b      	ldr	r1, [pc, #108]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 800587c:	4313      	orrs	r3, r2
 800587e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005880:	4b1b      	ldr	r3, [pc, #108]	@ (80058f0 <HAL_RCC_OscConfig+0x478>)
 8005882:	2201      	movs	r2, #1
 8005884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005886:	f7fc fda7 	bl	80023d8 <HAL_GetTick>
 800588a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800588c:	e008      	b.n	80058a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800588e:	f7fc fda3 	bl	80023d8 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d901      	bls.n	80058a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e05c      	b.n	800595a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058a0:	4b11      	ldr	r3, [pc, #68]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d0f0      	beq.n	800588e <HAL_RCC_OscConfig+0x416>
 80058ac:	e054      	b.n	8005958 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ae:	4b10      	ldr	r3, [pc, #64]	@ (80058f0 <HAL_RCC_OscConfig+0x478>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b4:	f7fc fd90 	bl	80023d8 <HAL_GetTick>
 80058b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ba:	e008      	b.n	80058ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058bc:	f7fc fd8c 	bl	80023d8 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e045      	b.n	800595a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ce:	4b06      	ldr	r3, [pc, #24]	@ (80058e8 <HAL_RCC_OscConfig+0x470>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1f0      	bne.n	80058bc <HAL_RCC_OscConfig+0x444>
 80058da:	e03d      	b.n	8005958 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d107      	bne.n	80058f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e038      	b.n	800595a <HAL_RCC_OscConfig+0x4e2>
 80058e8:	40023800 	.word	0x40023800
 80058ec:	40007000 	.word	0x40007000
 80058f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005964 <HAL_RCC_OscConfig+0x4ec>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d028      	beq.n	8005954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800590c:	429a      	cmp	r2, r3
 800590e:	d121      	bne.n	8005954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800591a:	429a      	cmp	r2, r3
 800591c:	d11a      	bne.n	8005954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005924:	4013      	ands	r3, r2
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800592a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800592c:	4293      	cmp	r3, r2
 800592e:	d111      	bne.n	8005954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593a:	085b      	lsrs	r3, r3, #1
 800593c:	3b01      	subs	r3, #1
 800593e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005940:	429a      	cmp	r2, r3
 8005942:	d107      	bne.n	8005954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005950:	429a      	cmp	r2, r3
 8005952:	d001      	beq.n	8005958 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e000      	b.n	800595a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3718      	adds	r7, #24
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	40023800 	.word	0x40023800

08005968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e0cc      	b.n	8005b16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800597c:	4b68      	ldr	r3, [pc, #416]	@ (8005b20 <HAL_RCC_ClockConfig+0x1b8>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 030f 	and.w	r3, r3, #15
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d90c      	bls.n	80059a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800598a:	4b65      	ldr	r3, [pc, #404]	@ (8005b20 <HAL_RCC_ClockConfig+0x1b8>)
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005992:	4b63      	ldr	r3, [pc, #396]	@ (8005b20 <HAL_RCC_ClockConfig+0x1b8>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	429a      	cmp	r2, r3
 800599e:	d001      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e0b8      	b.n	8005b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d020      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0304 	and.w	r3, r3, #4
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d005      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059bc:	4b59      	ldr	r3, [pc, #356]	@ (8005b24 <HAL_RCC_ClockConfig+0x1bc>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	4a58      	ldr	r2, [pc, #352]	@ (8005b24 <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80059c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0308 	and.w	r3, r3, #8
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d005      	beq.n	80059e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059d4:	4b53      	ldr	r3, [pc, #332]	@ (8005b24 <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	4a52      	ldr	r2, [pc, #328]	@ (8005b24 <HAL_RCC_ClockConfig+0x1bc>)
 80059da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80059de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059e0:	4b50      	ldr	r3, [pc, #320]	@ (8005b24 <HAL_RCC_ClockConfig+0x1bc>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	494d      	ldr	r1, [pc, #308]	@ (8005b24 <HAL_RCC_ClockConfig+0x1bc>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d044      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d107      	bne.n	8005a16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a06:	4b47      	ldr	r3, [pc, #284]	@ (8005b24 <HAL_RCC_ClockConfig+0x1bc>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d119      	bne.n	8005a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e07f      	b.n	8005b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d003      	beq.n	8005a26 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d107      	bne.n	8005a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a26:	4b3f      	ldr	r3, [pc, #252]	@ (8005b24 <HAL_RCC_ClockConfig+0x1bc>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d109      	bne.n	8005a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e06f      	b.n	8005b16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a36:	4b3b      	ldr	r3, [pc, #236]	@ (8005b24 <HAL_RCC_ClockConfig+0x1bc>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e067      	b.n	8005b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a46:	4b37      	ldr	r3, [pc, #220]	@ (8005b24 <HAL_RCC_ClockConfig+0x1bc>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f023 0203 	bic.w	r2, r3, #3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	4934      	ldr	r1, [pc, #208]	@ (8005b24 <HAL_RCC_ClockConfig+0x1bc>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a58:	f7fc fcbe 	bl	80023d8 <HAL_GetTick>
 8005a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a5e:	e00a      	b.n	8005a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a60:	f7fc fcba 	bl	80023d8 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e04f      	b.n	8005b16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a76:	4b2b      	ldr	r3, [pc, #172]	@ (8005b24 <HAL_RCC_ClockConfig+0x1bc>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 020c 	and.w	r2, r3, #12
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d1eb      	bne.n	8005a60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a88:	4b25      	ldr	r3, [pc, #148]	@ (8005b20 <HAL_RCC_ClockConfig+0x1b8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 030f 	and.w	r3, r3, #15
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d20c      	bcs.n	8005ab0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a96:	4b22      	ldr	r3, [pc, #136]	@ (8005b20 <HAL_RCC_ClockConfig+0x1b8>)
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a9e:	4b20      	ldr	r3, [pc, #128]	@ (8005b20 <HAL_RCC_ClockConfig+0x1b8>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 030f 	and.w	r3, r3, #15
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d001      	beq.n	8005ab0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e032      	b.n	8005b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0304 	and.w	r3, r3, #4
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d008      	beq.n	8005ace <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005abc:	4b19      	ldr	r3, [pc, #100]	@ (8005b24 <HAL_RCC_ClockConfig+0x1bc>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	4916      	ldr	r1, [pc, #88]	@ (8005b24 <HAL_RCC_ClockConfig+0x1bc>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0308 	and.w	r3, r3, #8
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d009      	beq.n	8005aee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ada:	4b12      	ldr	r3, [pc, #72]	@ (8005b24 <HAL_RCC_ClockConfig+0x1bc>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	490e      	ldr	r1, [pc, #56]	@ (8005b24 <HAL_RCC_ClockConfig+0x1bc>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005aee:	f000 f821 	bl	8005b34 <HAL_RCC_GetSysClockFreq>
 8005af2:	4602      	mov	r2, r0
 8005af4:	4b0b      	ldr	r3, [pc, #44]	@ (8005b24 <HAL_RCC_ClockConfig+0x1bc>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	091b      	lsrs	r3, r3, #4
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	490a      	ldr	r1, [pc, #40]	@ (8005b28 <HAL_RCC_ClockConfig+0x1c0>)
 8005b00:	5ccb      	ldrb	r3, [r1, r3]
 8005b02:	fa22 f303 	lsr.w	r3, r2, r3
 8005b06:	4a09      	ldr	r2, [pc, #36]	@ (8005b2c <HAL_RCC_ClockConfig+0x1c4>)
 8005b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005b0a:	4b09      	ldr	r3, [pc, #36]	@ (8005b30 <HAL_RCC_ClockConfig+0x1c8>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fb fd1c 	bl	800154c <HAL_InitTick>

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	40023c00 	.word	0x40023c00
 8005b24:	40023800 	.word	0x40023800
 8005b28:	08008bc4 	.word	0x08008bc4
 8005b2c:	20000000 	.word	0x20000000
 8005b30:	20000004 	.word	0x20000004

08005b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b38:	b094      	sub	sp, #80	@ 0x50
 8005b3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b4c:	4b79      	ldr	r3, [pc, #484]	@ (8005d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f003 030c 	and.w	r3, r3, #12
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d00d      	beq.n	8005b74 <HAL_RCC_GetSysClockFreq+0x40>
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	f200 80e1 	bhi.w	8005d20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <HAL_RCC_GetSysClockFreq+0x34>
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	d003      	beq.n	8005b6e <HAL_RCC_GetSysClockFreq+0x3a>
 8005b66:	e0db      	b.n	8005d20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b68:	4b73      	ldr	r3, [pc, #460]	@ (8005d38 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b6c:	e0db      	b.n	8005d26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b6e:	4b73      	ldr	r3, [pc, #460]	@ (8005d3c <HAL_RCC_GetSysClockFreq+0x208>)
 8005b70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b72:	e0d8      	b.n	8005d26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b74:	4b6f      	ldr	r3, [pc, #444]	@ (8005d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b7c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b7e:	4b6d      	ldr	r3, [pc, #436]	@ (8005d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d063      	beq.n	8005c52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b8a:	4b6a      	ldr	r3, [pc, #424]	@ (8005d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	099b      	lsrs	r3, r3, #6
 8005b90:	2200      	movs	r2, #0
 8005b92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ba2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005ba6:	4622      	mov	r2, r4
 8005ba8:	462b      	mov	r3, r5
 8005baa:	f04f 0000 	mov.w	r0, #0
 8005bae:	f04f 0100 	mov.w	r1, #0
 8005bb2:	0159      	lsls	r1, r3, #5
 8005bb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bb8:	0150      	lsls	r0, r2, #5
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4621      	mov	r1, r4
 8005bc0:	1a51      	subs	r1, r2, r1
 8005bc2:	6139      	str	r1, [r7, #16]
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bd8:	4659      	mov	r1, fp
 8005bda:	018b      	lsls	r3, r1, #6
 8005bdc:	4651      	mov	r1, sl
 8005bde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005be2:	4651      	mov	r1, sl
 8005be4:	018a      	lsls	r2, r1, #6
 8005be6:	4651      	mov	r1, sl
 8005be8:	ebb2 0801 	subs.w	r8, r2, r1
 8005bec:	4659      	mov	r1, fp
 8005bee:	eb63 0901 	sbc.w	r9, r3, r1
 8005bf2:	f04f 0200 	mov.w	r2, #0
 8005bf6:	f04f 0300 	mov.w	r3, #0
 8005bfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c06:	4690      	mov	r8, r2
 8005c08:	4699      	mov	r9, r3
 8005c0a:	4623      	mov	r3, r4
 8005c0c:	eb18 0303 	adds.w	r3, r8, r3
 8005c10:	60bb      	str	r3, [r7, #8]
 8005c12:	462b      	mov	r3, r5
 8005c14:	eb49 0303 	adc.w	r3, r9, r3
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	f04f 0200 	mov.w	r2, #0
 8005c1e:	f04f 0300 	mov.w	r3, #0
 8005c22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c26:	4629      	mov	r1, r5
 8005c28:	024b      	lsls	r3, r1, #9
 8005c2a:	4621      	mov	r1, r4
 8005c2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c30:	4621      	mov	r1, r4
 8005c32:	024a      	lsls	r2, r1, #9
 8005c34:	4610      	mov	r0, r2
 8005c36:	4619      	mov	r1, r3
 8005c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c44:	f7fa fb24 	bl	8000290 <__aeabi_uldivmod>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c50:	e058      	b.n	8005d04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c52:	4b38      	ldr	r3, [pc, #224]	@ (8005d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	099b      	lsrs	r3, r3, #6
 8005c58:	2200      	movs	r2, #0
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c62:	623b      	str	r3, [r7, #32]
 8005c64:	2300      	movs	r3, #0
 8005c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c6c:	4642      	mov	r2, r8
 8005c6e:	464b      	mov	r3, r9
 8005c70:	f04f 0000 	mov.w	r0, #0
 8005c74:	f04f 0100 	mov.w	r1, #0
 8005c78:	0159      	lsls	r1, r3, #5
 8005c7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c7e:	0150      	lsls	r0, r2, #5
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	4641      	mov	r1, r8
 8005c86:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c8a:	4649      	mov	r1, r9
 8005c8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	f04f 0300 	mov.w	r3, #0
 8005c98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ca0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ca4:	ebb2 040a 	subs.w	r4, r2, sl
 8005ca8:	eb63 050b 	sbc.w	r5, r3, fp
 8005cac:	f04f 0200 	mov.w	r2, #0
 8005cb0:	f04f 0300 	mov.w	r3, #0
 8005cb4:	00eb      	lsls	r3, r5, #3
 8005cb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cba:	00e2      	lsls	r2, r4, #3
 8005cbc:	4614      	mov	r4, r2
 8005cbe:	461d      	mov	r5, r3
 8005cc0:	4643      	mov	r3, r8
 8005cc2:	18e3      	adds	r3, r4, r3
 8005cc4:	603b      	str	r3, [r7, #0]
 8005cc6:	464b      	mov	r3, r9
 8005cc8:	eb45 0303 	adc.w	r3, r5, r3
 8005ccc:	607b      	str	r3, [r7, #4]
 8005cce:	f04f 0200 	mov.w	r2, #0
 8005cd2:	f04f 0300 	mov.w	r3, #0
 8005cd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cda:	4629      	mov	r1, r5
 8005cdc:	028b      	lsls	r3, r1, #10
 8005cde:	4621      	mov	r1, r4
 8005ce0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ce4:	4621      	mov	r1, r4
 8005ce6:	028a      	lsls	r2, r1, #10
 8005ce8:	4610      	mov	r0, r2
 8005cea:	4619      	mov	r1, r3
 8005cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cee:	2200      	movs	r2, #0
 8005cf0:	61bb      	str	r3, [r7, #24]
 8005cf2:	61fa      	str	r2, [r7, #28]
 8005cf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cf8:	f7fa faca 	bl	8000290 <__aeabi_uldivmod>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	460b      	mov	r3, r1
 8005d00:	4613      	mov	r3, r2
 8005d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005d04:	4b0b      	ldr	r3, [pc, #44]	@ (8005d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	0c1b      	lsrs	r3, r3, #16
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	3301      	adds	r3, #1
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005d14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d1e:	e002      	b.n	8005d26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d20:	4b05      	ldr	r3, [pc, #20]	@ (8005d38 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3750      	adds	r7, #80	@ 0x50
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d32:	bf00      	nop
 8005d34:	40023800 	.word	0x40023800
 8005d38:	00f42400 	.word	0x00f42400
 8005d3c:	007a1200 	.word	0x007a1200

08005d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d40:	b480      	push	{r7}
 8005d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d44:	4b03      	ldr	r3, [pc, #12]	@ (8005d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d46:	681b      	ldr	r3, [r3, #0]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	20000000 	.word	0x20000000

08005d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d5c:	f7ff fff0 	bl	8005d40 <HAL_RCC_GetHCLKFreq>
 8005d60:	4602      	mov	r2, r0
 8005d62:	4b05      	ldr	r3, [pc, #20]	@ (8005d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	0a9b      	lsrs	r3, r3, #10
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	4903      	ldr	r1, [pc, #12]	@ (8005d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d6e:	5ccb      	ldrb	r3, [r1, r3]
 8005d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	40023800 	.word	0x40023800
 8005d7c:	08008bd4 	.word	0x08008bd4

08005d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d84:	f7ff ffdc 	bl	8005d40 <HAL_RCC_GetHCLKFreq>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	4b05      	ldr	r3, [pc, #20]	@ (8005da0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	0b5b      	lsrs	r3, r3, #13
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	4903      	ldr	r1, [pc, #12]	@ (8005da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d96:	5ccb      	ldrb	r3, [r1, r3]
 8005d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	40023800 	.word	0x40023800
 8005da4:	08008bd4 	.word	0x08008bd4

08005da8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	220f      	movs	r2, #15
 8005db6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005db8:	4b12      	ldr	r3, [pc, #72]	@ (8005e04 <HAL_RCC_GetClockConfig+0x5c>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f003 0203 	and.w	r2, r3, #3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8005e04 <HAL_RCC_GetClockConfig+0x5c>)
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8005e04 <HAL_RCC_GetClockConfig+0x5c>)
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005ddc:	4b09      	ldr	r3, [pc, #36]	@ (8005e04 <HAL_RCC_GetClockConfig+0x5c>)
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	08db      	lsrs	r3, r3, #3
 8005de2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005dea:	4b07      	ldr	r3, [pc, #28]	@ (8005e08 <HAL_RCC_GetClockConfig+0x60>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 020f 	and.w	r2, r3, #15
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	601a      	str	r2, [r3, #0]
}
 8005df6:	bf00      	nop
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	40023800 	.word	0x40023800
 8005e08:	40023c00 	.word	0x40023c00

08005e0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e14:	2300      	movs	r3, #0
 8005e16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10b      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d105      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d075      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e40:	4b91      	ldr	r3, [pc, #580]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e46:	f7fc fac7 	bl	80023d8 <HAL_GetTick>
 8005e4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e4c:	e008      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e4e:	f7fc fac3 	bl	80023d8 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d901      	bls.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e189      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e60:	4b8a      	ldr	r3, [pc, #552]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1f0      	bne.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d009      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	019a      	lsls	r2, r3, #6
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	071b      	lsls	r3, r3, #28
 8005e84:	4981      	ldr	r1, [pc, #516]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01f      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e98:	4b7c      	ldr	r3, [pc, #496]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e9e:	0f1b      	lsrs	r3, r3, #28
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	019a      	lsls	r2, r3, #6
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	061b      	lsls	r3, r3, #24
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	071b      	lsls	r3, r3, #28
 8005eb8:	4974      	ldr	r1, [pc, #464]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005ec0:	4b72      	ldr	r3, [pc, #456]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ec6:	f023 021f 	bic.w	r2, r3, #31
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	496e      	ldr	r1, [pc, #440]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00d      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	019a      	lsls	r2, r3, #6
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	061b      	lsls	r3, r3, #24
 8005ef0:	431a      	orrs	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	071b      	lsls	r3, r3, #28
 8005ef8:	4964      	ldr	r1, [pc, #400]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005f00:	4b61      	ldr	r3, [pc, #388]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f06:	f7fc fa67 	bl	80023d8 <HAL_GetTick>
 8005f0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f0e:	f7fc fa63 	bl	80023d8 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e129      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f20:	4b5a      	ldr	r3, [pc, #360]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0f0      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d105      	bne.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d079      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005f44:	4b52      	ldr	r3, [pc, #328]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f4a:	f7fc fa45 	bl	80023d8 <HAL_GetTick>
 8005f4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f50:	e008      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f52:	f7fc fa41 	bl	80023d8 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d901      	bls.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e107      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f64:	4b49      	ldr	r3, [pc, #292]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f70:	d0ef      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0304 	and.w	r3, r3, #4
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d020      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f7e:	4b43      	ldr	r3, [pc, #268]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f84:	0f1b      	lsrs	r3, r3, #28
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	019a      	lsls	r2, r3, #6
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	061b      	lsls	r3, r3, #24
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	071b      	lsls	r3, r3, #28
 8005f9e:	493b      	ldr	r1, [pc, #236]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005fa6:	4b39      	ldr	r3, [pc, #228]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fac:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	021b      	lsls	r3, r3, #8
 8005fb8:	4934      	ldr	r1, [pc, #208]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0308 	and.w	r3, r3, #8
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01e      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005fcc:	4b2f      	ldr	r3, [pc, #188]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd2:	0e1b      	lsrs	r3, r3, #24
 8005fd4:	f003 030f 	and.w	r3, r3, #15
 8005fd8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	019a      	lsls	r2, r3, #6
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	061b      	lsls	r3, r3, #24
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	071b      	lsls	r3, r3, #28
 8005fec:	4927      	ldr	r1, [pc, #156]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ff4:	4b25      	ldr	r3, [pc, #148]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ffa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006002:	4922      	ldr	r1, [pc, #136]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006004:	4313      	orrs	r3, r2
 8006006:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800600a:	4b21      	ldr	r3, [pc, #132]	@ (8006090 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800600c:	2201      	movs	r2, #1
 800600e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006010:	f7fc f9e2 	bl	80023d8 <HAL_GetTick>
 8006014:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006016:	e008      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006018:	f7fc f9de 	bl	80023d8 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b02      	cmp	r3, #2
 8006024:	d901      	bls.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e0a4      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800602a:	4b18      	ldr	r3, [pc, #96]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006032:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006036:	d1ef      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0320 	and.w	r3, r3, #32
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 808b 	beq.w	800615c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006046:	2300      	movs	r3, #0
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	4b10      	ldr	r3, [pc, #64]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800604c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604e:	4a0f      	ldr	r2, [pc, #60]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006054:	6413      	str	r3, [r2, #64]	@ 0x40
 8006056:	4b0d      	ldr	r3, [pc, #52]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006062:	4b0c      	ldr	r3, [pc, #48]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a0b      	ldr	r2, [pc, #44]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800606c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800606e:	f7fc f9b3 	bl	80023d8 <HAL_GetTick>
 8006072:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006074:	e010      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006076:	f7fc f9af 	bl	80023d8 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d909      	bls.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e075      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006088:	42470068 	.word	0x42470068
 800608c:	40023800 	.word	0x40023800
 8006090:	42470070 	.word	0x42470070
 8006094:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006098:	4b38      	ldr	r3, [pc, #224]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0e8      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060a4:	4b36      	ldr	r3, [pc, #216]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ac:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d02f      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d028      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060c2:	4b2f      	ldr	r3, [pc, #188]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060ca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060cc:	4b2d      	ldr	r3, [pc, #180]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80060ce:	2201      	movs	r2, #1
 80060d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060d2:	4b2c      	ldr	r3, [pc, #176]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80060d8:	4a29      	ldr	r2, [pc, #164]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80060de:	4b28      	ldr	r3, [pc, #160]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80060e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d114      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80060ea:	f7fc f975 	bl	80023d8 <HAL_GetTick>
 80060ee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060f0:	e00a      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060f2:	f7fc f971 	bl	80023d8 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006100:	4293      	cmp	r3, r2
 8006102:	d901      	bls.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e035      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006108:	4b1d      	ldr	r3, [pc, #116]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800610a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d0ee      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006118:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800611c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006120:	d10d      	bne.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006122:	4b17      	ldr	r3, [pc, #92]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006132:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006136:	4912      	ldr	r1, [pc, #72]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006138:	4313      	orrs	r3, r2
 800613a:	608b      	str	r3, [r1, #8]
 800613c:	e005      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800613e:	4b10      	ldr	r3, [pc, #64]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	4a0f      	ldr	r2, [pc, #60]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006144:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006148:	6093      	str	r3, [r2, #8]
 800614a:	4b0d      	ldr	r3, [pc, #52]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800614c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006156:	490a      	ldr	r1, [pc, #40]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006158:	4313      	orrs	r3, r2
 800615a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0310 	and.w	r3, r3, #16
 8006164:	2b00      	cmp	r3, #0
 8006166:	d004      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800616e:	4b06      	ldr	r3, [pc, #24]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006170:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	40007000 	.word	0x40007000
 8006180:	40023800 	.word	0x40023800
 8006184:	42470e40 	.word	0x42470e40
 8006188:	424711e0 	.word	0x424711e0

0800618c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e025      	b.n	80061ec <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d106      	bne.n	80061ba <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7fb f9bf 	bl	8001538 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2202      	movs	r2, #2
 80061be:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	3304      	adds	r3, #4
 80061ca:	4619      	mov	r1, r3
 80061cc:	4610      	mov	r0, r2
 80061ce:	f000 ffd3 	bl	8007178 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6818      	ldr	r0, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	461a      	mov	r2, r3
 80061dc:	6839      	ldr	r1, [r7, #0]
 80061de:	f001 f828 	bl	8007232 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e07b      	b.n	80062fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620a:	2b00      	cmp	r3, #0
 800620c:	d108      	bne.n	8006220 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006216:	d009      	beq.n	800622c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	61da      	str	r2, [r3, #28]
 800621e:	e005      	b.n	800622c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d106      	bne.n	800624c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7fa ffd4 	bl	80011f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006262:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006274:	431a      	orrs	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800627e:	431a      	orrs	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	431a      	orrs	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	431a      	orrs	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800629c:	431a      	orrs	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062a6:	431a      	orrs	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062b0:	ea42 0103 	orr.w	r1, r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	0c1b      	lsrs	r3, r3, #16
 80062ca:	f003 0104 	and.w	r1, r3, #4
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d2:	f003 0210 	and.w	r2, r3, #16
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	69da      	ldr	r2, [r3, #28]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b082      	sub	sp, #8
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e041      	b.n	800639c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b00      	cmp	r3, #0
 8006322:	d106      	bne.n	8006332 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7fa ffa9 	bl	8001284 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2202      	movs	r2, #2
 8006336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	3304      	adds	r3, #4
 8006342:	4619      	mov	r1, r3
 8006344:	4610      	mov	r0, r2
 8006346:	f000 fa7d 	bl	8006844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d001      	beq.n	80063bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e04e      	b.n	800645a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2202      	movs	r2, #2
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68da      	ldr	r2, [r3, #12]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a23      	ldr	r2, [pc, #140]	@ (8006468 <HAL_TIM_Base_Start_IT+0xc4>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d022      	beq.n	8006424 <HAL_TIM_Base_Start_IT+0x80>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063e6:	d01d      	beq.n	8006424 <HAL_TIM_Base_Start_IT+0x80>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a1f      	ldr	r2, [pc, #124]	@ (800646c <HAL_TIM_Base_Start_IT+0xc8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d018      	beq.n	8006424 <HAL_TIM_Base_Start_IT+0x80>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a1e      	ldr	r2, [pc, #120]	@ (8006470 <HAL_TIM_Base_Start_IT+0xcc>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d013      	beq.n	8006424 <HAL_TIM_Base_Start_IT+0x80>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a1c      	ldr	r2, [pc, #112]	@ (8006474 <HAL_TIM_Base_Start_IT+0xd0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00e      	beq.n	8006424 <HAL_TIM_Base_Start_IT+0x80>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a1b      	ldr	r2, [pc, #108]	@ (8006478 <HAL_TIM_Base_Start_IT+0xd4>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d009      	beq.n	8006424 <HAL_TIM_Base_Start_IT+0x80>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a19      	ldr	r2, [pc, #100]	@ (800647c <HAL_TIM_Base_Start_IT+0xd8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d004      	beq.n	8006424 <HAL_TIM_Base_Start_IT+0x80>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a18      	ldr	r2, [pc, #96]	@ (8006480 <HAL_TIM_Base_Start_IT+0xdc>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d111      	bne.n	8006448 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 0307 	and.w	r3, r3, #7
 800642e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2b06      	cmp	r3, #6
 8006434:	d010      	beq.n	8006458 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f042 0201 	orr.w	r2, r2, #1
 8006444:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006446:	e007      	b.n	8006458 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0201 	orr.w	r2, r2, #1
 8006456:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	40010000 	.word	0x40010000
 800646c:	40000400 	.word	0x40000400
 8006470:	40000800 	.word	0x40000800
 8006474:	40000c00 	.word	0x40000c00
 8006478:	40010400 	.word	0x40010400
 800647c:	40014000 	.word	0x40014000
 8006480:	40001800 	.word	0x40001800

08006484 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d020      	beq.n	80064e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d01b      	beq.n	80064e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f06f 0202 	mvn.w	r2, #2
 80064b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	f003 0303 	and.w	r3, r3, #3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f999 	bl	8006806 <HAL_TIM_IC_CaptureCallback>
 80064d4:	e005      	b.n	80064e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f98b 	bl	80067f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f99c 	bl	800681a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f003 0304 	and.w	r3, r3, #4
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d020      	beq.n	8006534 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d01b      	beq.n	8006534 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0204 	mvn.w	r2, #4
 8006504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2202      	movs	r2, #2
 800650a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f973 	bl	8006806 <HAL_TIM_IC_CaptureCallback>
 8006520:	e005      	b.n	800652e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f965 	bl	80067f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f976 	bl	800681a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	2b00      	cmp	r3, #0
 800653c:	d020      	beq.n	8006580 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f003 0308 	and.w	r3, r3, #8
 8006544:	2b00      	cmp	r3, #0
 8006546:	d01b      	beq.n	8006580 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f06f 0208 	mvn.w	r2, #8
 8006550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2204      	movs	r2, #4
 8006556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	f003 0303 	and.w	r3, r3, #3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f94d 	bl	8006806 <HAL_TIM_IC_CaptureCallback>
 800656c:	e005      	b.n	800657a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f93f 	bl	80067f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f950 	bl	800681a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f003 0310 	and.w	r3, r3, #16
 8006586:	2b00      	cmp	r3, #0
 8006588:	d020      	beq.n	80065cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f003 0310 	and.w	r3, r3, #16
 8006590:	2b00      	cmp	r3, #0
 8006592:	d01b      	beq.n	80065cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f06f 0210 	mvn.w	r2, #16
 800659c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2208      	movs	r2, #8
 80065a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f927 	bl	8006806 <HAL_TIM_IC_CaptureCallback>
 80065b8:	e005      	b.n	80065c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f919 	bl	80067f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f92a 	bl	800681a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00c      	beq.n	80065f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d007      	beq.n	80065f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f06f 0201 	mvn.w	r2, #1
 80065e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7fa fbde 	bl	8000dac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00c      	beq.n	8006614 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006600:	2b00      	cmp	r3, #0
 8006602:	d007      	beq.n	8006614 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800660c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fae4 	bl	8006bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00c      	beq.n	8006638 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006624:	2b00      	cmp	r3, #0
 8006626:	d007      	beq.n	8006638 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f8fb 	bl	800682e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f003 0320 	and.w	r3, r3, #32
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00c      	beq.n	800665c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f003 0320 	and.w	r3, r3, #32
 8006648:	2b00      	cmp	r3, #0
 800664a:	d007      	beq.n	800665c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f06f 0220 	mvn.w	r2, #32
 8006654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fab6 	bl	8006bc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800665c:	bf00      	nop
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006678:	2b01      	cmp	r3, #1
 800667a:	d101      	bne.n	8006680 <HAL_TIM_ConfigClockSource+0x1c>
 800667c:	2302      	movs	r3, #2
 800667e:	e0b4      	b.n	80067ea <HAL_TIM_ConfigClockSource+0x186>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800669e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066b8:	d03e      	beq.n	8006738 <HAL_TIM_ConfigClockSource+0xd4>
 80066ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066be:	f200 8087 	bhi.w	80067d0 <HAL_TIM_ConfigClockSource+0x16c>
 80066c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066c6:	f000 8086 	beq.w	80067d6 <HAL_TIM_ConfigClockSource+0x172>
 80066ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ce:	d87f      	bhi.n	80067d0 <HAL_TIM_ConfigClockSource+0x16c>
 80066d0:	2b70      	cmp	r3, #112	@ 0x70
 80066d2:	d01a      	beq.n	800670a <HAL_TIM_ConfigClockSource+0xa6>
 80066d4:	2b70      	cmp	r3, #112	@ 0x70
 80066d6:	d87b      	bhi.n	80067d0 <HAL_TIM_ConfigClockSource+0x16c>
 80066d8:	2b60      	cmp	r3, #96	@ 0x60
 80066da:	d050      	beq.n	800677e <HAL_TIM_ConfigClockSource+0x11a>
 80066dc:	2b60      	cmp	r3, #96	@ 0x60
 80066de:	d877      	bhi.n	80067d0 <HAL_TIM_ConfigClockSource+0x16c>
 80066e0:	2b50      	cmp	r3, #80	@ 0x50
 80066e2:	d03c      	beq.n	800675e <HAL_TIM_ConfigClockSource+0xfa>
 80066e4:	2b50      	cmp	r3, #80	@ 0x50
 80066e6:	d873      	bhi.n	80067d0 <HAL_TIM_ConfigClockSource+0x16c>
 80066e8:	2b40      	cmp	r3, #64	@ 0x40
 80066ea:	d058      	beq.n	800679e <HAL_TIM_ConfigClockSource+0x13a>
 80066ec:	2b40      	cmp	r3, #64	@ 0x40
 80066ee:	d86f      	bhi.n	80067d0 <HAL_TIM_ConfigClockSource+0x16c>
 80066f0:	2b30      	cmp	r3, #48	@ 0x30
 80066f2:	d064      	beq.n	80067be <HAL_TIM_ConfigClockSource+0x15a>
 80066f4:	2b30      	cmp	r3, #48	@ 0x30
 80066f6:	d86b      	bhi.n	80067d0 <HAL_TIM_ConfigClockSource+0x16c>
 80066f8:	2b20      	cmp	r3, #32
 80066fa:	d060      	beq.n	80067be <HAL_TIM_ConfigClockSource+0x15a>
 80066fc:	2b20      	cmp	r3, #32
 80066fe:	d867      	bhi.n	80067d0 <HAL_TIM_ConfigClockSource+0x16c>
 8006700:	2b00      	cmp	r3, #0
 8006702:	d05c      	beq.n	80067be <HAL_TIM_ConfigClockSource+0x15a>
 8006704:	2b10      	cmp	r3, #16
 8006706:	d05a      	beq.n	80067be <HAL_TIM_ConfigClockSource+0x15a>
 8006708:	e062      	b.n	80067d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800671a:	f000 f9b9 	bl	8006a90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800672c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	609a      	str	r2, [r3, #8]
      break;
 8006736:	e04f      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006748:	f000 f9a2 	bl	8006a90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689a      	ldr	r2, [r3, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800675a:	609a      	str	r2, [r3, #8]
      break;
 800675c:	e03c      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800676a:	461a      	mov	r2, r3
 800676c:	f000 f916 	bl	800699c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2150      	movs	r1, #80	@ 0x50
 8006776:	4618      	mov	r0, r3
 8006778:	f000 f96f 	bl	8006a5a <TIM_ITRx_SetConfig>
      break;
 800677c:	e02c      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800678a:	461a      	mov	r2, r3
 800678c:	f000 f935 	bl	80069fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2160      	movs	r1, #96	@ 0x60
 8006796:	4618      	mov	r0, r3
 8006798:	f000 f95f 	bl	8006a5a <TIM_ITRx_SetConfig>
      break;
 800679c:	e01c      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067aa:	461a      	mov	r2, r3
 80067ac:	f000 f8f6 	bl	800699c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2140      	movs	r1, #64	@ 0x40
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 f94f 	bl	8006a5a <TIM_ITRx_SetConfig>
      break;
 80067bc:	e00c      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4619      	mov	r1, r3
 80067c8:	4610      	mov	r0, r2
 80067ca:	f000 f946 	bl	8006a5a <TIM_ITRx_SetConfig>
      break;
 80067ce:	e003      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	73fb      	strb	r3, [r7, #15]
      break;
 80067d4:	e000      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067fa:	bf00      	nop
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800680e:	bf00      	nop
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
	...

08006844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a46      	ldr	r2, [pc, #280]	@ (8006970 <TIM_Base_SetConfig+0x12c>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d013      	beq.n	8006884 <TIM_Base_SetConfig+0x40>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006862:	d00f      	beq.n	8006884 <TIM_Base_SetConfig+0x40>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a43      	ldr	r2, [pc, #268]	@ (8006974 <TIM_Base_SetConfig+0x130>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d00b      	beq.n	8006884 <TIM_Base_SetConfig+0x40>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a42      	ldr	r2, [pc, #264]	@ (8006978 <TIM_Base_SetConfig+0x134>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d007      	beq.n	8006884 <TIM_Base_SetConfig+0x40>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a41      	ldr	r2, [pc, #260]	@ (800697c <TIM_Base_SetConfig+0x138>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d003      	beq.n	8006884 <TIM_Base_SetConfig+0x40>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a40      	ldr	r2, [pc, #256]	@ (8006980 <TIM_Base_SetConfig+0x13c>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d108      	bne.n	8006896 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800688a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a35      	ldr	r2, [pc, #212]	@ (8006970 <TIM_Base_SetConfig+0x12c>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d02b      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068a4:	d027      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a32      	ldr	r2, [pc, #200]	@ (8006974 <TIM_Base_SetConfig+0x130>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d023      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a31      	ldr	r2, [pc, #196]	@ (8006978 <TIM_Base_SetConfig+0x134>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d01f      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a30      	ldr	r2, [pc, #192]	@ (800697c <TIM_Base_SetConfig+0x138>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d01b      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a2f      	ldr	r2, [pc, #188]	@ (8006980 <TIM_Base_SetConfig+0x13c>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d017      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a2e      	ldr	r2, [pc, #184]	@ (8006984 <TIM_Base_SetConfig+0x140>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d013      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006988 <TIM_Base_SetConfig+0x144>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d00f      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a2c      	ldr	r2, [pc, #176]	@ (800698c <TIM_Base_SetConfig+0x148>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d00b      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a2b      	ldr	r2, [pc, #172]	@ (8006990 <TIM_Base_SetConfig+0x14c>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d007      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a2a      	ldr	r2, [pc, #168]	@ (8006994 <TIM_Base_SetConfig+0x150>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d003      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a29      	ldr	r2, [pc, #164]	@ (8006998 <TIM_Base_SetConfig+0x154>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d108      	bne.n	8006908 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	4313      	orrs	r3, r2
 8006906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	4313      	orrs	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	689a      	ldr	r2, [r3, #8]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a10      	ldr	r2, [pc, #64]	@ (8006970 <TIM_Base_SetConfig+0x12c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d003      	beq.n	800693c <TIM_Base_SetConfig+0xf8>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a12      	ldr	r2, [pc, #72]	@ (8006980 <TIM_Base_SetConfig+0x13c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d103      	bne.n	8006944 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	691a      	ldr	r2, [r3, #16]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b01      	cmp	r3, #1
 8006954:	d105      	bne.n	8006962 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	f023 0201 	bic.w	r2, r3, #1
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	611a      	str	r2, [r3, #16]
  }
}
 8006962:	bf00      	nop
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	40010000 	.word	0x40010000
 8006974:	40000400 	.word	0x40000400
 8006978:	40000800 	.word	0x40000800
 800697c:	40000c00 	.word	0x40000c00
 8006980:	40010400 	.word	0x40010400
 8006984:	40014000 	.word	0x40014000
 8006988:	40014400 	.word	0x40014400
 800698c:	40014800 	.word	0x40014800
 8006990:	40001800 	.word	0x40001800
 8006994:	40001c00 	.word	0x40001c00
 8006998:	40002000 	.word	0x40002000

0800699c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	f023 0201 	bic.w	r2, r3, #1
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	011b      	lsls	r3, r3, #4
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f023 030a 	bic.w	r3, r3, #10
 80069d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4313      	orrs	r3, r2
 80069e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	621a      	str	r2, [r3, #32]
}
 80069ee:	bf00      	nop
 80069f0:	371c      	adds	r7, #28
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b087      	sub	sp, #28
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	60f8      	str	r0, [r7, #12]
 8006a02:	60b9      	str	r1, [r7, #8]
 8006a04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	f023 0210 	bic.w	r2, r3, #16
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	031b      	lsls	r3, r3, #12
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	621a      	str	r2, [r3, #32]
}
 8006a4e:	bf00      	nop
 8006a50:	371c      	adds	r7, #28
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b085      	sub	sp, #20
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	f043 0307 	orr.w	r3, r3, #7
 8006a7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	609a      	str	r2, [r3, #8]
}
 8006a84:	bf00      	nop
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
 8006a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006aaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	021a      	lsls	r2, r3, #8
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	609a      	str	r2, [r3, #8]
}
 8006ac4:	bf00      	nop
 8006ac6:	371c      	adds	r7, #28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d101      	bne.n	8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	e05a      	b.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2202      	movs	r2, #2
 8006af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a21      	ldr	r2, [pc, #132]	@ (8006bac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d022      	beq.n	8006b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b34:	d01d      	beq.n	8006b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d018      	beq.n	8006b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a1b      	ldr	r2, [pc, #108]	@ (8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d013      	beq.n	8006b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d00e      	beq.n	8006b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a18      	ldr	r2, [pc, #96]	@ (8006bbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d009      	beq.n	8006b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a17      	ldr	r2, [pc, #92]	@ (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d004      	beq.n	8006b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a15      	ldr	r2, [pc, #84]	@ (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d10c      	bne.n	8006b8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	40010000 	.word	0x40010000
 8006bb0:	40000400 	.word	0x40000400
 8006bb4:	40000800 	.word	0x40000800
 8006bb8:	40000c00 	.word	0x40000c00
 8006bbc:	40010400 	.word	0x40010400
 8006bc0:	40014000 	.word	0x40014000
 8006bc4:	40001800 	.word	0x40001800

08006bc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e042      	b.n	8006c88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d106      	bne.n	8006c1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7fa fb56 	bl	80012c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2224      	movs	r2, #36	@ 0x24
 8006c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68da      	ldr	r2, [r3, #12]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f82b 	bl	8006c90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	691a      	ldr	r2, [r3, #16]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	695a      	ldr	r2, [r3, #20]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68da      	ldr	r2, [r3, #12]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2220      	movs	r2, #32
 8006c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c94:	b0c0      	sub	sp, #256	@ 0x100
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cac:	68d9      	ldr	r1, [r3, #12]
 8006cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	ea40 0301 	orr.w	r3, r0, r1
 8006cb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cbe:	689a      	ldr	r2, [r3, #8]
 8006cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006ce8:	f021 010c 	bic.w	r1, r1, #12
 8006cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006cf6:	430b      	orrs	r3, r1
 8006cf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d0a:	6999      	ldr	r1, [r3, #24]
 8006d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	ea40 0301 	orr.w	r3, r0, r1
 8006d16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	4b8f      	ldr	r3, [pc, #572]	@ (8006f5c <UART_SetConfig+0x2cc>)
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d005      	beq.n	8006d30 <UART_SetConfig+0xa0>
 8006d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	4b8d      	ldr	r3, [pc, #564]	@ (8006f60 <UART_SetConfig+0x2d0>)
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d104      	bne.n	8006d3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d30:	f7ff f826 	bl	8005d80 <HAL_RCC_GetPCLK2Freq>
 8006d34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006d38:	e003      	b.n	8006d42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d3a:	f7ff f80d 	bl	8005d58 <HAL_RCC_GetPCLK1Freq>
 8006d3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d4c:	f040 810c 	bne.w	8006f68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d54:	2200      	movs	r2, #0
 8006d56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006d5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006d62:	4622      	mov	r2, r4
 8006d64:	462b      	mov	r3, r5
 8006d66:	1891      	adds	r1, r2, r2
 8006d68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006d6a:	415b      	adcs	r3, r3
 8006d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006d72:	4621      	mov	r1, r4
 8006d74:	eb12 0801 	adds.w	r8, r2, r1
 8006d78:	4629      	mov	r1, r5
 8006d7a:	eb43 0901 	adc.w	r9, r3, r1
 8006d7e:	f04f 0200 	mov.w	r2, #0
 8006d82:	f04f 0300 	mov.w	r3, #0
 8006d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d92:	4690      	mov	r8, r2
 8006d94:	4699      	mov	r9, r3
 8006d96:	4623      	mov	r3, r4
 8006d98:	eb18 0303 	adds.w	r3, r8, r3
 8006d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006da0:	462b      	mov	r3, r5
 8006da2:	eb49 0303 	adc.w	r3, r9, r3
 8006da6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006db6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006dba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	18db      	adds	r3, r3, r3
 8006dc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	eb42 0303 	adc.w	r3, r2, r3
 8006dca:	657b      	str	r3, [r7, #84]	@ 0x54
 8006dcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006dd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006dd4:	f7f9 fa5c 	bl	8000290 <__aeabi_uldivmod>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	460b      	mov	r3, r1
 8006ddc:	4b61      	ldr	r3, [pc, #388]	@ (8006f64 <UART_SetConfig+0x2d4>)
 8006dde:	fba3 2302 	umull	r2, r3, r3, r2
 8006de2:	095b      	lsrs	r3, r3, #5
 8006de4:	011c      	lsls	r4, r3, #4
 8006de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006df0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006df4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006df8:	4642      	mov	r2, r8
 8006dfa:	464b      	mov	r3, r9
 8006dfc:	1891      	adds	r1, r2, r2
 8006dfe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006e00:	415b      	adcs	r3, r3
 8006e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006e08:	4641      	mov	r1, r8
 8006e0a:	eb12 0a01 	adds.w	sl, r2, r1
 8006e0e:	4649      	mov	r1, r9
 8006e10:	eb43 0b01 	adc.w	fp, r3, r1
 8006e14:	f04f 0200 	mov.w	r2, #0
 8006e18:	f04f 0300 	mov.w	r3, #0
 8006e1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e28:	4692      	mov	sl, r2
 8006e2a:	469b      	mov	fp, r3
 8006e2c:	4643      	mov	r3, r8
 8006e2e:	eb1a 0303 	adds.w	r3, sl, r3
 8006e32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e36:	464b      	mov	r3, r9
 8006e38:	eb4b 0303 	adc.w	r3, fp, r3
 8006e3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006e50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e54:	460b      	mov	r3, r1
 8006e56:	18db      	adds	r3, r3, r3
 8006e58:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	eb42 0303 	adc.w	r3, r2, r3
 8006e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006e66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006e6a:	f7f9 fa11 	bl	8000290 <__aeabi_uldivmod>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	4611      	mov	r1, r2
 8006e74:	4b3b      	ldr	r3, [pc, #236]	@ (8006f64 <UART_SetConfig+0x2d4>)
 8006e76:	fba3 2301 	umull	r2, r3, r3, r1
 8006e7a:	095b      	lsrs	r3, r3, #5
 8006e7c:	2264      	movs	r2, #100	@ 0x64
 8006e7e:	fb02 f303 	mul.w	r3, r2, r3
 8006e82:	1acb      	subs	r3, r1, r3
 8006e84:	00db      	lsls	r3, r3, #3
 8006e86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006e8a:	4b36      	ldr	r3, [pc, #216]	@ (8006f64 <UART_SetConfig+0x2d4>)
 8006e8c:	fba3 2302 	umull	r2, r3, r3, r2
 8006e90:	095b      	lsrs	r3, r3, #5
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006e98:	441c      	add	r4, r3
 8006e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ea4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006ea8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006eac:	4642      	mov	r2, r8
 8006eae:	464b      	mov	r3, r9
 8006eb0:	1891      	adds	r1, r2, r2
 8006eb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006eb4:	415b      	adcs	r3, r3
 8006eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006ebc:	4641      	mov	r1, r8
 8006ebe:	1851      	adds	r1, r2, r1
 8006ec0:	6339      	str	r1, [r7, #48]	@ 0x30
 8006ec2:	4649      	mov	r1, r9
 8006ec4:	414b      	adcs	r3, r1
 8006ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ec8:	f04f 0200 	mov.w	r2, #0
 8006ecc:	f04f 0300 	mov.w	r3, #0
 8006ed0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006ed4:	4659      	mov	r1, fp
 8006ed6:	00cb      	lsls	r3, r1, #3
 8006ed8:	4651      	mov	r1, sl
 8006eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ede:	4651      	mov	r1, sl
 8006ee0:	00ca      	lsls	r2, r1, #3
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	4642      	mov	r2, r8
 8006eea:	189b      	adds	r3, r3, r2
 8006eec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ef0:	464b      	mov	r3, r9
 8006ef2:	460a      	mov	r2, r1
 8006ef4:	eb42 0303 	adc.w	r3, r2, r3
 8006ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006f0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006f10:	460b      	mov	r3, r1
 8006f12:	18db      	adds	r3, r3, r3
 8006f14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f16:	4613      	mov	r3, r2
 8006f18:	eb42 0303 	adc.w	r3, r2, r3
 8006f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006f26:	f7f9 f9b3 	bl	8000290 <__aeabi_uldivmod>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f64 <UART_SetConfig+0x2d4>)
 8006f30:	fba3 1302 	umull	r1, r3, r3, r2
 8006f34:	095b      	lsrs	r3, r3, #5
 8006f36:	2164      	movs	r1, #100	@ 0x64
 8006f38:	fb01 f303 	mul.w	r3, r1, r3
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	00db      	lsls	r3, r3, #3
 8006f40:	3332      	adds	r3, #50	@ 0x32
 8006f42:	4a08      	ldr	r2, [pc, #32]	@ (8006f64 <UART_SetConfig+0x2d4>)
 8006f44:	fba2 2303 	umull	r2, r3, r2, r3
 8006f48:	095b      	lsrs	r3, r3, #5
 8006f4a:	f003 0207 	and.w	r2, r3, #7
 8006f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4422      	add	r2, r4
 8006f56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f58:	e106      	b.n	8007168 <UART_SetConfig+0x4d8>
 8006f5a:	bf00      	nop
 8006f5c:	40011000 	.word	0x40011000
 8006f60:	40011400 	.word	0x40011400
 8006f64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006f72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006f76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006f7a:	4642      	mov	r2, r8
 8006f7c:	464b      	mov	r3, r9
 8006f7e:	1891      	adds	r1, r2, r2
 8006f80:	6239      	str	r1, [r7, #32]
 8006f82:	415b      	adcs	r3, r3
 8006f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f8a:	4641      	mov	r1, r8
 8006f8c:	1854      	adds	r4, r2, r1
 8006f8e:	4649      	mov	r1, r9
 8006f90:	eb43 0501 	adc.w	r5, r3, r1
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	f04f 0300 	mov.w	r3, #0
 8006f9c:	00eb      	lsls	r3, r5, #3
 8006f9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fa2:	00e2      	lsls	r2, r4, #3
 8006fa4:	4614      	mov	r4, r2
 8006fa6:	461d      	mov	r5, r3
 8006fa8:	4643      	mov	r3, r8
 8006faa:	18e3      	adds	r3, r4, r3
 8006fac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006fb0:	464b      	mov	r3, r9
 8006fb2:	eb45 0303 	adc.w	r3, r5, r3
 8006fb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006fc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006fca:	f04f 0200 	mov.w	r2, #0
 8006fce:	f04f 0300 	mov.w	r3, #0
 8006fd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	008b      	lsls	r3, r1, #2
 8006fda:	4621      	mov	r1, r4
 8006fdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fe0:	4621      	mov	r1, r4
 8006fe2:	008a      	lsls	r2, r1, #2
 8006fe4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006fe8:	f7f9 f952 	bl	8000290 <__aeabi_uldivmod>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4b60      	ldr	r3, [pc, #384]	@ (8007174 <UART_SetConfig+0x4e4>)
 8006ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ff6:	095b      	lsrs	r3, r3, #5
 8006ff8:	011c      	lsls	r4, r3, #4
 8006ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ffe:	2200      	movs	r2, #0
 8007000:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007004:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007008:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800700c:	4642      	mov	r2, r8
 800700e:	464b      	mov	r3, r9
 8007010:	1891      	adds	r1, r2, r2
 8007012:	61b9      	str	r1, [r7, #24]
 8007014:	415b      	adcs	r3, r3
 8007016:	61fb      	str	r3, [r7, #28]
 8007018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800701c:	4641      	mov	r1, r8
 800701e:	1851      	adds	r1, r2, r1
 8007020:	6139      	str	r1, [r7, #16]
 8007022:	4649      	mov	r1, r9
 8007024:	414b      	adcs	r3, r1
 8007026:	617b      	str	r3, [r7, #20]
 8007028:	f04f 0200 	mov.w	r2, #0
 800702c:	f04f 0300 	mov.w	r3, #0
 8007030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007034:	4659      	mov	r1, fp
 8007036:	00cb      	lsls	r3, r1, #3
 8007038:	4651      	mov	r1, sl
 800703a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800703e:	4651      	mov	r1, sl
 8007040:	00ca      	lsls	r2, r1, #3
 8007042:	4610      	mov	r0, r2
 8007044:	4619      	mov	r1, r3
 8007046:	4603      	mov	r3, r0
 8007048:	4642      	mov	r2, r8
 800704a:	189b      	adds	r3, r3, r2
 800704c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007050:	464b      	mov	r3, r9
 8007052:	460a      	mov	r2, r1
 8007054:	eb42 0303 	adc.w	r3, r2, r3
 8007058:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800705c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007066:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007068:	f04f 0200 	mov.w	r2, #0
 800706c:	f04f 0300 	mov.w	r3, #0
 8007070:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007074:	4649      	mov	r1, r9
 8007076:	008b      	lsls	r3, r1, #2
 8007078:	4641      	mov	r1, r8
 800707a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800707e:	4641      	mov	r1, r8
 8007080:	008a      	lsls	r2, r1, #2
 8007082:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007086:	f7f9 f903 	bl	8000290 <__aeabi_uldivmod>
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	4611      	mov	r1, r2
 8007090:	4b38      	ldr	r3, [pc, #224]	@ (8007174 <UART_SetConfig+0x4e4>)
 8007092:	fba3 2301 	umull	r2, r3, r3, r1
 8007096:	095b      	lsrs	r3, r3, #5
 8007098:	2264      	movs	r2, #100	@ 0x64
 800709a:	fb02 f303 	mul.w	r3, r2, r3
 800709e:	1acb      	subs	r3, r1, r3
 80070a0:	011b      	lsls	r3, r3, #4
 80070a2:	3332      	adds	r3, #50	@ 0x32
 80070a4:	4a33      	ldr	r2, [pc, #204]	@ (8007174 <UART_SetConfig+0x4e4>)
 80070a6:	fba2 2303 	umull	r2, r3, r2, r3
 80070aa:	095b      	lsrs	r3, r3, #5
 80070ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80070b0:	441c      	add	r4, r3
 80070b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070b6:	2200      	movs	r2, #0
 80070b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80070ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80070bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80070c0:	4642      	mov	r2, r8
 80070c2:	464b      	mov	r3, r9
 80070c4:	1891      	adds	r1, r2, r2
 80070c6:	60b9      	str	r1, [r7, #8]
 80070c8:	415b      	adcs	r3, r3
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070d0:	4641      	mov	r1, r8
 80070d2:	1851      	adds	r1, r2, r1
 80070d4:	6039      	str	r1, [r7, #0]
 80070d6:	4649      	mov	r1, r9
 80070d8:	414b      	adcs	r3, r1
 80070da:	607b      	str	r3, [r7, #4]
 80070dc:	f04f 0200 	mov.w	r2, #0
 80070e0:	f04f 0300 	mov.w	r3, #0
 80070e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070e8:	4659      	mov	r1, fp
 80070ea:	00cb      	lsls	r3, r1, #3
 80070ec:	4651      	mov	r1, sl
 80070ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070f2:	4651      	mov	r1, sl
 80070f4:	00ca      	lsls	r2, r1, #3
 80070f6:	4610      	mov	r0, r2
 80070f8:	4619      	mov	r1, r3
 80070fa:	4603      	mov	r3, r0
 80070fc:	4642      	mov	r2, r8
 80070fe:	189b      	adds	r3, r3, r2
 8007100:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007102:	464b      	mov	r3, r9
 8007104:	460a      	mov	r2, r1
 8007106:	eb42 0303 	adc.w	r3, r2, r3
 800710a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800710c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	663b      	str	r3, [r7, #96]	@ 0x60
 8007116:	667a      	str	r2, [r7, #100]	@ 0x64
 8007118:	f04f 0200 	mov.w	r2, #0
 800711c:	f04f 0300 	mov.w	r3, #0
 8007120:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007124:	4649      	mov	r1, r9
 8007126:	008b      	lsls	r3, r1, #2
 8007128:	4641      	mov	r1, r8
 800712a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800712e:	4641      	mov	r1, r8
 8007130:	008a      	lsls	r2, r1, #2
 8007132:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007136:	f7f9 f8ab 	bl	8000290 <__aeabi_uldivmod>
 800713a:	4602      	mov	r2, r0
 800713c:	460b      	mov	r3, r1
 800713e:	4b0d      	ldr	r3, [pc, #52]	@ (8007174 <UART_SetConfig+0x4e4>)
 8007140:	fba3 1302 	umull	r1, r3, r3, r2
 8007144:	095b      	lsrs	r3, r3, #5
 8007146:	2164      	movs	r1, #100	@ 0x64
 8007148:	fb01 f303 	mul.w	r3, r1, r3
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	011b      	lsls	r3, r3, #4
 8007150:	3332      	adds	r3, #50	@ 0x32
 8007152:	4a08      	ldr	r2, [pc, #32]	@ (8007174 <UART_SetConfig+0x4e4>)
 8007154:	fba2 2303 	umull	r2, r3, r2, r3
 8007158:	095b      	lsrs	r3, r3, #5
 800715a:	f003 020f 	and.w	r2, r3, #15
 800715e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4422      	add	r2, r4
 8007166:	609a      	str	r2, [r3, #8]
}
 8007168:	bf00      	nop
 800716a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800716e:	46bd      	mov	sp, r7
 8007170:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007174:	51eb851f 	.word	0x51eb851f

08007178 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d123      	bne.n	80071d2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007192:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	6851      	ldr	r1, [r2, #4]
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	6892      	ldr	r2, [r2, #8]
 800719e:	4311      	orrs	r1, r2
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	68d2      	ldr	r2, [r2, #12]
 80071a4:	4311      	orrs	r1, r2
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	6912      	ldr	r2, [r2, #16]
 80071aa:	4311      	orrs	r1, r2
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	6952      	ldr	r2, [r2, #20]
 80071b0:	4311      	orrs	r1, r2
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	6992      	ldr	r2, [r2, #24]
 80071b6:	4311      	orrs	r1, r2
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	69d2      	ldr	r2, [r2, #28]
 80071bc:	4311      	orrs	r1, r2
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	6a12      	ldr	r2, [r2, #32]
 80071c2:	4311      	orrs	r1, r2
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80071c8:	430a      	orrs	r2, r1
 80071ca:	431a      	orrs	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	601a      	str	r2, [r3, #0]
 80071d0:	e028      	b.n	8007224 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	69d9      	ldr	r1, [r3, #28]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	4319      	orrs	r1, r3
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e8:	430b      	orrs	r3, r1
 80071ea:	431a      	orrs	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80071f8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	6851      	ldr	r1, [r2, #4]
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	6892      	ldr	r2, [r2, #8]
 8007204:	4311      	orrs	r1, r2
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	68d2      	ldr	r2, [r2, #12]
 800720a:	4311      	orrs	r1, r2
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	6912      	ldr	r2, [r2, #16]
 8007210:	4311      	orrs	r1, r2
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	6952      	ldr	r2, [r2, #20]
 8007216:	4311      	orrs	r1, r2
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	6992      	ldr	r2, [r2, #24]
 800721c:	430a      	orrs	r2, r1
 800721e:	431a      	orrs	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007232:	b480      	push	{r7}
 8007234:	b085      	sub	sp, #20
 8007236:	af00      	add	r7, sp, #0
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d128      	bne.n	8007296 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	1e59      	subs	r1, r3, #1
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	3b01      	subs	r3, #1
 8007258:	011b      	lsls	r3, r3, #4
 800725a:	4319      	orrs	r1, r3
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	3b01      	subs	r3, #1
 8007262:	021b      	lsls	r3, r3, #8
 8007264:	4319      	orrs	r1, r3
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	3b01      	subs	r3, #1
 800726c:	031b      	lsls	r3, r3, #12
 800726e:	4319      	orrs	r1, r3
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	3b01      	subs	r3, #1
 8007276:	041b      	lsls	r3, r3, #16
 8007278:	4319      	orrs	r1, r3
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	3b01      	subs	r3, #1
 8007280:	051b      	lsls	r3, r3, #20
 8007282:	4319      	orrs	r1, r3
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	3b01      	subs	r3, #1
 800728a:	061b      	lsls	r3, r3, #24
 800728c:	430b      	orrs	r3, r1
 800728e:	431a      	orrs	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	609a      	str	r2, [r3, #8]
 8007294:	e02f      	b.n	80072f6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800729e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	68d2      	ldr	r2, [r2, #12]
 80072a6:	3a01      	subs	r2, #1
 80072a8:	0311      	lsls	r1, r2, #12
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	6952      	ldr	r2, [r2, #20]
 80072ae:	3a01      	subs	r2, #1
 80072b0:	0512      	lsls	r2, r2, #20
 80072b2:	430a      	orrs	r2, r1
 80072b4:	431a      	orrs	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	1e59      	subs	r1, r3, #1
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	3b01      	subs	r3, #1
 80072ce:	011b      	lsls	r3, r3, #4
 80072d0:	4319      	orrs	r1, r3
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	3b01      	subs	r3, #1
 80072d8:	021b      	lsls	r3, r3, #8
 80072da:	4319      	orrs	r1, r3
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	3b01      	subs	r3, #1
 80072e2:	041b      	lsls	r3, r3, #16
 80072e4:	4319      	orrs	r1, r3
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	061b      	lsls	r3, r3, #24
 80072ee:	430b      	orrs	r3, r1
 80072f0:	431a      	orrs	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007304:	b084      	sub	sp, #16
 8007306:	b580      	push	{r7, lr}
 8007308:	b084      	sub	sp, #16
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	f107 001c 	add.w	r0, r7, #28
 8007312:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007316:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800731a:	2b01      	cmp	r3, #1
 800731c:	d123      	bne.n	8007366 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007322:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007346:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800734a:	2b01      	cmp	r3, #1
 800734c:	d105      	bne.n	800735a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f98d 	bl	800767a <USB_CoreReset>
 8007360:	4603      	mov	r3, r0
 8007362:	73fb      	strb	r3, [r7, #15]
 8007364:	e01b      	b.n	800739e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f981 	bl	800767a <USB_CoreReset>
 8007378:	4603      	mov	r3, r0
 800737a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800737c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007380:	2b00      	cmp	r3, #0
 8007382:	d106      	bne.n	8007392 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007388:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007390:	e005      	b.n	800739e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007396:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800739e:	7fbb      	ldrb	r3, [r7, #30]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d10b      	bne.n	80073bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f043 0206 	orr.w	r2, r3, #6
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f043 0220 	orr.w	r2, r3, #32
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073c8:	b004      	add	sp, #16
 80073ca:	4770      	bx	lr

080073cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f023 0201 	bic.w	r2, r3, #1
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	460b      	mov	r3, r1
 80073f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d115      	bne.n	800743c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800741c:	200a      	movs	r0, #10
 800741e:	f7fa ffe7 	bl	80023f0 <HAL_Delay>
      ms += 10U;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	330a      	adds	r3, #10
 8007426:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f918 	bl	800765e <USB_GetMode>
 800742e:	4603      	mov	r3, r0
 8007430:	2b01      	cmp	r3, #1
 8007432:	d01e      	beq.n	8007472 <USB_SetCurrentMode+0x84>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2bc7      	cmp	r3, #199	@ 0xc7
 8007438:	d9f0      	bls.n	800741c <USB_SetCurrentMode+0x2e>
 800743a:	e01a      	b.n	8007472 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800743c:	78fb      	ldrb	r3, [r7, #3]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d115      	bne.n	800746e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800744e:	200a      	movs	r0, #10
 8007450:	f7fa ffce 	bl	80023f0 <HAL_Delay>
      ms += 10U;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	330a      	adds	r3, #10
 8007458:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f8ff 	bl	800765e <USB_GetMode>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d005      	beq.n	8007472 <USB_SetCurrentMode+0x84>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2bc7      	cmp	r3, #199	@ 0xc7
 800746a:	d9f0      	bls.n	800744e <USB_SetCurrentMode+0x60>
 800746c:	e001      	b.n	8007472 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e005      	b.n	800747e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2bc8      	cmp	r3, #200	@ 0xc8
 8007476:	d101      	bne.n	800747c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e000      	b.n	800747e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007486:	b480      	push	{r7}
 8007488:	b085      	sub	sp, #20
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	3301      	adds	r3, #1
 8007498:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074a0:	d901      	bls.n	80074a6 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e01b      	b.n	80074de <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	daf2      	bge.n	8007494 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80074ae:	2300      	movs	r3, #0
 80074b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	019b      	lsls	r3, r3, #6
 80074b6:	f043 0220 	orr.w	r2, r3, #32
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3301      	adds	r3, #1
 80074c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074ca:	d901      	bls.n	80074d0 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e006      	b.n	80074de <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	f003 0320 	and.w	r3, r3, #32
 80074d8:	2b20      	cmp	r3, #32
 80074da:	d0f0      	beq.n	80074be <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3714      	adds	r7, #20
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b085      	sub	sp, #20
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	3301      	adds	r3, #1
 80074fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007502:	d901      	bls.n	8007508 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e018      	b.n	800753a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	daf2      	bge.n	80074f6 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2210      	movs	r2, #16
 8007518:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	3301      	adds	r3, #1
 800751e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007526:	d901      	bls.n	800752c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e006      	b.n	800753a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	f003 0310 	and.w	r3, r3, #16
 8007534:	2b10      	cmp	r3, #16
 8007536:	d0f0      	beq.n	800751a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007546:	b480      	push	{r7}
 8007548:	b08b      	sub	sp, #44	@ 0x2c
 800754a:	af00      	add	r7, sp, #0
 800754c:	60f8      	str	r0, [r7, #12]
 800754e:	60b9      	str	r1, [r7, #8]
 8007550:	4613      	mov	r3, r2
 8007552:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800755c:	88fb      	ldrh	r3, [r7, #6]
 800755e:	089b      	lsrs	r3, r3, #2
 8007560:	b29b      	uxth	r3, r3
 8007562:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007564:	88fb      	ldrh	r3, [r7, #6]
 8007566:	f003 0303 	and.w	r3, r3, #3
 800756a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800756c:	2300      	movs	r3, #0
 800756e:	623b      	str	r3, [r7, #32]
 8007570:	e014      	b.n	800759c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757c:	601a      	str	r2, [r3, #0]
    pDest++;
 800757e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007580:	3301      	adds	r3, #1
 8007582:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007586:	3301      	adds	r3, #1
 8007588:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800758a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758c:	3301      	adds	r3, #1
 800758e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007592:	3301      	adds	r3, #1
 8007594:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	3301      	adds	r3, #1
 800759a:	623b      	str	r3, [r7, #32]
 800759c:	6a3a      	ldr	r2, [r7, #32]
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d3e6      	bcc.n	8007572 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80075a4:	8bfb      	ldrh	r3, [r7, #30]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d01e      	beq.n	80075e8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075b4:	461a      	mov	r2, r3
 80075b6:	f107 0310 	add.w	r3, r7, #16
 80075ba:	6812      	ldr	r2, [r2, #0]
 80075bc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	fa22 f303 	lsr.w	r3, r2, r3
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ce:	701a      	strb	r2, [r3, #0]
      i++;
 80075d0:	6a3b      	ldr	r3, [r7, #32]
 80075d2:	3301      	adds	r3, #1
 80075d4:	623b      	str	r3, [r7, #32]
      pDest++;
 80075d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d8:	3301      	adds	r3, #1
 80075da:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80075dc:	8bfb      	ldrh	r3, [r7, #30]
 80075de:	3b01      	subs	r3, #1
 80075e0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80075e2:	8bfb      	ldrh	r3, [r7, #30]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1ea      	bne.n	80075be <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80075e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	372c      	adds	r7, #44	@ 0x2c
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b085      	sub	sp, #20
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	4013      	ands	r3, r2
 800760c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800760e:	68fb      	ldr	r3, [r7, #12]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800762c:	78fb      	ldrb	r3, [r7, #3]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4413      	add	r3, r2
 8007634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800763c:	78fb      	ldrb	r3, [r7, #3]
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4413      	add	r3, r2
 8007644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	4013      	ands	r3, r2
 800764e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007650:	68bb      	ldr	r3, [r7, #8]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	f003 0301 	and.w	r3, r3, #1
}
 800766e:	4618      	mov	r0, r3
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800767a:	b480      	push	{r7}
 800767c:	b085      	sub	sp, #20
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	3301      	adds	r3, #1
 800768a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007692:	d901      	bls.n	8007698 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e01b      	b.n	80076d0 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	2b00      	cmp	r3, #0
 800769e:	daf2      	bge.n	8007686 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	f043 0201 	orr.w	r2, r3, #1
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	3301      	adds	r3, #1
 80076b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076bc:	d901      	bls.n	80076c2 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e006      	b.n	80076d0 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d0f0      	beq.n	80076b0 <USB_CoreReset+0x36>

  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3714      	adds	r7, #20
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076dc:	b084      	sub	sp, #16
 80076de:	b580      	push	{r7, lr}
 80076e0:	b086      	sub	sp, #24
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80076ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80076fc:	461a      	mov	r2, r3
 80076fe:	2300      	movs	r3, #0
 8007700:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007706:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007712:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800771e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800772e:	2b00      	cmp	r3, #0
 8007730:	d119      	bne.n	8007766 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007732:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007736:	2b01      	cmp	r3, #1
 8007738:	d10a      	bne.n	8007750 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007748:	f043 0304 	orr.w	r3, r3, #4
 800774c:	6013      	str	r3, [r2, #0]
 800774e:	e014      	b.n	800777a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800775e:	f023 0304 	bic.w	r3, r3, #4
 8007762:	6013      	str	r3, [r2, #0]
 8007764:	e009      	b.n	800777a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007774:	f023 0304 	bic.w	r3, r3, #4
 8007778:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800777a:	2110      	movs	r1, #16
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7ff fe82 	bl	8007486 <USB_FlushTxFifo>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d001      	beq.n	800778c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f7ff feac 	bl	80074ea <USB_FlushRxFifo>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800779c:	2300      	movs	r3, #0
 800779e:	613b      	str	r3, [r7, #16]
 80077a0:	e015      	b.n	80077ce <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	015a      	lsls	r2, r3, #5
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	4413      	add	r3, r2
 80077aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077ae:	461a      	mov	r2, r3
 80077b0:	f04f 33ff 	mov.w	r3, #4294967295
 80077b4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077c2:	461a      	mov	r2, r3
 80077c4:	2300      	movs	r3, #0
 80077c6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	3301      	adds	r3, #1
 80077cc:	613b      	str	r3, [r7, #16]
 80077ce:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80077d2:	461a      	mov	r2, r3
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d3e3      	bcc.n	80077a2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f04f 32ff 	mov.w	r2, #4294967295
 80077e6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a18      	ldr	r2, [pc, #96]	@ (800784c <USB_HostInit+0x170>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d10b      	bne.n	8007808 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077f6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a15      	ldr	r2, [pc, #84]	@ (8007850 <USB_HostInit+0x174>)
 80077fc:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a14      	ldr	r2, [pc, #80]	@ (8007854 <USB_HostInit+0x178>)
 8007802:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007806:	e009      	b.n	800781c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2280      	movs	r2, #128	@ 0x80
 800780c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a11      	ldr	r2, [pc, #68]	@ (8007858 <USB_HostInit+0x17c>)
 8007812:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a11      	ldr	r2, [pc, #68]	@ (800785c <USB_HostInit+0x180>)
 8007818:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800781c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007820:	2b00      	cmp	r3, #0
 8007822:	d105      	bne.n	8007830 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	f043 0210 	orr.w	r2, r3, #16
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	699a      	ldr	r2, [r3, #24]
 8007834:	4b0a      	ldr	r3, [pc, #40]	@ (8007860 <USB_HostInit+0x184>)
 8007836:	4313      	orrs	r3, r2
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800783c:	7dfb      	ldrb	r3, [r7, #23]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007848:	b004      	add	sp, #16
 800784a:	4770      	bx	lr
 800784c:	40040000 	.word	0x40040000
 8007850:	01000200 	.word	0x01000200
 8007854:	00e00300 	.word	0x00e00300
 8007858:	00600080 	.word	0x00600080
 800785c:	004000e0 	.word	0x004000e0
 8007860:	a3200008 	.word	0xa3200008

08007864 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	460b      	mov	r3, r1
 800786e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007882:	f023 0303 	bic.w	r3, r3, #3
 8007886:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	78fb      	ldrb	r3, [r7, #3]
 8007892:	f003 0303 	and.w	r3, r3, #3
 8007896:	68f9      	ldr	r1, [r7, #12]
 8007898:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800789c:	4313      	orrs	r3, r2
 800789e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80078a0:	78fb      	ldrb	r3, [r7, #3]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d107      	bne.n	80078b6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078ac:	461a      	mov	r2, r3
 80078ae:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80078b2:	6053      	str	r3, [r2, #4]
 80078b4:	e00c      	b.n	80078d0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80078b6:	78fb      	ldrb	r3, [r7, #3]
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d107      	bne.n	80078cc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078c2:	461a      	mov	r2, r3
 80078c4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80078c8:	6053      	str	r3, [r2, #4]
 80078ca:	e001      	b.n	80078d0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e000      	b.n	80078d2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80078de:	b480      	push	{r7}
 80078e0:	b085      	sub	sp, #20
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	b29b      	uxth	r3, r3
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007900:	b480      	push	{r7}
 8007902:	b089      	sub	sp, #36	@ 0x24
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	460b      	mov	r3, r1
 800790a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007910:	78fb      	ldrb	r3, [r7, #3]
 8007912:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007914:	2300      	movs	r3, #0
 8007916:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	4413      	add	r3, r2
 8007920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	0c9b      	lsrs	r3, r3, #18
 8007928:	f003 0303 	and.w	r3, r3, #3
 800792c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	015a      	lsls	r2, r3, #5
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	4413      	add	r3, r2
 8007936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	0fdb      	lsrs	r3, r3, #31
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	015a      	lsls	r2, r3, #5
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	4413      	add	r3, r2
 800794c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	0fdb      	lsrs	r3, r3, #31
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f003 0320 	and.w	r3, r3, #32
 8007962:	2b20      	cmp	r3, #32
 8007964:	d10d      	bne.n	8007982 <USB_HC_Halt+0x82>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10a      	bne.n	8007982 <USB_HC_Halt+0x82>
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d005      	beq.n	800797e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d002      	beq.n	800797e <USB_HC_Halt+0x7e>
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2b03      	cmp	r3, #3
 800797c:	d101      	bne.n	8007982 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	e0d8      	b.n	8007b34 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d002      	beq.n	800798e <USB_HC_Halt+0x8e>
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	2b02      	cmp	r3, #2
 800798c:	d173      	bne.n	8007a76 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	015a      	lsls	r2, r3, #5
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	4413      	add	r3, r2
 8007996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	69ba      	ldr	r2, [r7, #24]
 800799e:	0151      	lsls	r1, r2, #5
 80079a0:	69fa      	ldr	r2, [r7, #28]
 80079a2:	440a      	add	r2, r1
 80079a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079ac:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f003 0320 	and.w	r3, r3, #32
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d14a      	bne.n	8007a50 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079be:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d133      	bne.n	8007a2e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	015a      	lsls	r2, r3, #5
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	4413      	add	r3, r2
 80079ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	69ba      	ldr	r2, [r7, #24]
 80079d6:	0151      	lsls	r1, r2, #5
 80079d8:	69fa      	ldr	r2, [r7, #28]
 80079da:	440a      	add	r2, r1
 80079dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079e4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	015a      	lsls	r2, r3, #5
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	4413      	add	r3, r2
 80079ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	0151      	lsls	r1, r2, #5
 80079f8:	69fa      	ldr	r2, [r7, #28]
 80079fa:	440a      	add	r2, r1
 80079fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a00:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a04:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a12:	d82e      	bhi.n	8007a72 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	015a      	lsls	r2, r3, #5
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a2a:	d0ec      	beq.n	8007a06 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a2c:	e081      	b.n	8007b32 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	69ba      	ldr	r2, [r7, #24]
 8007a3e:	0151      	lsls	r1, r2, #5
 8007a40:	69fa      	ldr	r2, [r7, #28]
 8007a42:	440a      	add	r2, r1
 8007a44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a4c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a4e:	e070      	b.n	8007b32 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	0151      	lsls	r1, r2, #5
 8007a62:	69fa      	ldr	r2, [r7, #28]
 8007a64:	440a      	add	r2, r1
 8007a66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a6e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a70:	e05f      	b.n	8007b32 <USB_HC_Halt+0x232>
            break;
 8007a72:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a74:	e05d      	b.n	8007b32 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	015a      	lsls	r2, r3, #5
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	69ba      	ldr	r2, [r7, #24]
 8007a86:	0151      	lsls	r1, r2, #5
 8007a88:	69fa      	ldr	r2, [r7, #28]
 8007a8a:	440a      	add	r2, r1
 8007a8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a94:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d133      	bne.n	8007b0e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	015a      	lsls	r2, r3, #5
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	0151      	lsls	r1, r2, #5
 8007ab8:	69fa      	ldr	r2, [r7, #28]
 8007aba:	440a      	add	r2, r1
 8007abc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ac0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ac4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	0151      	lsls	r1, r2, #5
 8007ad8:	69fa      	ldr	r2, [r7, #28]
 8007ada:	440a      	add	r2, r1
 8007adc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ae0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ae4:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007af2:	d81d      	bhi.n	8007b30 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b0a:	d0ec      	beq.n	8007ae6 <USB_HC_Halt+0x1e6>
 8007b0c:	e011      	b.n	8007b32 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	015a      	lsls	r2, r3, #5
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	69ba      	ldr	r2, [r7, #24]
 8007b1e:	0151      	lsls	r1, r2, #5
 8007b20:	69fa      	ldr	r2, [r7, #28]
 8007b22:	440a      	add	r2, r1
 8007b24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	e000      	b.n	8007b32 <USB_HC_Halt+0x232>
          break;
 8007b30:	bf00      	nop
    }
  }

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3724      	adds	r7, #36	@ 0x24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <std>:
 8007b40:	2300      	movs	r3, #0
 8007b42:	b510      	push	{r4, lr}
 8007b44:	4604      	mov	r4, r0
 8007b46:	e9c0 3300 	strd	r3, r3, [r0]
 8007b4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b4e:	6083      	str	r3, [r0, #8]
 8007b50:	8181      	strh	r1, [r0, #12]
 8007b52:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b54:	81c2      	strh	r2, [r0, #14]
 8007b56:	6183      	str	r3, [r0, #24]
 8007b58:	4619      	mov	r1, r3
 8007b5a:	2208      	movs	r2, #8
 8007b5c:	305c      	adds	r0, #92	@ 0x5c
 8007b5e:	f000 f9f9 	bl	8007f54 <memset>
 8007b62:	4b0d      	ldr	r3, [pc, #52]	@ (8007b98 <std+0x58>)
 8007b64:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b66:	4b0d      	ldr	r3, [pc, #52]	@ (8007b9c <std+0x5c>)
 8007b68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ba0 <std+0x60>)
 8007b6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ba4 <std+0x64>)
 8007b70:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b72:	4b0d      	ldr	r3, [pc, #52]	@ (8007ba8 <std+0x68>)
 8007b74:	6224      	str	r4, [r4, #32]
 8007b76:	429c      	cmp	r4, r3
 8007b78:	d006      	beq.n	8007b88 <std+0x48>
 8007b7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007b7e:	4294      	cmp	r4, r2
 8007b80:	d002      	beq.n	8007b88 <std+0x48>
 8007b82:	33d0      	adds	r3, #208	@ 0xd0
 8007b84:	429c      	cmp	r4, r3
 8007b86:	d105      	bne.n	8007b94 <std+0x54>
 8007b88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b90:	f000 ba58 	b.w	8008044 <__retarget_lock_init_recursive>
 8007b94:	bd10      	pop	{r4, pc}
 8007b96:	bf00      	nop
 8007b98:	08007da5 	.word	0x08007da5
 8007b9c:	08007dc7 	.word	0x08007dc7
 8007ba0:	08007dff 	.word	0x08007dff
 8007ba4:	08007e23 	.word	0x08007e23
 8007ba8:	20000718 	.word	0x20000718

08007bac <stdio_exit_handler>:
 8007bac:	4a02      	ldr	r2, [pc, #8]	@ (8007bb8 <stdio_exit_handler+0xc>)
 8007bae:	4903      	ldr	r1, [pc, #12]	@ (8007bbc <stdio_exit_handler+0x10>)
 8007bb0:	4803      	ldr	r0, [pc, #12]	@ (8007bc0 <stdio_exit_handler+0x14>)
 8007bb2:	f000 b869 	b.w	8007c88 <_fwalk_sglue>
 8007bb6:	bf00      	nop
 8007bb8:	2000000c 	.word	0x2000000c
 8007bbc:	080088e1 	.word	0x080088e1
 8007bc0:	2000001c 	.word	0x2000001c

08007bc4 <cleanup_stdio>:
 8007bc4:	6841      	ldr	r1, [r0, #4]
 8007bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8007bf8 <cleanup_stdio+0x34>)
 8007bc8:	4299      	cmp	r1, r3
 8007bca:	b510      	push	{r4, lr}
 8007bcc:	4604      	mov	r4, r0
 8007bce:	d001      	beq.n	8007bd4 <cleanup_stdio+0x10>
 8007bd0:	f000 fe86 	bl	80088e0 <_fflush_r>
 8007bd4:	68a1      	ldr	r1, [r4, #8]
 8007bd6:	4b09      	ldr	r3, [pc, #36]	@ (8007bfc <cleanup_stdio+0x38>)
 8007bd8:	4299      	cmp	r1, r3
 8007bda:	d002      	beq.n	8007be2 <cleanup_stdio+0x1e>
 8007bdc:	4620      	mov	r0, r4
 8007bde:	f000 fe7f 	bl	80088e0 <_fflush_r>
 8007be2:	68e1      	ldr	r1, [r4, #12]
 8007be4:	4b06      	ldr	r3, [pc, #24]	@ (8007c00 <cleanup_stdio+0x3c>)
 8007be6:	4299      	cmp	r1, r3
 8007be8:	d004      	beq.n	8007bf4 <cleanup_stdio+0x30>
 8007bea:	4620      	mov	r0, r4
 8007bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bf0:	f000 be76 	b.w	80088e0 <_fflush_r>
 8007bf4:	bd10      	pop	{r4, pc}
 8007bf6:	bf00      	nop
 8007bf8:	20000718 	.word	0x20000718
 8007bfc:	20000780 	.word	0x20000780
 8007c00:	200007e8 	.word	0x200007e8

08007c04 <global_stdio_init.part.0>:
 8007c04:	b510      	push	{r4, lr}
 8007c06:	4b0b      	ldr	r3, [pc, #44]	@ (8007c34 <global_stdio_init.part.0+0x30>)
 8007c08:	4c0b      	ldr	r4, [pc, #44]	@ (8007c38 <global_stdio_init.part.0+0x34>)
 8007c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8007c3c <global_stdio_init.part.0+0x38>)
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	4620      	mov	r0, r4
 8007c10:	2200      	movs	r2, #0
 8007c12:	2104      	movs	r1, #4
 8007c14:	f7ff ff94 	bl	8007b40 <std>
 8007c18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	2109      	movs	r1, #9
 8007c20:	f7ff ff8e 	bl	8007b40 <std>
 8007c24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c28:	2202      	movs	r2, #2
 8007c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c2e:	2112      	movs	r1, #18
 8007c30:	f7ff bf86 	b.w	8007b40 <std>
 8007c34:	20000850 	.word	0x20000850
 8007c38:	20000718 	.word	0x20000718
 8007c3c:	08007bad 	.word	0x08007bad

08007c40 <__sfp_lock_acquire>:
 8007c40:	4801      	ldr	r0, [pc, #4]	@ (8007c48 <__sfp_lock_acquire+0x8>)
 8007c42:	f000 ba00 	b.w	8008046 <__retarget_lock_acquire_recursive>
 8007c46:	bf00      	nop
 8007c48:	20000859 	.word	0x20000859

08007c4c <__sfp_lock_release>:
 8007c4c:	4801      	ldr	r0, [pc, #4]	@ (8007c54 <__sfp_lock_release+0x8>)
 8007c4e:	f000 b9fb 	b.w	8008048 <__retarget_lock_release_recursive>
 8007c52:	bf00      	nop
 8007c54:	20000859 	.word	0x20000859

08007c58 <__sinit>:
 8007c58:	b510      	push	{r4, lr}
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	f7ff fff0 	bl	8007c40 <__sfp_lock_acquire>
 8007c60:	6a23      	ldr	r3, [r4, #32]
 8007c62:	b11b      	cbz	r3, 8007c6c <__sinit+0x14>
 8007c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c68:	f7ff bff0 	b.w	8007c4c <__sfp_lock_release>
 8007c6c:	4b04      	ldr	r3, [pc, #16]	@ (8007c80 <__sinit+0x28>)
 8007c6e:	6223      	str	r3, [r4, #32]
 8007c70:	4b04      	ldr	r3, [pc, #16]	@ (8007c84 <__sinit+0x2c>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1f5      	bne.n	8007c64 <__sinit+0xc>
 8007c78:	f7ff ffc4 	bl	8007c04 <global_stdio_init.part.0>
 8007c7c:	e7f2      	b.n	8007c64 <__sinit+0xc>
 8007c7e:	bf00      	nop
 8007c80:	08007bc5 	.word	0x08007bc5
 8007c84:	20000850 	.word	0x20000850

08007c88 <_fwalk_sglue>:
 8007c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c8c:	4607      	mov	r7, r0
 8007c8e:	4688      	mov	r8, r1
 8007c90:	4614      	mov	r4, r2
 8007c92:	2600      	movs	r6, #0
 8007c94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c98:	f1b9 0901 	subs.w	r9, r9, #1
 8007c9c:	d505      	bpl.n	8007caa <_fwalk_sglue+0x22>
 8007c9e:	6824      	ldr	r4, [r4, #0]
 8007ca0:	2c00      	cmp	r4, #0
 8007ca2:	d1f7      	bne.n	8007c94 <_fwalk_sglue+0xc>
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007caa:	89ab      	ldrh	r3, [r5, #12]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d907      	bls.n	8007cc0 <_fwalk_sglue+0x38>
 8007cb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	d003      	beq.n	8007cc0 <_fwalk_sglue+0x38>
 8007cb8:	4629      	mov	r1, r5
 8007cba:	4638      	mov	r0, r7
 8007cbc:	47c0      	blx	r8
 8007cbe:	4306      	orrs	r6, r0
 8007cc0:	3568      	adds	r5, #104	@ 0x68
 8007cc2:	e7e9      	b.n	8007c98 <_fwalk_sglue+0x10>

08007cc4 <iprintf>:
 8007cc4:	b40f      	push	{r0, r1, r2, r3}
 8007cc6:	b507      	push	{r0, r1, r2, lr}
 8007cc8:	4906      	ldr	r1, [pc, #24]	@ (8007ce4 <iprintf+0x20>)
 8007cca:	ab04      	add	r3, sp, #16
 8007ccc:	6808      	ldr	r0, [r1, #0]
 8007cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cd2:	6881      	ldr	r1, [r0, #8]
 8007cd4:	9301      	str	r3, [sp, #4]
 8007cd6:	f000 fadb 	bl	8008290 <_vfiprintf_r>
 8007cda:	b003      	add	sp, #12
 8007cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ce0:	b004      	add	sp, #16
 8007ce2:	4770      	bx	lr
 8007ce4:	20000018 	.word	0x20000018

08007ce8 <_puts_r>:
 8007ce8:	6a03      	ldr	r3, [r0, #32]
 8007cea:	b570      	push	{r4, r5, r6, lr}
 8007cec:	6884      	ldr	r4, [r0, #8]
 8007cee:	4605      	mov	r5, r0
 8007cf0:	460e      	mov	r6, r1
 8007cf2:	b90b      	cbnz	r3, 8007cf8 <_puts_r+0x10>
 8007cf4:	f7ff ffb0 	bl	8007c58 <__sinit>
 8007cf8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cfa:	07db      	lsls	r3, r3, #31
 8007cfc:	d405      	bmi.n	8007d0a <_puts_r+0x22>
 8007cfe:	89a3      	ldrh	r3, [r4, #12]
 8007d00:	0598      	lsls	r0, r3, #22
 8007d02:	d402      	bmi.n	8007d0a <_puts_r+0x22>
 8007d04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d06:	f000 f99e 	bl	8008046 <__retarget_lock_acquire_recursive>
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	0719      	lsls	r1, r3, #28
 8007d0e:	d502      	bpl.n	8007d16 <_puts_r+0x2e>
 8007d10:	6923      	ldr	r3, [r4, #16]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d135      	bne.n	8007d82 <_puts_r+0x9a>
 8007d16:	4621      	mov	r1, r4
 8007d18:	4628      	mov	r0, r5
 8007d1a:	f000 f8c5 	bl	8007ea8 <__swsetup_r>
 8007d1e:	b380      	cbz	r0, 8007d82 <_puts_r+0x9a>
 8007d20:	f04f 35ff 	mov.w	r5, #4294967295
 8007d24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d26:	07da      	lsls	r2, r3, #31
 8007d28:	d405      	bmi.n	8007d36 <_puts_r+0x4e>
 8007d2a:	89a3      	ldrh	r3, [r4, #12]
 8007d2c:	059b      	lsls	r3, r3, #22
 8007d2e:	d402      	bmi.n	8007d36 <_puts_r+0x4e>
 8007d30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d32:	f000 f989 	bl	8008048 <__retarget_lock_release_recursive>
 8007d36:	4628      	mov	r0, r5
 8007d38:	bd70      	pop	{r4, r5, r6, pc}
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	da04      	bge.n	8007d48 <_puts_r+0x60>
 8007d3e:	69a2      	ldr	r2, [r4, #24]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	dc17      	bgt.n	8007d74 <_puts_r+0x8c>
 8007d44:	290a      	cmp	r1, #10
 8007d46:	d015      	beq.n	8007d74 <_puts_r+0x8c>
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	1c5a      	adds	r2, r3, #1
 8007d4c:	6022      	str	r2, [r4, #0]
 8007d4e:	7019      	strb	r1, [r3, #0]
 8007d50:	68a3      	ldr	r3, [r4, #8]
 8007d52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d56:	3b01      	subs	r3, #1
 8007d58:	60a3      	str	r3, [r4, #8]
 8007d5a:	2900      	cmp	r1, #0
 8007d5c:	d1ed      	bne.n	8007d3a <_puts_r+0x52>
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	da11      	bge.n	8007d86 <_puts_r+0x9e>
 8007d62:	4622      	mov	r2, r4
 8007d64:	210a      	movs	r1, #10
 8007d66:	4628      	mov	r0, r5
 8007d68:	f000 f85f 	bl	8007e2a <__swbuf_r>
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	d0d7      	beq.n	8007d20 <_puts_r+0x38>
 8007d70:	250a      	movs	r5, #10
 8007d72:	e7d7      	b.n	8007d24 <_puts_r+0x3c>
 8007d74:	4622      	mov	r2, r4
 8007d76:	4628      	mov	r0, r5
 8007d78:	f000 f857 	bl	8007e2a <__swbuf_r>
 8007d7c:	3001      	adds	r0, #1
 8007d7e:	d1e7      	bne.n	8007d50 <_puts_r+0x68>
 8007d80:	e7ce      	b.n	8007d20 <_puts_r+0x38>
 8007d82:	3e01      	subs	r6, #1
 8007d84:	e7e4      	b.n	8007d50 <_puts_r+0x68>
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	1c5a      	adds	r2, r3, #1
 8007d8a:	6022      	str	r2, [r4, #0]
 8007d8c:	220a      	movs	r2, #10
 8007d8e:	701a      	strb	r2, [r3, #0]
 8007d90:	e7ee      	b.n	8007d70 <_puts_r+0x88>
	...

08007d94 <puts>:
 8007d94:	4b02      	ldr	r3, [pc, #8]	@ (8007da0 <puts+0xc>)
 8007d96:	4601      	mov	r1, r0
 8007d98:	6818      	ldr	r0, [r3, #0]
 8007d9a:	f7ff bfa5 	b.w	8007ce8 <_puts_r>
 8007d9e:	bf00      	nop
 8007da0:	20000018 	.word	0x20000018

08007da4 <__sread>:
 8007da4:	b510      	push	{r4, lr}
 8007da6:	460c      	mov	r4, r1
 8007da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dac:	f000 f8fc 	bl	8007fa8 <_read_r>
 8007db0:	2800      	cmp	r0, #0
 8007db2:	bfab      	itete	ge
 8007db4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007db6:	89a3      	ldrhlt	r3, [r4, #12]
 8007db8:	181b      	addge	r3, r3, r0
 8007dba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007dbe:	bfac      	ite	ge
 8007dc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007dc2:	81a3      	strhlt	r3, [r4, #12]
 8007dc4:	bd10      	pop	{r4, pc}

08007dc6 <__swrite>:
 8007dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dca:	461f      	mov	r7, r3
 8007dcc:	898b      	ldrh	r3, [r1, #12]
 8007dce:	05db      	lsls	r3, r3, #23
 8007dd0:	4605      	mov	r5, r0
 8007dd2:	460c      	mov	r4, r1
 8007dd4:	4616      	mov	r6, r2
 8007dd6:	d505      	bpl.n	8007de4 <__swrite+0x1e>
 8007dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ddc:	2302      	movs	r3, #2
 8007dde:	2200      	movs	r2, #0
 8007de0:	f000 f8d0 	bl	8007f84 <_lseek_r>
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007dee:	81a3      	strh	r3, [r4, #12]
 8007df0:	4632      	mov	r2, r6
 8007df2:	463b      	mov	r3, r7
 8007df4:	4628      	mov	r0, r5
 8007df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dfa:	f000 b8e7 	b.w	8007fcc <_write_r>

08007dfe <__sseek>:
 8007dfe:	b510      	push	{r4, lr}
 8007e00:	460c      	mov	r4, r1
 8007e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e06:	f000 f8bd 	bl	8007f84 <_lseek_r>
 8007e0a:	1c43      	adds	r3, r0, #1
 8007e0c:	89a3      	ldrh	r3, [r4, #12]
 8007e0e:	bf15      	itete	ne
 8007e10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e1a:	81a3      	strheq	r3, [r4, #12]
 8007e1c:	bf18      	it	ne
 8007e1e:	81a3      	strhne	r3, [r4, #12]
 8007e20:	bd10      	pop	{r4, pc}

08007e22 <__sclose>:
 8007e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e26:	f000 b89d 	b.w	8007f64 <_close_r>

08007e2a <__swbuf_r>:
 8007e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2c:	460e      	mov	r6, r1
 8007e2e:	4614      	mov	r4, r2
 8007e30:	4605      	mov	r5, r0
 8007e32:	b118      	cbz	r0, 8007e3c <__swbuf_r+0x12>
 8007e34:	6a03      	ldr	r3, [r0, #32]
 8007e36:	b90b      	cbnz	r3, 8007e3c <__swbuf_r+0x12>
 8007e38:	f7ff ff0e 	bl	8007c58 <__sinit>
 8007e3c:	69a3      	ldr	r3, [r4, #24]
 8007e3e:	60a3      	str	r3, [r4, #8]
 8007e40:	89a3      	ldrh	r3, [r4, #12]
 8007e42:	071a      	lsls	r2, r3, #28
 8007e44:	d501      	bpl.n	8007e4a <__swbuf_r+0x20>
 8007e46:	6923      	ldr	r3, [r4, #16]
 8007e48:	b943      	cbnz	r3, 8007e5c <__swbuf_r+0x32>
 8007e4a:	4621      	mov	r1, r4
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	f000 f82b 	bl	8007ea8 <__swsetup_r>
 8007e52:	b118      	cbz	r0, 8007e5c <__swbuf_r+0x32>
 8007e54:	f04f 37ff 	mov.w	r7, #4294967295
 8007e58:	4638      	mov	r0, r7
 8007e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e5c:	6823      	ldr	r3, [r4, #0]
 8007e5e:	6922      	ldr	r2, [r4, #16]
 8007e60:	1a98      	subs	r0, r3, r2
 8007e62:	6963      	ldr	r3, [r4, #20]
 8007e64:	b2f6      	uxtb	r6, r6
 8007e66:	4283      	cmp	r3, r0
 8007e68:	4637      	mov	r7, r6
 8007e6a:	dc05      	bgt.n	8007e78 <__swbuf_r+0x4e>
 8007e6c:	4621      	mov	r1, r4
 8007e6e:	4628      	mov	r0, r5
 8007e70:	f000 fd36 	bl	80088e0 <_fflush_r>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d1ed      	bne.n	8007e54 <__swbuf_r+0x2a>
 8007e78:	68a3      	ldr	r3, [r4, #8]
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	60a3      	str	r3, [r4, #8]
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	1c5a      	adds	r2, r3, #1
 8007e82:	6022      	str	r2, [r4, #0]
 8007e84:	701e      	strb	r6, [r3, #0]
 8007e86:	6962      	ldr	r2, [r4, #20]
 8007e88:	1c43      	adds	r3, r0, #1
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d004      	beq.n	8007e98 <__swbuf_r+0x6e>
 8007e8e:	89a3      	ldrh	r3, [r4, #12]
 8007e90:	07db      	lsls	r3, r3, #31
 8007e92:	d5e1      	bpl.n	8007e58 <__swbuf_r+0x2e>
 8007e94:	2e0a      	cmp	r6, #10
 8007e96:	d1df      	bne.n	8007e58 <__swbuf_r+0x2e>
 8007e98:	4621      	mov	r1, r4
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	f000 fd20 	bl	80088e0 <_fflush_r>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	d0d9      	beq.n	8007e58 <__swbuf_r+0x2e>
 8007ea4:	e7d6      	b.n	8007e54 <__swbuf_r+0x2a>
	...

08007ea8 <__swsetup_r>:
 8007ea8:	b538      	push	{r3, r4, r5, lr}
 8007eaa:	4b29      	ldr	r3, [pc, #164]	@ (8007f50 <__swsetup_r+0xa8>)
 8007eac:	4605      	mov	r5, r0
 8007eae:	6818      	ldr	r0, [r3, #0]
 8007eb0:	460c      	mov	r4, r1
 8007eb2:	b118      	cbz	r0, 8007ebc <__swsetup_r+0x14>
 8007eb4:	6a03      	ldr	r3, [r0, #32]
 8007eb6:	b90b      	cbnz	r3, 8007ebc <__swsetup_r+0x14>
 8007eb8:	f7ff fece 	bl	8007c58 <__sinit>
 8007ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ec0:	0719      	lsls	r1, r3, #28
 8007ec2:	d422      	bmi.n	8007f0a <__swsetup_r+0x62>
 8007ec4:	06da      	lsls	r2, r3, #27
 8007ec6:	d407      	bmi.n	8007ed8 <__swsetup_r+0x30>
 8007ec8:	2209      	movs	r2, #9
 8007eca:	602a      	str	r2, [r5, #0]
 8007ecc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ed0:	81a3      	strh	r3, [r4, #12]
 8007ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed6:	e033      	b.n	8007f40 <__swsetup_r+0x98>
 8007ed8:	0758      	lsls	r0, r3, #29
 8007eda:	d512      	bpl.n	8007f02 <__swsetup_r+0x5a>
 8007edc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ede:	b141      	cbz	r1, 8007ef2 <__swsetup_r+0x4a>
 8007ee0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ee4:	4299      	cmp	r1, r3
 8007ee6:	d002      	beq.n	8007eee <__swsetup_r+0x46>
 8007ee8:	4628      	mov	r0, r5
 8007eea:	f000 f8af 	bl	800804c <_free_r>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ef2:	89a3      	ldrh	r3, [r4, #12]
 8007ef4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ef8:	81a3      	strh	r3, [r4, #12]
 8007efa:	2300      	movs	r3, #0
 8007efc:	6063      	str	r3, [r4, #4]
 8007efe:	6923      	ldr	r3, [r4, #16]
 8007f00:	6023      	str	r3, [r4, #0]
 8007f02:	89a3      	ldrh	r3, [r4, #12]
 8007f04:	f043 0308 	orr.w	r3, r3, #8
 8007f08:	81a3      	strh	r3, [r4, #12]
 8007f0a:	6923      	ldr	r3, [r4, #16]
 8007f0c:	b94b      	cbnz	r3, 8007f22 <__swsetup_r+0x7a>
 8007f0e:	89a3      	ldrh	r3, [r4, #12]
 8007f10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f18:	d003      	beq.n	8007f22 <__swsetup_r+0x7a>
 8007f1a:	4621      	mov	r1, r4
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	f000 fd2d 	bl	800897c <__smakebuf_r>
 8007f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f26:	f013 0201 	ands.w	r2, r3, #1
 8007f2a:	d00a      	beq.n	8007f42 <__swsetup_r+0x9a>
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	60a2      	str	r2, [r4, #8]
 8007f30:	6962      	ldr	r2, [r4, #20]
 8007f32:	4252      	negs	r2, r2
 8007f34:	61a2      	str	r2, [r4, #24]
 8007f36:	6922      	ldr	r2, [r4, #16]
 8007f38:	b942      	cbnz	r2, 8007f4c <__swsetup_r+0xa4>
 8007f3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f3e:	d1c5      	bne.n	8007ecc <__swsetup_r+0x24>
 8007f40:	bd38      	pop	{r3, r4, r5, pc}
 8007f42:	0799      	lsls	r1, r3, #30
 8007f44:	bf58      	it	pl
 8007f46:	6962      	ldrpl	r2, [r4, #20]
 8007f48:	60a2      	str	r2, [r4, #8]
 8007f4a:	e7f4      	b.n	8007f36 <__swsetup_r+0x8e>
 8007f4c:	2000      	movs	r0, #0
 8007f4e:	e7f7      	b.n	8007f40 <__swsetup_r+0x98>
 8007f50:	20000018 	.word	0x20000018

08007f54 <memset>:
 8007f54:	4402      	add	r2, r0
 8007f56:	4603      	mov	r3, r0
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d100      	bne.n	8007f5e <memset+0xa>
 8007f5c:	4770      	bx	lr
 8007f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f62:	e7f9      	b.n	8007f58 <memset+0x4>

08007f64 <_close_r>:
 8007f64:	b538      	push	{r3, r4, r5, lr}
 8007f66:	4d06      	ldr	r5, [pc, #24]	@ (8007f80 <_close_r+0x1c>)
 8007f68:	2300      	movs	r3, #0
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	4608      	mov	r0, r1
 8007f6e:	602b      	str	r3, [r5, #0]
 8007f70:	f7fa f955 	bl	800221e <_close>
 8007f74:	1c43      	adds	r3, r0, #1
 8007f76:	d102      	bne.n	8007f7e <_close_r+0x1a>
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	b103      	cbz	r3, 8007f7e <_close_r+0x1a>
 8007f7c:	6023      	str	r3, [r4, #0]
 8007f7e:	bd38      	pop	{r3, r4, r5, pc}
 8007f80:	20000854 	.word	0x20000854

08007f84 <_lseek_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4d07      	ldr	r5, [pc, #28]	@ (8007fa4 <_lseek_r+0x20>)
 8007f88:	4604      	mov	r4, r0
 8007f8a:	4608      	mov	r0, r1
 8007f8c:	4611      	mov	r1, r2
 8007f8e:	2200      	movs	r2, #0
 8007f90:	602a      	str	r2, [r5, #0]
 8007f92:	461a      	mov	r2, r3
 8007f94:	f7fa f96a 	bl	800226c <_lseek>
 8007f98:	1c43      	adds	r3, r0, #1
 8007f9a:	d102      	bne.n	8007fa2 <_lseek_r+0x1e>
 8007f9c:	682b      	ldr	r3, [r5, #0]
 8007f9e:	b103      	cbz	r3, 8007fa2 <_lseek_r+0x1e>
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	bd38      	pop	{r3, r4, r5, pc}
 8007fa4:	20000854 	.word	0x20000854

08007fa8 <_read_r>:
 8007fa8:	b538      	push	{r3, r4, r5, lr}
 8007faa:	4d07      	ldr	r5, [pc, #28]	@ (8007fc8 <_read_r+0x20>)
 8007fac:	4604      	mov	r4, r0
 8007fae:	4608      	mov	r0, r1
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	602a      	str	r2, [r5, #0]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f7fa f8f8 	bl	80021ac <_read>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	d102      	bne.n	8007fc6 <_read_r+0x1e>
 8007fc0:	682b      	ldr	r3, [r5, #0]
 8007fc2:	b103      	cbz	r3, 8007fc6 <_read_r+0x1e>
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	20000854 	.word	0x20000854

08007fcc <_write_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4d07      	ldr	r5, [pc, #28]	@ (8007fec <_write_r+0x20>)
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	4608      	mov	r0, r1
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	602a      	str	r2, [r5, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f7fa f903 	bl	80021e6 <_write>
 8007fe0:	1c43      	adds	r3, r0, #1
 8007fe2:	d102      	bne.n	8007fea <_write_r+0x1e>
 8007fe4:	682b      	ldr	r3, [r5, #0]
 8007fe6:	b103      	cbz	r3, 8007fea <_write_r+0x1e>
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	bd38      	pop	{r3, r4, r5, pc}
 8007fec:	20000854 	.word	0x20000854

08007ff0 <__errno>:
 8007ff0:	4b01      	ldr	r3, [pc, #4]	@ (8007ff8 <__errno+0x8>)
 8007ff2:	6818      	ldr	r0, [r3, #0]
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	20000018 	.word	0x20000018

08007ffc <__libc_init_array>:
 8007ffc:	b570      	push	{r4, r5, r6, lr}
 8007ffe:	4d0d      	ldr	r5, [pc, #52]	@ (8008034 <__libc_init_array+0x38>)
 8008000:	4c0d      	ldr	r4, [pc, #52]	@ (8008038 <__libc_init_array+0x3c>)
 8008002:	1b64      	subs	r4, r4, r5
 8008004:	10a4      	asrs	r4, r4, #2
 8008006:	2600      	movs	r6, #0
 8008008:	42a6      	cmp	r6, r4
 800800a:	d109      	bne.n	8008020 <__libc_init_array+0x24>
 800800c:	4d0b      	ldr	r5, [pc, #44]	@ (800803c <__libc_init_array+0x40>)
 800800e:	4c0c      	ldr	r4, [pc, #48]	@ (8008040 <__libc_init_array+0x44>)
 8008010:	f000 fd22 	bl	8008a58 <_init>
 8008014:	1b64      	subs	r4, r4, r5
 8008016:	10a4      	asrs	r4, r4, #2
 8008018:	2600      	movs	r6, #0
 800801a:	42a6      	cmp	r6, r4
 800801c:	d105      	bne.n	800802a <__libc_init_array+0x2e>
 800801e:	bd70      	pop	{r4, r5, r6, pc}
 8008020:	f855 3b04 	ldr.w	r3, [r5], #4
 8008024:	4798      	blx	r3
 8008026:	3601      	adds	r6, #1
 8008028:	e7ee      	b.n	8008008 <__libc_init_array+0xc>
 800802a:	f855 3b04 	ldr.w	r3, [r5], #4
 800802e:	4798      	blx	r3
 8008030:	3601      	adds	r6, #1
 8008032:	e7f2      	b.n	800801a <__libc_init_array+0x1e>
 8008034:	08008c18 	.word	0x08008c18
 8008038:	08008c18 	.word	0x08008c18
 800803c:	08008c18 	.word	0x08008c18
 8008040:	08008c1c 	.word	0x08008c1c

08008044 <__retarget_lock_init_recursive>:
 8008044:	4770      	bx	lr

08008046 <__retarget_lock_acquire_recursive>:
 8008046:	4770      	bx	lr

08008048 <__retarget_lock_release_recursive>:
 8008048:	4770      	bx	lr
	...

0800804c <_free_r>:
 800804c:	b538      	push	{r3, r4, r5, lr}
 800804e:	4605      	mov	r5, r0
 8008050:	2900      	cmp	r1, #0
 8008052:	d041      	beq.n	80080d8 <_free_r+0x8c>
 8008054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008058:	1f0c      	subs	r4, r1, #4
 800805a:	2b00      	cmp	r3, #0
 800805c:	bfb8      	it	lt
 800805e:	18e4      	addlt	r4, r4, r3
 8008060:	f000 f8e0 	bl	8008224 <__malloc_lock>
 8008064:	4a1d      	ldr	r2, [pc, #116]	@ (80080dc <_free_r+0x90>)
 8008066:	6813      	ldr	r3, [r2, #0]
 8008068:	b933      	cbnz	r3, 8008078 <_free_r+0x2c>
 800806a:	6063      	str	r3, [r4, #4]
 800806c:	6014      	str	r4, [r2, #0]
 800806e:	4628      	mov	r0, r5
 8008070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008074:	f000 b8dc 	b.w	8008230 <__malloc_unlock>
 8008078:	42a3      	cmp	r3, r4
 800807a:	d908      	bls.n	800808e <_free_r+0x42>
 800807c:	6820      	ldr	r0, [r4, #0]
 800807e:	1821      	adds	r1, r4, r0
 8008080:	428b      	cmp	r3, r1
 8008082:	bf01      	itttt	eq
 8008084:	6819      	ldreq	r1, [r3, #0]
 8008086:	685b      	ldreq	r3, [r3, #4]
 8008088:	1809      	addeq	r1, r1, r0
 800808a:	6021      	streq	r1, [r4, #0]
 800808c:	e7ed      	b.n	800806a <_free_r+0x1e>
 800808e:	461a      	mov	r2, r3
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	b10b      	cbz	r3, 8008098 <_free_r+0x4c>
 8008094:	42a3      	cmp	r3, r4
 8008096:	d9fa      	bls.n	800808e <_free_r+0x42>
 8008098:	6811      	ldr	r1, [r2, #0]
 800809a:	1850      	adds	r0, r2, r1
 800809c:	42a0      	cmp	r0, r4
 800809e:	d10b      	bne.n	80080b8 <_free_r+0x6c>
 80080a0:	6820      	ldr	r0, [r4, #0]
 80080a2:	4401      	add	r1, r0
 80080a4:	1850      	adds	r0, r2, r1
 80080a6:	4283      	cmp	r3, r0
 80080a8:	6011      	str	r1, [r2, #0]
 80080aa:	d1e0      	bne.n	800806e <_free_r+0x22>
 80080ac:	6818      	ldr	r0, [r3, #0]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	6053      	str	r3, [r2, #4]
 80080b2:	4408      	add	r0, r1
 80080b4:	6010      	str	r0, [r2, #0]
 80080b6:	e7da      	b.n	800806e <_free_r+0x22>
 80080b8:	d902      	bls.n	80080c0 <_free_r+0x74>
 80080ba:	230c      	movs	r3, #12
 80080bc:	602b      	str	r3, [r5, #0]
 80080be:	e7d6      	b.n	800806e <_free_r+0x22>
 80080c0:	6820      	ldr	r0, [r4, #0]
 80080c2:	1821      	adds	r1, r4, r0
 80080c4:	428b      	cmp	r3, r1
 80080c6:	bf04      	itt	eq
 80080c8:	6819      	ldreq	r1, [r3, #0]
 80080ca:	685b      	ldreq	r3, [r3, #4]
 80080cc:	6063      	str	r3, [r4, #4]
 80080ce:	bf04      	itt	eq
 80080d0:	1809      	addeq	r1, r1, r0
 80080d2:	6021      	streq	r1, [r4, #0]
 80080d4:	6054      	str	r4, [r2, #4]
 80080d6:	e7ca      	b.n	800806e <_free_r+0x22>
 80080d8:	bd38      	pop	{r3, r4, r5, pc}
 80080da:	bf00      	nop
 80080dc:	20000860 	.word	0x20000860

080080e0 <sbrk_aligned>:
 80080e0:	b570      	push	{r4, r5, r6, lr}
 80080e2:	4e0f      	ldr	r6, [pc, #60]	@ (8008120 <sbrk_aligned+0x40>)
 80080e4:	460c      	mov	r4, r1
 80080e6:	6831      	ldr	r1, [r6, #0]
 80080e8:	4605      	mov	r5, r0
 80080ea:	b911      	cbnz	r1, 80080f2 <sbrk_aligned+0x12>
 80080ec:	f000 fca4 	bl	8008a38 <_sbrk_r>
 80080f0:	6030      	str	r0, [r6, #0]
 80080f2:	4621      	mov	r1, r4
 80080f4:	4628      	mov	r0, r5
 80080f6:	f000 fc9f 	bl	8008a38 <_sbrk_r>
 80080fa:	1c43      	adds	r3, r0, #1
 80080fc:	d103      	bne.n	8008106 <sbrk_aligned+0x26>
 80080fe:	f04f 34ff 	mov.w	r4, #4294967295
 8008102:	4620      	mov	r0, r4
 8008104:	bd70      	pop	{r4, r5, r6, pc}
 8008106:	1cc4      	adds	r4, r0, #3
 8008108:	f024 0403 	bic.w	r4, r4, #3
 800810c:	42a0      	cmp	r0, r4
 800810e:	d0f8      	beq.n	8008102 <sbrk_aligned+0x22>
 8008110:	1a21      	subs	r1, r4, r0
 8008112:	4628      	mov	r0, r5
 8008114:	f000 fc90 	bl	8008a38 <_sbrk_r>
 8008118:	3001      	adds	r0, #1
 800811a:	d1f2      	bne.n	8008102 <sbrk_aligned+0x22>
 800811c:	e7ef      	b.n	80080fe <sbrk_aligned+0x1e>
 800811e:	bf00      	nop
 8008120:	2000085c 	.word	0x2000085c

08008124 <_malloc_r>:
 8008124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008128:	1ccd      	adds	r5, r1, #3
 800812a:	f025 0503 	bic.w	r5, r5, #3
 800812e:	3508      	adds	r5, #8
 8008130:	2d0c      	cmp	r5, #12
 8008132:	bf38      	it	cc
 8008134:	250c      	movcc	r5, #12
 8008136:	2d00      	cmp	r5, #0
 8008138:	4606      	mov	r6, r0
 800813a:	db01      	blt.n	8008140 <_malloc_r+0x1c>
 800813c:	42a9      	cmp	r1, r5
 800813e:	d904      	bls.n	800814a <_malloc_r+0x26>
 8008140:	230c      	movs	r3, #12
 8008142:	6033      	str	r3, [r6, #0]
 8008144:	2000      	movs	r0, #0
 8008146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800814a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008220 <_malloc_r+0xfc>
 800814e:	f000 f869 	bl	8008224 <__malloc_lock>
 8008152:	f8d8 3000 	ldr.w	r3, [r8]
 8008156:	461c      	mov	r4, r3
 8008158:	bb44      	cbnz	r4, 80081ac <_malloc_r+0x88>
 800815a:	4629      	mov	r1, r5
 800815c:	4630      	mov	r0, r6
 800815e:	f7ff ffbf 	bl	80080e0 <sbrk_aligned>
 8008162:	1c43      	adds	r3, r0, #1
 8008164:	4604      	mov	r4, r0
 8008166:	d158      	bne.n	800821a <_malloc_r+0xf6>
 8008168:	f8d8 4000 	ldr.w	r4, [r8]
 800816c:	4627      	mov	r7, r4
 800816e:	2f00      	cmp	r7, #0
 8008170:	d143      	bne.n	80081fa <_malloc_r+0xd6>
 8008172:	2c00      	cmp	r4, #0
 8008174:	d04b      	beq.n	800820e <_malloc_r+0xea>
 8008176:	6823      	ldr	r3, [r4, #0]
 8008178:	4639      	mov	r1, r7
 800817a:	4630      	mov	r0, r6
 800817c:	eb04 0903 	add.w	r9, r4, r3
 8008180:	f000 fc5a 	bl	8008a38 <_sbrk_r>
 8008184:	4581      	cmp	r9, r0
 8008186:	d142      	bne.n	800820e <_malloc_r+0xea>
 8008188:	6821      	ldr	r1, [r4, #0]
 800818a:	1a6d      	subs	r5, r5, r1
 800818c:	4629      	mov	r1, r5
 800818e:	4630      	mov	r0, r6
 8008190:	f7ff ffa6 	bl	80080e0 <sbrk_aligned>
 8008194:	3001      	adds	r0, #1
 8008196:	d03a      	beq.n	800820e <_malloc_r+0xea>
 8008198:	6823      	ldr	r3, [r4, #0]
 800819a:	442b      	add	r3, r5
 800819c:	6023      	str	r3, [r4, #0]
 800819e:	f8d8 3000 	ldr.w	r3, [r8]
 80081a2:	685a      	ldr	r2, [r3, #4]
 80081a4:	bb62      	cbnz	r2, 8008200 <_malloc_r+0xdc>
 80081a6:	f8c8 7000 	str.w	r7, [r8]
 80081aa:	e00f      	b.n	80081cc <_malloc_r+0xa8>
 80081ac:	6822      	ldr	r2, [r4, #0]
 80081ae:	1b52      	subs	r2, r2, r5
 80081b0:	d420      	bmi.n	80081f4 <_malloc_r+0xd0>
 80081b2:	2a0b      	cmp	r2, #11
 80081b4:	d917      	bls.n	80081e6 <_malloc_r+0xc2>
 80081b6:	1961      	adds	r1, r4, r5
 80081b8:	42a3      	cmp	r3, r4
 80081ba:	6025      	str	r5, [r4, #0]
 80081bc:	bf18      	it	ne
 80081be:	6059      	strne	r1, [r3, #4]
 80081c0:	6863      	ldr	r3, [r4, #4]
 80081c2:	bf08      	it	eq
 80081c4:	f8c8 1000 	streq.w	r1, [r8]
 80081c8:	5162      	str	r2, [r4, r5]
 80081ca:	604b      	str	r3, [r1, #4]
 80081cc:	4630      	mov	r0, r6
 80081ce:	f000 f82f 	bl	8008230 <__malloc_unlock>
 80081d2:	f104 000b 	add.w	r0, r4, #11
 80081d6:	1d23      	adds	r3, r4, #4
 80081d8:	f020 0007 	bic.w	r0, r0, #7
 80081dc:	1ac2      	subs	r2, r0, r3
 80081de:	bf1c      	itt	ne
 80081e0:	1a1b      	subne	r3, r3, r0
 80081e2:	50a3      	strne	r3, [r4, r2]
 80081e4:	e7af      	b.n	8008146 <_malloc_r+0x22>
 80081e6:	6862      	ldr	r2, [r4, #4]
 80081e8:	42a3      	cmp	r3, r4
 80081ea:	bf0c      	ite	eq
 80081ec:	f8c8 2000 	streq.w	r2, [r8]
 80081f0:	605a      	strne	r2, [r3, #4]
 80081f2:	e7eb      	b.n	80081cc <_malloc_r+0xa8>
 80081f4:	4623      	mov	r3, r4
 80081f6:	6864      	ldr	r4, [r4, #4]
 80081f8:	e7ae      	b.n	8008158 <_malloc_r+0x34>
 80081fa:	463c      	mov	r4, r7
 80081fc:	687f      	ldr	r7, [r7, #4]
 80081fe:	e7b6      	b.n	800816e <_malloc_r+0x4a>
 8008200:	461a      	mov	r2, r3
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	42a3      	cmp	r3, r4
 8008206:	d1fb      	bne.n	8008200 <_malloc_r+0xdc>
 8008208:	2300      	movs	r3, #0
 800820a:	6053      	str	r3, [r2, #4]
 800820c:	e7de      	b.n	80081cc <_malloc_r+0xa8>
 800820e:	230c      	movs	r3, #12
 8008210:	6033      	str	r3, [r6, #0]
 8008212:	4630      	mov	r0, r6
 8008214:	f000 f80c 	bl	8008230 <__malloc_unlock>
 8008218:	e794      	b.n	8008144 <_malloc_r+0x20>
 800821a:	6005      	str	r5, [r0, #0]
 800821c:	e7d6      	b.n	80081cc <_malloc_r+0xa8>
 800821e:	bf00      	nop
 8008220:	20000860 	.word	0x20000860

08008224 <__malloc_lock>:
 8008224:	4801      	ldr	r0, [pc, #4]	@ (800822c <__malloc_lock+0x8>)
 8008226:	f7ff bf0e 	b.w	8008046 <__retarget_lock_acquire_recursive>
 800822a:	bf00      	nop
 800822c:	20000858 	.word	0x20000858

08008230 <__malloc_unlock>:
 8008230:	4801      	ldr	r0, [pc, #4]	@ (8008238 <__malloc_unlock+0x8>)
 8008232:	f7ff bf09 	b.w	8008048 <__retarget_lock_release_recursive>
 8008236:	bf00      	nop
 8008238:	20000858 	.word	0x20000858

0800823c <__sfputc_r>:
 800823c:	6893      	ldr	r3, [r2, #8]
 800823e:	3b01      	subs	r3, #1
 8008240:	2b00      	cmp	r3, #0
 8008242:	b410      	push	{r4}
 8008244:	6093      	str	r3, [r2, #8]
 8008246:	da08      	bge.n	800825a <__sfputc_r+0x1e>
 8008248:	6994      	ldr	r4, [r2, #24]
 800824a:	42a3      	cmp	r3, r4
 800824c:	db01      	blt.n	8008252 <__sfputc_r+0x16>
 800824e:	290a      	cmp	r1, #10
 8008250:	d103      	bne.n	800825a <__sfputc_r+0x1e>
 8008252:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008256:	f7ff bde8 	b.w	8007e2a <__swbuf_r>
 800825a:	6813      	ldr	r3, [r2, #0]
 800825c:	1c58      	adds	r0, r3, #1
 800825e:	6010      	str	r0, [r2, #0]
 8008260:	7019      	strb	r1, [r3, #0]
 8008262:	4608      	mov	r0, r1
 8008264:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008268:	4770      	bx	lr

0800826a <__sfputs_r>:
 800826a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826c:	4606      	mov	r6, r0
 800826e:	460f      	mov	r7, r1
 8008270:	4614      	mov	r4, r2
 8008272:	18d5      	adds	r5, r2, r3
 8008274:	42ac      	cmp	r4, r5
 8008276:	d101      	bne.n	800827c <__sfputs_r+0x12>
 8008278:	2000      	movs	r0, #0
 800827a:	e007      	b.n	800828c <__sfputs_r+0x22>
 800827c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008280:	463a      	mov	r2, r7
 8008282:	4630      	mov	r0, r6
 8008284:	f7ff ffda 	bl	800823c <__sfputc_r>
 8008288:	1c43      	adds	r3, r0, #1
 800828a:	d1f3      	bne.n	8008274 <__sfputs_r+0xa>
 800828c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008290 <_vfiprintf_r>:
 8008290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008294:	460d      	mov	r5, r1
 8008296:	b09d      	sub	sp, #116	@ 0x74
 8008298:	4614      	mov	r4, r2
 800829a:	4698      	mov	r8, r3
 800829c:	4606      	mov	r6, r0
 800829e:	b118      	cbz	r0, 80082a8 <_vfiprintf_r+0x18>
 80082a0:	6a03      	ldr	r3, [r0, #32]
 80082a2:	b90b      	cbnz	r3, 80082a8 <_vfiprintf_r+0x18>
 80082a4:	f7ff fcd8 	bl	8007c58 <__sinit>
 80082a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082aa:	07d9      	lsls	r1, r3, #31
 80082ac:	d405      	bmi.n	80082ba <_vfiprintf_r+0x2a>
 80082ae:	89ab      	ldrh	r3, [r5, #12]
 80082b0:	059a      	lsls	r2, r3, #22
 80082b2:	d402      	bmi.n	80082ba <_vfiprintf_r+0x2a>
 80082b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082b6:	f7ff fec6 	bl	8008046 <__retarget_lock_acquire_recursive>
 80082ba:	89ab      	ldrh	r3, [r5, #12]
 80082bc:	071b      	lsls	r3, r3, #28
 80082be:	d501      	bpl.n	80082c4 <_vfiprintf_r+0x34>
 80082c0:	692b      	ldr	r3, [r5, #16]
 80082c2:	b99b      	cbnz	r3, 80082ec <_vfiprintf_r+0x5c>
 80082c4:	4629      	mov	r1, r5
 80082c6:	4630      	mov	r0, r6
 80082c8:	f7ff fdee 	bl	8007ea8 <__swsetup_r>
 80082cc:	b170      	cbz	r0, 80082ec <_vfiprintf_r+0x5c>
 80082ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082d0:	07dc      	lsls	r4, r3, #31
 80082d2:	d504      	bpl.n	80082de <_vfiprintf_r+0x4e>
 80082d4:	f04f 30ff 	mov.w	r0, #4294967295
 80082d8:	b01d      	add	sp, #116	@ 0x74
 80082da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082de:	89ab      	ldrh	r3, [r5, #12]
 80082e0:	0598      	lsls	r0, r3, #22
 80082e2:	d4f7      	bmi.n	80082d4 <_vfiprintf_r+0x44>
 80082e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082e6:	f7ff feaf 	bl	8008048 <__retarget_lock_release_recursive>
 80082ea:	e7f3      	b.n	80082d4 <_vfiprintf_r+0x44>
 80082ec:	2300      	movs	r3, #0
 80082ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80082f0:	2320      	movs	r3, #32
 80082f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80082f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80082fa:	2330      	movs	r3, #48	@ 0x30
 80082fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80084ac <_vfiprintf_r+0x21c>
 8008300:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008304:	f04f 0901 	mov.w	r9, #1
 8008308:	4623      	mov	r3, r4
 800830a:	469a      	mov	sl, r3
 800830c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008310:	b10a      	cbz	r2, 8008316 <_vfiprintf_r+0x86>
 8008312:	2a25      	cmp	r2, #37	@ 0x25
 8008314:	d1f9      	bne.n	800830a <_vfiprintf_r+0x7a>
 8008316:	ebba 0b04 	subs.w	fp, sl, r4
 800831a:	d00b      	beq.n	8008334 <_vfiprintf_r+0xa4>
 800831c:	465b      	mov	r3, fp
 800831e:	4622      	mov	r2, r4
 8008320:	4629      	mov	r1, r5
 8008322:	4630      	mov	r0, r6
 8008324:	f7ff ffa1 	bl	800826a <__sfputs_r>
 8008328:	3001      	adds	r0, #1
 800832a:	f000 80a7 	beq.w	800847c <_vfiprintf_r+0x1ec>
 800832e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008330:	445a      	add	r2, fp
 8008332:	9209      	str	r2, [sp, #36]	@ 0x24
 8008334:	f89a 3000 	ldrb.w	r3, [sl]
 8008338:	2b00      	cmp	r3, #0
 800833a:	f000 809f 	beq.w	800847c <_vfiprintf_r+0x1ec>
 800833e:	2300      	movs	r3, #0
 8008340:	f04f 32ff 	mov.w	r2, #4294967295
 8008344:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008348:	f10a 0a01 	add.w	sl, sl, #1
 800834c:	9304      	str	r3, [sp, #16]
 800834e:	9307      	str	r3, [sp, #28]
 8008350:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008354:	931a      	str	r3, [sp, #104]	@ 0x68
 8008356:	4654      	mov	r4, sl
 8008358:	2205      	movs	r2, #5
 800835a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800835e:	4853      	ldr	r0, [pc, #332]	@ (80084ac <_vfiprintf_r+0x21c>)
 8008360:	f7f7 ff46 	bl	80001f0 <memchr>
 8008364:	9a04      	ldr	r2, [sp, #16]
 8008366:	b9d8      	cbnz	r0, 80083a0 <_vfiprintf_r+0x110>
 8008368:	06d1      	lsls	r1, r2, #27
 800836a:	bf44      	itt	mi
 800836c:	2320      	movmi	r3, #32
 800836e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008372:	0713      	lsls	r3, r2, #28
 8008374:	bf44      	itt	mi
 8008376:	232b      	movmi	r3, #43	@ 0x2b
 8008378:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800837c:	f89a 3000 	ldrb.w	r3, [sl]
 8008380:	2b2a      	cmp	r3, #42	@ 0x2a
 8008382:	d015      	beq.n	80083b0 <_vfiprintf_r+0x120>
 8008384:	9a07      	ldr	r2, [sp, #28]
 8008386:	4654      	mov	r4, sl
 8008388:	2000      	movs	r0, #0
 800838a:	f04f 0c0a 	mov.w	ip, #10
 800838e:	4621      	mov	r1, r4
 8008390:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008394:	3b30      	subs	r3, #48	@ 0x30
 8008396:	2b09      	cmp	r3, #9
 8008398:	d94b      	bls.n	8008432 <_vfiprintf_r+0x1a2>
 800839a:	b1b0      	cbz	r0, 80083ca <_vfiprintf_r+0x13a>
 800839c:	9207      	str	r2, [sp, #28]
 800839e:	e014      	b.n	80083ca <_vfiprintf_r+0x13a>
 80083a0:	eba0 0308 	sub.w	r3, r0, r8
 80083a4:	fa09 f303 	lsl.w	r3, r9, r3
 80083a8:	4313      	orrs	r3, r2
 80083aa:	9304      	str	r3, [sp, #16]
 80083ac:	46a2      	mov	sl, r4
 80083ae:	e7d2      	b.n	8008356 <_vfiprintf_r+0xc6>
 80083b0:	9b03      	ldr	r3, [sp, #12]
 80083b2:	1d19      	adds	r1, r3, #4
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	9103      	str	r1, [sp, #12]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	bfbb      	ittet	lt
 80083bc:	425b      	neglt	r3, r3
 80083be:	f042 0202 	orrlt.w	r2, r2, #2
 80083c2:	9307      	strge	r3, [sp, #28]
 80083c4:	9307      	strlt	r3, [sp, #28]
 80083c6:	bfb8      	it	lt
 80083c8:	9204      	strlt	r2, [sp, #16]
 80083ca:	7823      	ldrb	r3, [r4, #0]
 80083cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80083ce:	d10a      	bne.n	80083e6 <_vfiprintf_r+0x156>
 80083d0:	7863      	ldrb	r3, [r4, #1]
 80083d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80083d4:	d132      	bne.n	800843c <_vfiprintf_r+0x1ac>
 80083d6:	9b03      	ldr	r3, [sp, #12]
 80083d8:	1d1a      	adds	r2, r3, #4
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	9203      	str	r2, [sp, #12]
 80083de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083e2:	3402      	adds	r4, #2
 80083e4:	9305      	str	r3, [sp, #20]
 80083e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80084bc <_vfiprintf_r+0x22c>
 80083ea:	7821      	ldrb	r1, [r4, #0]
 80083ec:	2203      	movs	r2, #3
 80083ee:	4650      	mov	r0, sl
 80083f0:	f7f7 fefe 	bl	80001f0 <memchr>
 80083f4:	b138      	cbz	r0, 8008406 <_vfiprintf_r+0x176>
 80083f6:	9b04      	ldr	r3, [sp, #16]
 80083f8:	eba0 000a 	sub.w	r0, r0, sl
 80083fc:	2240      	movs	r2, #64	@ 0x40
 80083fe:	4082      	lsls	r2, r0
 8008400:	4313      	orrs	r3, r2
 8008402:	3401      	adds	r4, #1
 8008404:	9304      	str	r3, [sp, #16]
 8008406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800840a:	4829      	ldr	r0, [pc, #164]	@ (80084b0 <_vfiprintf_r+0x220>)
 800840c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008410:	2206      	movs	r2, #6
 8008412:	f7f7 feed 	bl	80001f0 <memchr>
 8008416:	2800      	cmp	r0, #0
 8008418:	d03f      	beq.n	800849a <_vfiprintf_r+0x20a>
 800841a:	4b26      	ldr	r3, [pc, #152]	@ (80084b4 <_vfiprintf_r+0x224>)
 800841c:	bb1b      	cbnz	r3, 8008466 <_vfiprintf_r+0x1d6>
 800841e:	9b03      	ldr	r3, [sp, #12]
 8008420:	3307      	adds	r3, #7
 8008422:	f023 0307 	bic.w	r3, r3, #7
 8008426:	3308      	adds	r3, #8
 8008428:	9303      	str	r3, [sp, #12]
 800842a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800842c:	443b      	add	r3, r7
 800842e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008430:	e76a      	b.n	8008308 <_vfiprintf_r+0x78>
 8008432:	fb0c 3202 	mla	r2, ip, r2, r3
 8008436:	460c      	mov	r4, r1
 8008438:	2001      	movs	r0, #1
 800843a:	e7a8      	b.n	800838e <_vfiprintf_r+0xfe>
 800843c:	2300      	movs	r3, #0
 800843e:	3401      	adds	r4, #1
 8008440:	9305      	str	r3, [sp, #20]
 8008442:	4619      	mov	r1, r3
 8008444:	f04f 0c0a 	mov.w	ip, #10
 8008448:	4620      	mov	r0, r4
 800844a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800844e:	3a30      	subs	r2, #48	@ 0x30
 8008450:	2a09      	cmp	r2, #9
 8008452:	d903      	bls.n	800845c <_vfiprintf_r+0x1cc>
 8008454:	2b00      	cmp	r3, #0
 8008456:	d0c6      	beq.n	80083e6 <_vfiprintf_r+0x156>
 8008458:	9105      	str	r1, [sp, #20]
 800845a:	e7c4      	b.n	80083e6 <_vfiprintf_r+0x156>
 800845c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008460:	4604      	mov	r4, r0
 8008462:	2301      	movs	r3, #1
 8008464:	e7f0      	b.n	8008448 <_vfiprintf_r+0x1b8>
 8008466:	ab03      	add	r3, sp, #12
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	462a      	mov	r2, r5
 800846c:	4b12      	ldr	r3, [pc, #72]	@ (80084b8 <_vfiprintf_r+0x228>)
 800846e:	a904      	add	r1, sp, #16
 8008470:	4630      	mov	r0, r6
 8008472:	f3af 8000 	nop.w
 8008476:	4607      	mov	r7, r0
 8008478:	1c78      	adds	r0, r7, #1
 800847a:	d1d6      	bne.n	800842a <_vfiprintf_r+0x19a>
 800847c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800847e:	07d9      	lsls	r1, r3, #31
 8008480:	d405      	bmi.n	800848e <_vfiprintf_r+0x1fe>
 8008482:	89ab      	ldrh	r3, [r5, #12]
 8008484:	059a      	lsls	r2, r3, #22
 8008486:	d402      	bmi.n	800848e <_vfiprintf_r+0x1fe>
 8008488:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800848a:	f7ff fddd 	bl	8008048 <__retarget_lock_release_recursive>
 800848e:	89ab      	ldrh	r3, [r5, #12]
 8008490:	065b      	lsls	r3, r3, #25
 8008492:	f53f af1f 	bmi.w	80082d4 <_vfiprintf_r+0x44>
 8008496:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008498:	e71e      	b.n	80082d8 <_vfiprintf_r+0x48>
 800849a:	ab03      	add	r3, sp, #12
 800849c:	9300      	str	r3, [sp, #0]
 800849e:	462a      	mov	r2, r5
 80084a0:	4b05      	ldr	r3, [pc, #20]	@ (80084b8 <_vfiprintf_r+0x228>)
 80084a2:	a904      	add	r1, sp, #16
 80084a4:	4630      	mov	r0, r6
 80084a6:	f000 f879 	bl	800859c <_printf_i>
 80084aa:	e7e4      	b.n	8008476 <_vfiprintf_r+0x1e6>
 80084ac:	08008bdc 	.word	0x08008bdc
 80084b0:	08008be6 	.word	0x08008be6
 80084b4:	00000000 	.word	0x00000000
 80084b8:	0800826b 	.word	0x0800826b
 80084bc:	08008be2 	.word	0x08008be2

080084c0 <_printf_common>:
 80084c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084c4:	4616      	mov	r6, r2
 80084c6:	4698      	mov	r8, r3
 80084c8:	688a      	ldr	r2, [r1, #8]
 80084ca:	690b      	ldr	r3, [r1, #16]
 80084cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084d0:	4293      	cmp	r3, r2
 80084d2:	bfb8      	it	lt
 80084d4:	4613      	movlt	r3, r2
 80084d6:	6033      	str	r3, [r6, #0]
 80084d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80084dc:	4607      	mov	r7, r0
 80084de:	460c      	mov	r4, r1
 80084e0:	b10a      	cbz	r2, 80084e6 <_printf_common+0x26>
 80084e2:	3301      	adds	r3, #1
 80084e4:	6033      	str	r3, [r6, #0]
 80084e6:	6823      	ldr	r3, [r4, #0]
 80084e8:	0699      	lsls	r1, r3, #26
 80084ea:	bf42      	ittt	mi
 80084ec:	6833      	ldrmi	r3, [r6, #0]
 80084ee:	3302      	addmi	r3, #2
 80084f0:	6033      	strmi	r3, [r6, #0]
 80084f2:	6825      	ldr	r5, [r4, #0]
 80084f4:	f015 0506 	ands.w	r5, r5, #6
 80084f8:	d106      	bne.n	8008508 <_printf_common+0x48>
 80084fa:	f104 0a19 	add.w	sl, r4, #25
 80084fe:	68e3      	ldr	r3, [r4, #12]
 8008500:	6832      	ldr	r2, [r6, #0]
 8008502:	1a9b      	subs	r3, r3, r2
 8008504:	42ab      	cmp	r3, r5
 8008506:	dc26      	bgt.n	8008556 <_printf_common+0x96>
 8008508:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800850c:	6822      	ldr	r2, [r4, #0]
 800850e:	3b00      	subs	r3, #0
 8008510:	bf18      	it	ne
 8008512:	2301      	movne	r3, #1
 8008514:	0692      	lsls	r2, r2, #26
 8008516:	d42b      	bmi.n	8008570 <_printf_common+0xb0>
 8008518:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800851c:	4641      	mov	r1, r8
 800851e:	4638      	mov	r0, r7
 8008520:	47c8      	blx	r9
 8008522:	3001      	adds	r0, #1
 8008524:	d01e      	beq.n	8008564 <_printf_common+0xa4>
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	6922      	ldr	r2, [r4, #16]
 800852a:	f003 0306 	and.w	r3, r3, #6
 800852e:	2b04      	cmp	r3, #4
 8008530:	bf02      	ittt	eq
 8008532:	68e5      	ldreq	r5, [r4, #12]
 8008534:	6833      	ldreq	r3, [r6, #0]
 8008536:	1aed      	subeq	r5, r5, r3
 8008538:	68a3      	ldr	r3, [r4, #8]
 800853a:	bf0c      	ite	eq
 800853c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008540:	2500      	movne	r5, #0
 8008542:	4293      	cmp	r3, r2
 8008544:	bfc4      	itt	gt
 8008546:	1a9b      	subgt	r3, r3, r2
 8008548:	18ed      	addgt	r5, r5, r3
 800854a:	2600      	movs	r6, #0
 800854c:	341a      	adds	r4, #26
 800854e:	42b5      	cmp	r5, r6
 8008550:	d11a      	bne.n	8008588 <_printf_common+0xc8>
 8008552:	2000      	movs	r0, #0
 8008554:	e008      	b.n	8008568 <_printf_common+0xa8>
 8008556:	2301      	movs	r3, #1
 8008558:	4652      	mov	r2, sl
 800855a:	4641      	mov	r1, r8
 800855c:	4638      	mov	r0, r7
 800855e:	47c8      	blx	r9
 8008560:	3001      	adds	r0, #1
 8008562:	d103      	bne.n	800856c <_printf_common+0xac>
 8008564:	f04f 30ff 	mov.w	r0, #4294967295
 8008568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800856c:	3501      	adds	r5, #1
 800856e:	e7c6      	b.n	80084fe <_printf_common+0x3e>
 8008570:	18e1      	adds	r1, r4, r3
 8008572:	1c5a      	adds	r2, r3, #1
 8008574:	2030      	movs	r0, #48	@ 0x30
 8008576:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800857a:	4422      	add	r2, r4
 800857c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008580:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008584:	3302      	adds	r3, #2
 8008586:	e7c7      	b.n	8008518 <_printf_common+0x58>
 8008588:	2301      	movs	r3, #1
 800858a:	4622      	mov	r2, r4
 800858c:	4641      	mov	r1, r8
 800858e:	4638      	mov	r0, r7
 8008590:	47c8      	blx	r9
 8008592:	3001      	adds	r0, #1
 8008594:	d0e6      	beq.n	8008564 <_printf_common+0xa4>
 8008596:	3601      	adds	r6, #1
 8008598:	e7d9      	b.n	800854e <_printf_common+0x8e>
	...

0800859c <_printf_i>:
 800859c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085a0:	7e0f      	ldrb	r7, [r1, #24]
 80085a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085a4:	2f78      	cmp	r7, #120	@ 0x78
 80085a6:	4691      	mov	r9, r2
 80085a8:	4680      	mov	r8, r0
 80085aa:	460c      	mov	r4, r1
 80085ac:	469a      	mov	sl, r3
 80085ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085b2:	d807      	bhi.n	80085c4 <_printf_i+0x28>
 80085b4:	2f62      	cmp	r7, #98	@ 0x62
 80085b6:	d80a      	bhi.n	80085ce <_printf_i+0x32>
 80085b8:	2f00      	cmp	r7, #0
 80085ba:	f000 80d1 	beq.w	8008760 <_printf_i+0x1c4>
 80085be:	2f58      	cmp	r7, #88	@ 0x58
 80085c0:	f000 80b8 	beq.w	8008734 <_printf_i+0x198>
 80085c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085cc:	e03a      	b.n	8008644 <_printf_i+0xa8>
 80085ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085d2:	2b15      	cmp	r3, #21
 80085d4:	d8f6      	bhi.n	80085c4 <_printf_i+0x28>
 80085d6:	a101      	add	r1, pc, #4	@ (adr r1, 80085dc <_printf_i+0x40>)
 80085d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085dc:	08008635 	.word	0x08008635
 80085e0:	08008649 	.word	0x08008649
 80085e4:	080085c5 	.word	0x080085c5
 80085e8:	080085c5 	.word	0x080085c5
 80085ec:	080085c5 	.word	0x080085c5
 80085f0:	080085c5 	.word	0x080085c5
 80085f4:	08008649 	.word	0x08008649
 80085f8:	080085c5 	.word	0x080085c5
 80085fc:	080085c5 	.word	0x080085c5
 8008600:	080085c5 	.word	0x080085c5
 8008604:	080085c5 	.word	0x080085c5
 8008608:	08008747 	.word	0x08008747
 800860c:	08008673 	.word	0x08008673
 8008610:	08008701 	.word	0x08008701
 8008614:	080085c5 	.word	0x080085c5
 8008618:	080085c5 	.word	0x080085c5
 800861c:	08008769 	.word	0x08008769
 8008620:	080085c5 	.word	0x080085c5
 8008624:	08008673 	.word	0x08008673
 8008628:	080085c5 	.word	0x080085c5
 800862c:	080085c5 	.word	0x080085c5
 8008630:	08008709 	.word	0x08008709
 8008634:	6833      	ldr	r3, [r6, #0]
 8008636:	1d1a      	adds	r2, r3, #4
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	6032      	str	r2, [r6, #0]
 800863c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008640:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008644:	2301      	movs	r3, #1
 8008646:	e09c      	b.n	8008782 <_printf_i+0x1e6>
 8008648:	6833      	ldr	r3, [r6, #0]
 800864a:	6820      	ldr	r0, [r4, #0]
 800864c:	1d19      	adds	r1, r3, #4
 800864e:	6031      	str	r1, [r6, #0]
 8008650:	0606      	lsls	r6, r0, #24
 8008652:	d501      	bpl.n	8008658 <_printf_i+0xbc>
 8008654:	681d      	ldr	r5, [r3, #0]
 8008656:	e003      	b.n	8008660 <_printf_i+0xc4>
 8008658:	0645      	lsls	r5, r0, #25
 800865a:	d5fb      	bpl.n	8008654 <_printf_i+0xb8>
 800865c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008660:	2d00      	cmp	r5, #0
 8008662:	da03      	bge.n	800866c <_printf_i+0xd0>
 8008664:	232d      	movs	r3, #45	@ 0x2d
 8008666:	426d      	negs	r5, r5
 8008668:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800866c:	4858      	ldr	r0, [pc, #352]	@ (80087d0 <_printf_i+0x234>)
 800866e:	230a      	movs	r3, #10
 8008670:	e011      	b.n	8008696 <_printf_i+0xfa>
 8008672:	6821      	ldr	r1, [r4, #0]
 8008674:	6833      	ldr	r3, [r6, #0]
 8008676:	0608      	lsls	r0, r1, #24
 8008678:	f853 5b04 	ldr.w	r5, [r3], #4
 800867c:	d402      	bmi.n	8008684 <_printf_i+0xe8>
 800867e:	0649      	lsls	r1, r1, #25
 8008680:	bf48      	it	mi
 8008682:	b2ad      	uxthmi	r5, r5
 8008684:	2f6f      	cmp	r7, #111	@ 0x6f
 8008686:	4852      	ldr	r0, [pc, #328]	@ (80087d0 <_printf_i+0x234>)
 8008688:	6033      	str	r3, [r6, #0]
 800868a:	bf14      	ite	ne
 800868c:	230a      	movne	r3, #10
 800868e:	2308      	moveq	r3, #8
 8008690:	2100      	movs	r1, #0
 8008692:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008696:	6866      	ldr	r6, [r4, #4]
 8008698:	60a6      	str	r6, [r4, #8]
 800869a:	2e00      	cmp	r6, #0
 800869c:	db05      	blt.n	80086aa <_printf_i+0x10e>
 800869e:	6821      	ldr	r1, [r4, #0]
 80086a0:	432e      	orrs	r6, r5
 80086a2:	f021 0104 	bic.w	r1, r1, #4
 80086a6:	6021      	str	r1, [r4, #0]
 80086a8:	d04b      	beq.n	8008742 <_printf_i+0x1a6>
 80086aa:	4616      	mov	r6, r2
 80086ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80086b0:	fb03 5711 	mls	r7, r3, r1, r5
 80086b4:	5dc7      	ldrb	r7, [r0, r7]
 80086b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086ba:	462f      	mov	r7, r5
 80086bc:	42bb      	cmp	r3, r7
 80086be:	460d      	mov	r5, r1
 80086c0:	d9f4      	bls.n	80086ac <_printf_i+0x110>
 80086c2:	2b08      	cmp	r3, #8
 80086c4:	d10b      	bne.n	80086de <_printf_i+0x142>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	07df      	lsls	r7, r3, #31
 80086ca:	d508      	bpl.n	80086de <_printf_i+0x142>
 80086cc:	6923      	ldr	r3, [r4, #16]
 80086ce:	6861      	ldr	r1, [r4, #4]
 80086d0:	4299      	cmp	r1, r3
 80086d2:	bfde      	ittt	le
 80086d4:	2330      	movle	r3, #48	@ 0x30
 80086d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086de:	1b92      	subs	r2, r2, r6
 80086e0:	6122      	str	r2, [r4, #16]
 80086e2:	f8cd a000 	str.w	sl, [sp]
 80086e6:	464b      	mov	r3, r9
 80086e8:	aa03      	add	r2, sp, #12
 80086ea:	4621      	mov	r1, r4
 80086ec:	4640      	mov	r0, r8
 80086ee:	f7ff fee7 	bl	80084c0 <_printf_common>
 80086f2:	3001      	adds	r0, #1
 80086f4:	d14a      	bne.n	800878c <_printf_i+0x1f0>
 80086f6:	f04f 30ff 	mov.w	r0, #4294967295
 80086fa:	b004      	add	sp, #16
 80086fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	f043 0320 	orr.w	r3, r3, #32
 8008706:	6023      	str	r3, [r4, #0]
 8008708:	4832      	ldr	r0, [pc, #200]	@ (80087d4 <_printf_i+0x238>)
 800870a:	2778      	movs	r7, #120	@ 0x78
 800870c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008710:	6823      	ldr	r3, [r4, #0]
 8008712:	6831      	ldr	r1, [r6, #0]
 8008714:	061f      	lsls	r7, r3, #24
 8008716:	f851 5b04 	ldr.w	r5, [r1], #4
 800871a:	d402      	bmi.n	8008722 <_printf_i+0x186>
 800871c:	065f      	lsls	r7, r3, #25
 800871e:	bf48      	it	mi
 8008720:	b2ad      	uxthmi	r5, r5
 8008722:	6031      	str	r1, [r6, #0]
 8008724:	07d9      	lsls	r1, r3, #31
 8008726:	bf44      	itt	mi
 8008728:	f043 0320 	orrmi.w	r3, r3, #32
 800872c:	6023      	strmi	r3, [r4, #0]
 800872e:	b11d      	cbz	r5, 8008738 <_printf_i+0x19c>
 8008730:	2310      	movs	r3, #16
 8008732:	e7ad      	b.n	8008690 <_printf_i+0xf4>
 8008734:	4826      	ldr	r0, [pc, #152]	@ (80087d0 <_printf_i+0x234>)
 8008736:	e7e9      	b.n	800870c <_printf_i+0x170>
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	f023 0320 	bic.w	r3, r3, #32
 800873e:	6023      	str	r3, [r4, #0]
 8008740:	e7f6      	b.n	8008730 <_printf_i+0x194>
 8008742:	4616      	mov	r6, r2
 8008744:	e7bd      	b.n	80086c2 <_printf_i+0x126>
 8008746:	6833      	ldr	r3, [r6, #0]
 8008748:	6825      	ldr	r5, [r4, #0]
 800874a:	6961      	ldr	r1, [r4, #20]
 800874c:	1d18      	adds	r0, r3, #4
 800874e:	6030      	str	r0, [r6, #0]
 8008750:	062e      	lsls	r6, r5, #24
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	d501      	bpl.n	800875a <_printf_i+0x1be>
 8008756:	6019      	str	r1, [r3, #0]
 8008758:	e002      	b.n	8008760 <_printf_i+0x1c4>
 800875a:	0668      	lsls	r0, r5, #25
 800875c:	d5fb      	bpl.n	8008756 <_printf_i+0x1ba>
 800875e:	8019      	strh	r1, [r3, #0]
 8008760:	2300      	movs	r3, #0
 8008762:	6123      	str	r3, [r4, #16]
 8008764:	4616      	mov	r6, r2
 8008766:	e7bc      	b.n	80086e2 <_printf_i+0x146>
 8008768:	6833      	ldr	r3, [r6, #0]
 800876a:	1d1a      	adds	r2, r3, #4
 800876c:	6032      	str	r2, [r6, #0]
 800876e:	681e      	ldr	r6, [r3, #0]
 8008770:	6862      	ldr	r2, [r4, #4]
 8008772:	2100      	movs	r1, #0
 8008774:	4630      	mov	r0, r6
 8008776:	f7f7 fd3b 	bl	80001f0 <memchr>
 800877a:	b108      	cbz	r0, 8008780 <_printf_i+0x1e4>
 800877c:	1b80      	subs	r0, r0, r6
 800877e:	6060      	str	r0, [r4, #4]
 8008780:	6863      	ldr	r3, [r4, #4]
 8008782:	6123      	str	r3, [r4, #16]
 8008784:	2300      	movs	r3, #0
 8008786:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800878a:	e7aa      	b.n	80086e2 <_printf_i+0x146>
 800878c:	6923      	ldr	r3, [r4, #16]
 800878e:	4632      	mov	r2, r6
 8008790:	4649      	mov	r1, r9
 8008792:	4640      	mov	r0, r8
 8008794:	47d0      	blx	sl
 8008796:	3001      	adds	r0, #1
 8008798:	d0ad      	beq.n	80086f6 <_printf_i+0x15a>
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	079b      	lsls	r3, r3, #30
 800879e:	d413      	bmi.n	80087c8 <_printf_i+0x22c>
 80087a0:	68e0      	ldr	r0, [r4, #12]
 80087a2:	9b03      	ldr	r3, [sp, #12]
 80087a4:	4298      	cmp	r0, r3
 80087a6:	bfb8      	it	lt
 80087a8:	4618      	movlt	r0, r3
 80087aa:	e7a6      	b.n	80086fa <_printf_i+0x15e>
 80087ac:	2301      	movs	r3, #1
 80087ae:	4632      	mov	r2, r6
 80087b0:	4649      	mov	r1, r9
 80087b2:	4640      	mov	r0, r8
 80087b4:	47d0      	blx	sl
 80087b6:	3001      	adds	r0, #1
 80087b8:	d09d      	beq.n	80086f6 <_printf_i+0x15a>
 80087ba:	3501      	adds	r5, #1
 80087bc:	68e3      	ldr	r3, [r4, #12]
 80087be:	9903      	ldr	r1, [sp, #12]
 80087c0:	1a5b      	subs	r3, r3, r1
 80087c2:	42ab      	cmp	r3, r5
 80087c4:	dcf2      	bgt.n	80087ac <_printf_i+0x210>
 80087c6:	e7eb      	b.n	80087a0 <_printf_i+0x204>
 80087c8:	2500      	movs	r5, #0
 80087ca:	f104 0619 	add.w	r6, r4, #25
 80087ce:	e7f5      	b.n	80087bc <_printf_i+0x220>
 80087d0:	08008bed 	.word	0x08008bed
 80087d4:	08008bfe 	.word	0x08008bfe

080087d8 <__sflush_r>:
 80087d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087e0:	0716      	lsls	r6, r2, #28
 80087e2:	4605      	mov	r5, r0
 80087e4:	460c      	mov	r4, r1
 80087e6:	d454      	bmi.n	8008892 <__sflush_r+0xba>
 80087e8:	684b      	ldr	r3, [r1, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	dc02      	bgt.n	80087f4 <__sflush_r+0x1c>
 80087ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	dd48      	ble.n	8008886 <__sflush_r+0xae>
 80087f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087f6:	2e00      	cmp	r6, #0
 80087f8:	d045      	beq.n	8008886 <__sflush_r+0xae>
 80087fa:	2300      	movs	r3, #0
 80087fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008800:	682f      	ldr	r7, [r5, #0]
 8008802:	6a21      	ldr	r1, [r4, #32]
 8008804:	602b      	str	r3, [r5, #0]
 8008806:	d030      	beq.n	800886a <__sflush_r+0x92>
 8008808:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800880a:	89a3      	ldrh	r3, [r4, #12]
 800880c:	0759      	lsls	r1, r3, #29
 800880e:	d505      	bpl.n	800881c <__sflush_r+0x44>
 8008810:	6863      	ldr	r3, [r4, #4]
 8008812:	1ad2      	subs	r2, r2, r3
 8008814:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008816:	b10b      	cbz	r3, 800881c <__sflush_r+0x44>
 8008818:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800881a:	1ad2      	subs	r2, r2, r3
 800881c:	2300      	movs	r3, #0
 800881e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008820:	6a21      	ldr	r1, [r4, #32]
 8008822:	4628      	mov	r0, r5
 8008824:	47b0      	blx	r6
 8008826:	1c43      	adds	r3, r0, #1
 8008828:	89a3      	ldrh	r3, [r4, #12]
 800882a:	d106      	bne.n	800883a <__sflush_r+0x62>
 800882c:	6829      	ldr	r1, [r5, #0]
 800882e:	291d      	cmp	r1, #29
 8008830:	d82b      	bhi.n	800888a <__sflush_r+0xb2>
 8008832:	4a2a      	ldr	r2, [pc, #168]	@ (80088dc <__sflush_r+0x104>)
 8008834:	40ca      	lsrs	r2, r1
 8008836:	07d6      	lsls	r6, r2, #31
 8008838:	d527      	bpl.n	800888a <__sflush_r+0xb2>
 800883a:	2200      	movs	r2, #0
 800883c:	6062      	str	r2, [r4, #4]
 800883e:	04d9      	lsls	r1, r3, #19
 8008840:	6922      	ldr	r2, [r4, #16]
 8008842:	6022      	str	r2, [r4, #0]
 8008844:	d504      	bpl.n	8008850 <__sflush_r+0x78>
 8008846:	1c42      	adds	r2, r0, #1
 8008848:	d101      	bne.n	800884e <__sflush_r+0x76>
 800884a:	682b      	ldr	r3, [r5, #0]
 800884c:	b903      	cbnz	r3, 8008850 <__sflush_r+0x78>
 800884e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008850:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008852:	602f      	str	r7, [r5, #0]
 8008854:	b1b9      	cbz	r1, 8008886 <__sflush_r+0xae>
 8008856:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800885a:	4299      	cmp	r1, r3
 800885c:	d002      	beq.n	8008864 <__sflush_r+0x8c>
 800885e:	4628      	mov	r0, r5
 8008860:	f7ff fbf4 	bl	800804c <_free_r>
 8008864:	2300      	movs	r3, #0
 8008866:	6363      	str	r3, [r4, #52]	@ 0x34
 8008868:	e00d      	b.n	8008886 <__sflush_r+0xae>
 800886a:	2301      	movs	r3, #1
 800886c:	4628      	mov	r0, r5
 800886e:	47b0      	blx	r6
 8008870:	4602      	mov	r2, r0
 8008872:	1c50      	adds	r0, r2, #1
 8008874:	d1c9      	bne.n	800880a <__sflush_r+0x32>
 8008876:	682b      	ldr	r3, [r5, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d0c6      	beq.n	800880a <__sflush_r+0x32>
 800887c:	2b1d      	cmp	r3, #29
 800887e:	d001      	beq.n	8008884 <__sflush_r+0xac>
 8008880:	2b16      	cmp	r3, #22
 8008882:	d11e      	bne.n	80088c2 <__sflush_r+0xea>
 8008884:	602f      	str	r7, [r5, #0]
 8008886:	2000      	movs	r0, #0
 8008888:	e022      	b.n	80088d0 <__sflush_r+0xf8>
 800888a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800888e:	b21b      	sxth	r3, r3
 8008890:	e01b      	b.n	80088ca <__sflush_r+0xf2>
 8008892:	690f      	ldr	r7, [r1, #16]
 8008894:	2f00      	cmp	r7, #0
 8008896:	d0f6      	beq.n	8008886 <__sflush_r+0xae>
 8008898:	0793      	lsls	r3, r2, #30
 800889a:	680e      	ldr	r6, [r1, #0]
 800889c:	bf08      	it	eq
 800889e:	694b      	ldreq	r3, [r1, #20]
 80088a0:	600f      	str	r7, [r1, #0]
 80088a2:	bf18      	it	ne
 80088a4:	2300      	movne	r3, #0
 80088a6:	eba6 0807 	sub.w	r8, r6, r7
 80088aa:	608b      	str	r3, [r1, #8]
 80088ac:	f1b8 0f00 	cmp.w	r8, #0
 80088b0:	dde9      	ble.n	8008886 <__sflush_r+0xae>
 80088b2:	6a21      	ldr	r1, [r4, #32]
 80088b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80088b6:	4643      	mov	r3, r8
 80088b8:	463a      	mov	r2, r7
 80088ba:	4628      	mov	r0, r5
 80088bc:	47b0      	blx	r6
 80088be:	2800      	cmp	r0, #0
 80088c0:	dc08      	bgt.n	80088d4 <__sflush_r+0xfc>
 80088c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088ca:	81a3      	strh	r3, [r4, #12]
 80088cc:	f04f 30ff 	mov.w	r0, #4294967295
 80088d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d4:	4407      	add	r7, r0
 80088d6:	eba8 0800 	sub.w	r8, r8, r0
 80088da:	e7e7      	b.n	80088ac <__sflush_r+0xd4>
 80088dc:	20400001 	.word	0x20400001

080088e0 <_fflush_r>:
 80088e0:	b538      	push	{r3, r4, r5, lr}
 80088e2:	690b      	ldr	r3, [r1, #16]
 80088e4:	4605      	mov	r5, r0
 80088e6:	460c      	mov	r4, r1
 80088e8:	b913      	cbnz	r3, 80088f0 <_fflush_r+0x10>
 80088ea:	2500      	movs	r5, #0
 80088ec:	4628      	mov	r0, r5
 80088ee:	bd38      	pop	{r3, r4, r5, pc}
 80088f0:	b118      	cbz	r0, 80088fa <_fflush_r+0x1a>
 80088f2:	6a03      	ldr	r3, [r0, #32]
 80088f4:	b90b      	cbnz	r3, 80088fa <_fflush_r+0x1a>
 80088f6:	f7ff f9af 	bl	8007c58 <__sinit>
 80088fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d0f3      	beq.n	80088ea <_fflush_r+0xa>
 8008902:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008904:	07d0      	lsls	r0, r2, #31
 8008906:	d404      	bmi.n	8008912 <_fflush_r+0x32>
 8008908:	0599      	lsls	r1, r3, #22
 800890a:	d402      	bmi.n	8008912 <_fflush_r+0x32>
 800890c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800890e:	f7ff fb9a 	bl	8008046 <__retarget_lock_acquire_recursive>
 8008912:	4628      	mov	r0, r5
 8008914:	4621      	mov	r1, r4
 8008916:	f7ff ff5f 	bl	80087d8 <__sflush_r>
 800891a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800891c:	07da      	lsls	r2, r3, #31
 800891e:	4605      	mov	r5, r0
 8008920:	d4e4      	bmi.n	80088ec <_fflush_r+0xc>
 8008922:	89a3      	ldrh	r3, [r4, #12]
 8008924:	059b      	lsls	r3, r3, #22
 8008926:	d4e1      	bmi.n	80088ec <_fflush_r+0xc>
 8008928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800892a:	f7ff fb8d 	bl	8008048 <__retarget_lock_release_recursive>
 800892e:	e7dd      	b.n	80088ec <_fflush_r+0xc>

08008930 <__swhatbuf_r>:
 8008930:	b570      	push	{r4, r5, r6, lr}
 8008932:	460c      	mov	r4, r1
 8008934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008938:	2900      	cmp	r1, #0
 800893a:	b096      	sub	sp, #88	@ 0x58
 800893c:	4615      	mov	r5, r2
 800893e:	461e      	mov	r6, r3
 8008940:	da0d      	bge.n	800895e <__swhatbuf_r+0x2e>
 8008942:	89a3      	ldrh	r3, [r4, #12]
 8008944:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008948:	f04f 0100 	mov.w	r1, #0
 800894c:	bf14      	ite	ne
 800894e:	2340      	movne	r3, #64	@ 0x40
 8008950:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008954:	2000      	movs	r0, #0
 8008956:	6031      	str	r1, [r6, #0]
 8008958:	602b      	str	r3, [r5, #0]
 800895a:	b016      	add	sp, #88	@ 0x58
 800895c:	bd70      	pop	{r4, r5, r6, pc}
 800895e:	466a      	mov	r2, sp
 8008960:	f000 f848 	bl	80089f4 <_fstat_r>
 8008964:	2800      	cmp	r0, #0
 8008966:	dbec      	blt.n	8008942 <__swhatbuf_r+0x12>
 8008968:	9901      	ldr	r1, [sp, #4]
 800896a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800896e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008972:	4259      	negs	r1, r3
 8008974:	4159      	adcs	r1, r3
 8008976:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800897a:	e7eb      	b.n	8008954 <__swhatbuf_r+0x24>

0800897c <__smakebuf_r>:
 800897c:	898b      	ldrh	r3, [r1, #12]
 800897e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008980:	079d      	lsls	r5, r3, #30
 8008982:	4606      	mov	r6, r0
 8008984:	460c      	mov	r4, r1
 8008986:	d507      	bpl.n	8008998 <__smakebuf_r+0x1c>
 8008988:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800898c:	6023      	str	r3, [r4, #0]
 800898e:	6123      	str	r3, [r4, #16]
 8008990:	2301      	movs	r3, #1
 8008992:	6163      	str	r3, [r4, #20]
 8008994:	b003      	add	sp, #12
 8008996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008998:	ab01      	add	r3, sp, #4
 800899a:	466a      	mov	r2, sp
 800899c:	f7ff ffc8 	bl	8008930 <__swhatbuf_r>
 80089a0:	9f00      	ldr	r7, [sp, #0]
 80089a2:	4605      	mov	r5, r0
 80089a4:	4639      	mov	r1, r7
 80089a6:	4630      	mov	r0, r6
 80089a8:	f7ff fbbc 	bl	8008124 <_malloc_r>
 80089ac:	b948      	cbnz	r0, 80089c2 <__smakebuf_r+0x46>
 80089ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b2:	059a      	lsls	r2, r3, #22
 80089b4:	d4ee      	bmi.n	8008994 <__smakebuf_r+0x18>
 80089b6:	f023 0303 	bic.w	r3, r3, #3
 80089ba:	f043 0302 	orr.w	r3, r3, #2
 80089be:	81a3      	strh	r3, [r4, #12]
 80089c0:	e7e2      	b.n	8008988 <__smakebuf_r+0xc>
 80089c2:	89a3      	ldrh	r3, [r4, #12]
 80089c4:	6020      	str	r0, [r4, #0]
 80089c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089ca:	81a3      	strh	r3, [r4, #12]
 80089cc:	9b01      	ldr	r3, [sp, #4]
 80089ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80089d2:	b15b      	cbz	r3, 80089ec <__smakebuf_r+0x70>
 80089d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089d8:	4630      	mov	r0, r6
 80089da:	f000 f81d 	bl	8008a18 <_isatty_r>
 80089de:	b128      	cbz	r0, 80089ec <__smakebuf_r+0x70>
 80089e0:	89a3      	ldrh	r3, [r4, #12]
 80089e2:	f023 0303 	bic.w	r3, r3, #3
 80089e6:	f043 0301 	orr.w	r3, r3, #1
 80089ea:	81a3      	strh	r3, [r4, #12]
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	431d      	orrs	r5, r3
 80089f0:	81a5      	strh	r5, [r4, #12]
 80089f2:	e7cf      	b.n	8008994 <__smakebuf_r+0x18>

080089f4 <_fstat_r>:
 80089f4:	b538      	push	{r3, r4, r5, lr}
 80089f6:	4d07      	ldr	r5, [pc, #28]	@ (8008a14 <_fstat_r+0x20>)
 80089f8:	2300      	movs	r3, #0
 80089fa:	4604      	mov	r4, r0
 80089fc:	4608      	mov	r0, r1
 80089fe:	4611      	mov	r1, r2
 8008a00:	602b      	str	r3, [r5, #0]
 8008a02:	f7f9 fc18 	bl	8002236 <_fstat>
 8008a06:	1c43      	adds	r3, r0, #1
 8008a08:	d102      	bne.n	8008a10 <_fstat_r+0x1c>
 8008a0a:	682b      	ldr	r3, [r5, #0]
 8008a0c:	b103      	cbz	r3, 8008a10 <_fstat_r+0x1c>
 8008a0e:	6023      	str	r3, [r4, #0]
 8008a10:	bd38      	pop	{r3, r4, r5, pc}
 8008a12:	bf00      	nop
 8008a14:	20000854 	.word	0x20000854

08008a18 <_isatty_r>:
 8008a18:	b538      	push	{r3, r4, r5, lr}
 8008a1a:	4d06      	ldr	r5, [pc, #24]	@ (8008a34 <_isatty_r+0x1c>)
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	4604      	mov	r4, r0
 8008a20:	4608      	mov	r0, r1
 8008a22:	602b      	str	r3, [r5, #0]
 8008a24:	f7f9 fc17 	bl	8002256 <_isatty>
 8008a28:	1c43      	adds	r3, r0, #1
 8008a2a:	d102      	bne.n	8008a32 <_isatty_r+0x1a>
 8008a2c:	682b      	ldr	r3, [r5, #0]
 8008a2e:	b103      	cbz	r3, 8008a32 <_isatty_r+0x1a>
 8008a30:	6023      	str	r3, [r4, #0]
 8008a32:	bd38      	pop	{r3, r4, r5, pc}
 8008a34:	20000854 	.word	0x20000854

08008a38 <_sbrk_r>:
 8008a38:	b538      	push	{r3, r4, r5, lr}
 8008a3a:	4d06      	ldr	r5, [pc, #24]	@ (8008a54 <_sbrk_r+0x1c>)
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	4604      	mov	r4, r0
 8008a40:	4608      	mov	r0, r1
 8008a42:	602b      	str	r3, [r5, #0]
 8008a44:	f7f9 fc20 	bl	8002288 <_sbrk>
 8008a48:	1c43      	adds	r3, r0, #1
 8008a4a:	d102      	bne.n	8008a52 <_sbrk_r+0x1a>
 8008a4c:	682b      	ldr	r3, [r5, #0]
 8008a4e:	b103      	cbz	r3, 8008a52 <_sbrk_r+0x1a>
 8008a50:	6023      	str	r3, [r4, #0]
 8008a52:	bd38      	pop	{r3, r4, r5, pc}
 8008a54:	20000854 	.word	0x20000854

08008a58 <_init>:
 8008a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5a:	bf00      	nop
 8008a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a5e:	bc08      	pop	{r3}
 8008a60:	469e      	mov	lr, r3
 8008a62:	4770      	bx	lr

08008a64 <_fini>:
 8008a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a66:	bf00      	nop
 8008a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a6a:	bc08      	pop	{r3}
 8008a6c:	469e      	mov	lr, r3
 8008a6e:	4770      	bx	lr
